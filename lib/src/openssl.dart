// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class OpenSSL {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpenSSL(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpenSSL.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int OPENSSL_sk_num(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_num(
      arg0,
    );
  }

  late final _OPENSSL_sk_numPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_num');
  late final _OPENSSL_sk_num =
      _OPENSSL_sk_numPtr.asFunction<int Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_value(
    ffi.Pointer<OPENSSL_STACK> arg0,
    int arg1,
  ) {
    return _OPENSSL_sk_value(
      arg0,
      arg1,
    );
  }

  late final _OPENSSL_sk_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_value');
  late final _OPENSSL_sk_value = _OPENSSL_sk_valuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_set(
    ffi.Pointer<OPENSSL_STACK> st,
    int i,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_set(
      st,
      i,
      data,
    );
  }

  late final _OPENSSL_sk_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_set');
  late final _OPENSSL_sk_set = _OPENSSL_sk_setPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new(
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_new(
      cmp,
    );
  }

  late final _OPENSSL_sk_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_new');
  late final _OPENSSL_sk_new = _OPENSSL_sk_newPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_null() {
    return _OPENSSL_sk_new_null();
  }

  late final _OPENSSL_sk_new_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OPENSSL_STACK> Function()>>(
          'OPENSSL_sk_new_null');
  late final _OPENSSL_sk_new_null = _OPENSSL_sk_new_nullPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function()>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_reserve(
    OPENSSL_sk_compfunc c,
    int n,
  ) {
    return _OPENSSL_sk_new_reserve(
      c,
      n,
    );
  }

  late final _OPENSSL_sk_new_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc, ffi.Int)>>('OPENSSL_sk_new_reserve');
  late final _OPENSSL_sk_new_reserve = _OPENSSL_sk_new_reservePtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc, int)>();

  int OPENSSL_sk_reserve(
    ffi.Pointer<OPENSSL_STACK> st,
    int n,
  ) {
    return _OPENSSL_sk_reserve(
      st,
      n,
    );
  }

  late final _OPENSSL_sk_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_reserve');
  late final _OPENSSL_sk_reserve = _OPENSSL_sk_reservePtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  void OPENSSL_sk_free(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_free(
      arg0,
    );
  }

  late final _OPENSSL_sk_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_free');
  late final _OPENSSL_sk_free = _OPENSSL_sk_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_pop_free(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        func,
  ) {
    return _OPENSSL_sk_pop_free(
      st,
      func,
    );
  }

  late final _OPENSSL_sk_pop_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('OPENSSL_sk_pop_free');
  late final _OPENSSL_sk_pop_free = _OPENSSL_sk_pop_freePtr.asFunction<
      void Function(
          ffi.Pointer<OPENSSL_STACK>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_deep_copy(
    ffi.Pointer<OPENSSL_STACK> arg0,
    OPENSSL_sk_copyfunc c,
    OPENSSL_sk_freefunc f,
  ) {
    return _OPENSSL_sk_deep_copy(
      arg0,
      c,
      f,
    );
  }

  late final _OPENSSL_sk_deep_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_copyfunc,
              OPENSSL_sk_freefunc)>>('OPENSSL_sk_deep_copy');
  late final _OPENSSL_sk_deep_copy = _OPENSSL_sk_deep_copyPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc)>();

  int OPENSSL_sk_insert(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Void> data,
    int where,
  ) {
    return _OPENSSL_sk_insert(
      sk,
      data,
      where,
    );
  }

  late final _OPENSSL_sk_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('OPENSSL_sk_insert');
  late final _OPENSSL_sk_insert = _OPENSSL_sk_insertPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete(
    ffi.Pointer<OPENSSL_STACK> st,
    int loc,
  ) {
    return _OPENSSL_sk_delete(
      st,
      loc,
    );
  }

  late final _OPENSSL_sk_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_delete');
  late final _OPENSSL_sk_delete = _OPENSSL_sk_deletePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete_ptr(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _OPENSSL_sk_delete_ptr(
      st,
      p,
    );
  }

  late final _OPENSSL_sk_delete_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_delete_ptr');
  late final _OPENSSL_sk_delete_ptr = _OPENSSL_sk_delete_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find');
  late final _OPENSSL_sk_find = _OPENSSL_sk_findPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find_ex(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find_ex(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_find_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find_ex');
  late final _OPENSSL_sk_find_ex = _OPENSSL_sk_find_exPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find_all(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Int> pnum,
  ) {
    return _OPENSSL_sk_find_all(
      st,
      data,
      pnum,
    );
  }

  late final _OPENSSL_sk_find_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('OPENSSL_sk_find_all');
  late final _OPENSSL_sk_find_all = _OPENSSL_sk_find_allPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int>)>();

  int OPENSSL_sk_push(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_push(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_push');
  late final _OPENSSL_sk_push = _OPENSSL_sk_pushPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_unshift(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_unshift(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_unshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_unshift');
  late final _OPENSSL_sk_unshift = _OPENSSL_sk_unshiftPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_shift(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_shift(
      st,
    );
  }

  late final _OPENSSL_sk_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_shift');
  late final _OPENSSL_sk_shift = _OPENSSL_sk_shiftPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_pop(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_pop(
      st,
    );
  }

  late final _OPENSSL_sk_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_pop');
  late final _OPENSSL_sk_pop = _OPENSSL_sk_popPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_zero(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_zero(
      st,
    );
  }

  late final _OPENSSL_sk_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_zero');
  late final _OPENSSL_sk_zero = _OPENSSL_sk_zeroPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_set_cmp_func(
      sk,
      cmp,
    );
  }

  late final _OPENSSL_sk_set_cmp_funcPtr = _lookup<
      ffi.NativeFunction<
          OPENSSL_sk_compfunc Function(ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_set_cmp_func');
  late final _OPENSSL_sk_set_cmp_func = _OPENSSL_sk_set_cmp_funcPtr.asFunction<
      OPENSSL_sk_compfunc Function(
          ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_dup(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_dup(
      st,
    );
  }

  late final _OPENSSL_sk_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_dup');
  late final _OPENSSL_sk_dup = _OPENSSL_sk_dupPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_sort(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_sort(
      st,
    );
  }

  late final _OPENSSL_sk_sortPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_sort');
  late final _OPENSSL_sk_sort = _OPENSSL_sk_sortPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  int OPENSSL_sk_is_sorted(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_is_sorted(
      st,
    );
  }

  late final _OPENSSL_sk_is_sortedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_is_sorted');
  late final _OPENSSL_sk_is_sorted = _OPENSSL_sk_is_sortedPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>,
              ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id.value,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  Dart__uint64_t clock_gettime_nsec_np(
    clockid_t __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id.value,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.UnsignedInt)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int ERR_load_ASN1_strings() {
    return _ERR_load_ASN1_strings();
  }

  late final _ERR_load_ASN1_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASN1_strings');
  late final _ERR_load_ASN1_strings =
      _ERR_load_ASN1_stringsPtr.asFunction<int Function()>();

  int ERR_load_ASYNC_strings() {
    return _ERR_load_ASYNC_strings();
  }

  late final _ERR_load_ASYNC_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASYNC_strings');
  late final _ERR_load_ASYNC_strings =
      _ERR_load_ASYNC_stringsPtr.asFunction<int Function()>();

  int ERR_load_BIO_strings() {
    return _ERR_load_BIO_strings();
  }

  late final _ERR_load_BIO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BIO_strings');
  late final _ERR_load_BIO_strings =
      _ERR_load_BIO_stringsPtr.asFunction<int Function()>();

  int ERR_load_BN_strings() {
    return _ERR_load_BN_strings();
  }

  late final _ERR_load_BN_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BN_strings');
  late final _ERR_load_BN_strings =
      _ERR_load_BN_stringsPtr.asFunction<int Function()>();

  int ERR_load_BUF_strings() {
    return _ERR_load_BUF_strings();
  }

  late final _ERR_load_BUF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BUF_strings');
  late final _ERR_load_BUF_strings =
      _ERR_load_BUF_stringsPtr.asFunction<int Function()>();

  int ERR_load_CMS_strings() {
    return _ERR_load_CMS_strings();
  }

  late final _ERR_load_CMS_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CMS_strings');
  late final _ERR_load_CMS_strings =
      _ERR_load_CMS_stringsPtr.asFunction<int Function()>();

  int ERR_load_COMP_strings() {
    return _ERR_load_COMP_strings();
  }

  late final _ERR_load_COMP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_COMP_strings');
  late final _ERR_load_COMP_strings =
      _ERR_load_COMP_stringsPtr.asFunction<int Function()>();

  int ERR_load_CONF_strings() {
    return _ERR_load_CONF_strings();
  }

  late final _ERR_load_CONF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CONF_strings');
  late final _ERR_load_CONF_strings =
      _ERR_load_CONF_stringsPtr.asFunction<int Function()>();

  int ERR_load_CRYPTO_strings() {
    return _ERR_load_CRYPTO_strings();
  }

  late final _ERR_load_CRYPTO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_CRYPTO_strings');
  late final _ERR_load_CRYPTO_strings =
      _ERR_load_CRYPTO_stringsPtr.asFunction<int Function()>();

  int ERR_load_CT_strings() {
    return _ERR_load_CT_strings();
  }

  late final _ERR_load_CT_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CT_strings');
  late final _ERR_load_CT_strings =
      _ERR_load_CT_stringsPtr.asFunction<int Function()>();

  int ERR_load_DH_strings() {
    return _ERR_load_DH_strings();
  }

  late final _ERR_load_DH_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DH_strings');
  late final _ERR_load_DH_strings =
      _ERR_load_DH_stringsPtr.asFunction<int Function()>();

  int ERR_load_DSA_strings() {
    return _ERR_load_DSA_strings();
  }

  late final _ERR_load_DSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DSA_strings');
  late final _ERR_load_DSA_strings =
      _ERR_load_DSA_stringsPtr.asFunction<int Function()>();

  int ERR_load_EC_strings() {
    return _ERR_load_EC_strings();
  }

  late final _ERR_load_EC_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EC_strings');
  late final _ERR_load_EC_strings =
      _ERR_load_EC_stringsPtr.asFunction<int Function()>();

  int ERR_load_ENGINE_strings() {
    return _ERR_load_ENGINE_strings();
  }

  late final _ERR_load_ENGINE_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_ENGINE_strings');
  late final _ERR_load_ENGINE_strings =
      _ERR_load_ENGINE_stringsPtr.asFunction<int Function()>();

  int ERR_load_ERR_strings() {
    return _ERR_load_ERR_strings();
  }

  late final _ERR_load_ERR_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ERR_strings');
  late final _ERR_load_ERR_strings =
      _ERR_load_ERR_stringsPtr.asFunction<int Function()>();

  int ERR_load_EVP_strings() {
    return _ERR_load_EVP_strings();
  }

  late final _ERR_load_EVP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EVP_strings');
  late final _ERR_load_EVP_strings =
      _ERR_load_EVP_stringsPtr.asFunction<int Function()>();

  int ERR_load_KDF_strings() {
    return _ERR_load_KDF_strings();
  }

  late final _ERR_load_KDF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_KDF_strings');
  late final _ERR_load_KDF_strings =
      _ERR_load_KDF_stringsPtr.asFunction<int Function()>();

  int ERR_load_OBJ_strings() {
    return _ERR_load_OBJ_strings();
  }

  late final _ERR_load_OBJ_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OBJ_strings');
  late final _ERR_load_OBJ_strings =
      _ERR_load_OBJ_stringsPtr.asFunction<int Function()>();

  int ERR_load_OCSP_strings() {
    return _ERR_load_OCSP_strings();
  }

  late final _ERR_load_OCSP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OCSP_strings');
  late final _ERR_load_OCSP_strings =
      _ERR_load_OCSP_stringsPtr.asFunction<int Function()>();

  int ERR_load_PEM_strings() {
    return _ERR_load_PEM_strings();
  }

  late final _ERR_load_PEM_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PEM_strings');
  late final _ERR_load_PEM_strings =
      _ERR_load_PEM_stringsPtr.asFunction<int Function()>();

  int ERR_load_PKCS12_strings() {
    return _ERR_load_PKCS12_strings();
  }

  late final _ERR_load_PKCS12_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_PKCS12_strings');
  late final _ERR_load_PKCS12_strings =
      _ERR_load_PKCS12_stringsPtr.asFunction<int Function()>();

  int ERR_load_PKCS7_strings() {
    return _ERR_load_PKCS7_strings();
  }

  late final _ERR_load_PKCS7_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PKCS7_strings');
  late final _ERR_load_PKCS7_strings =
      _ERR_load_PKCS7_stringsPtr.asFunction<int Function()>();

  int ERR_load_RAND_strings() {
    return _ERR_load_RAND_strings();
  }

  late final _ERR_load_RAND_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_RAND_strings');
  late final _ERR_load_RAND_strings =
      _ERR_load_RAND_stringsPtr.asFunction<int Function()>();

  int ERR_load_RSA_strings() {
    return _ERR_load_RSA_strings();
  }

  late final _ERR_load_RSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_RSA_strings');
  late final _ERR_load_RSA_strings =
      _ERR_load_RSA_stringsPtr.asFunction<int Function()>();

  int ERR_load_OSSL_STORE_strings() {
    return _ERR_load_OSSL_STORE_strings();
  }

  late final _ERR_load_OSSL_STORE_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_OSSL_STORE_strings');
  late final _ERR_load_OSSL_STORE_strings =
      _ERR_load_OSSL_STORE_stringsPtr.asFunction<int Function()>();

  int ERR_load_TS_strings() {
    return _ERR_load_TS_strings();
  }

  late final _ERR_load_TS_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_TS_strings');
  late final _ERR_load_TS_strings =
      _ERR_load_TS_stringsPtr.asFunction<int Function()>();

  int ERR_load_UI_strings() {
    return _ERR_load_UI_strings();
  }

  late final _ERR_load_UI_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_UI_strings');
  late final _ERR_load_UI_strings =
      _ERR_load_UI_stringsPtr.asFunction<int Function()>();

  int ERR_load_X509_strings() {
    return _ERR_load_X509_strings();
  }

  late final _ERR_load_X509_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_X509_strings');
  late final _ERR_load_X509_strings =
      _ERR_load_X509_stringsPtr.asFunction<int Function()>();

  int ERR_load_X509V3_strings() {
    return _ERR_load_X509V3_strings();
  }

  late final _ERR_load_X509V3_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_X509V3_strings');
  late final _ERR_load_X509V3_strings =
      _ERR_load_X509V3_stringsPtr.asFunction<int Function()>();

  int OSSL_provider_init(
    ffi.Pointer<OSSL_CORE_HANDLE> arg0,
    ffi.Pointer<OSSL_DISPATCH> arg1,
    ffi.Pointer<ffi.Pointer<OSSL_DISPATCH>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg3,
  ) {
    return _OSSL_provider_init(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _OSSL_provider_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_CORE_HANDLE>,
              ffi.Pointer<OSSL_DISPATCH>,
              ffi.Pointer<ffi.Pointer<OSSL_DISPATCH>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('OSSL_provider_init');
  late final _OSSL_provider_init = _OSSL_provider_initPtr.asFunction<
      int Function(
          ffi.Pointer<OSSL_CORE_HANDLE>,
          ffi.Pointer<OSSL_DISPATCH>,
          ffi.Pointer<ffi.Pointer<OSSL_DISPATCH>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<CRYPTO_RWLOCK> CRYPTO_THREAD_lock_new() {
    return _CRYPTO_THREAD_lock_new();
  }

  late final _CRYPTO_THREAD_lock_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CRYPTO_RWLOCK> Function()>>(
          'CRYPTO_THREAD_lock_new');
  late final _CRYPTO_THREAD_lock_new = _CRYPTO_THREAD_lock_newPtr.asFunction<
      ffi.Pointer<CRYPTO_RWLOCK> Function()>();

  int CRYPTO_THREAD_read_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_read_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_read_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_read_lock');
  late final _CRYPTO_THREAD_read_lock = _CRYPTO_THREAD_read_lockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_write_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_write_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_write_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_write_lock');
  late final _CRYPTO_THREAD_write_lock = _CRYPTO_THREAD_write_lockPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_unlock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_unlock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_unlock');
  late final _CRYPTO_THREAD_unlock = _CRYPTO_THREAD_unlockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  void CRYPTO_THREAD_lock_free(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_lock_free(
      lock,
    );
  }

  late final _CRYPTO_THREAD_lock_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
      'CRYPTO_THREAD_lock_free');
  late final _CRYPTO_THREAD_lock_free = _CRYPTO_THREAD_lock_freePtr.asFunction<
      void Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_add(
    ffi.Pointer<ffi.Int> val,
    int amount,
    ffi.Pointer<ffi.Int> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_add(
      val,
      amount,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_add');
  late final _CRYPTO_atomic_add = _CRYPTO_atomic_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_add64(
    ffi.Pointer<ffi.Uint64> val,
    int op,
    ffi.Pointer<ffi.Uint64> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_add64(
      val,
      op,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_add64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_add64');
  late final _CRYPTO_atomic_add64 = _CRYPTO_atomic_add64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_and(
    ffi.Pointer<ffi.Uint64> val,
    int op,
    ffi.Pointer<ffi.Uint64> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_and(
      val,
      op,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_andPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_and');
  late final _CRYPTO_atomic_and = _CRYPTO_atomic_andPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_or(
    ffi.Pointer<ffi.Uint64> val,
    int op,
    ffi.Pointer<ffi.Uint64> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_or(
      val,
      op,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_orPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_or');
  late final _CRYPTO_atomic_or = _CRYPTO_atomic_orPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_load(
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Uint64> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_load(
      val,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_load');
  late final _CRYPTO_atomic_load = _CRYPTO_atomic_loadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_load_int(
    ffi.Pointer<ffi.Int> val,
    ffi.Pointer<ffi.Int> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_load_int(
      val,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_load_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_load_int');
  late final _CRYPTO_atomic_load_int = _CRYPTO_atomic_load_intPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_store(
    ffi.Pointer<ffi.Uint64> dst,
    int val,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_store(
      dst,
      val,
      lock,
    );
  }

  late final _CRYPTO_atomic_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>, ffi.Uint64,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_store');
  late final _CRYPTO_atomic_store = _CRYPTO_atomic_storePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<CRYPTO_RWLOCK>)>();

  int OPENSSL_strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcpy(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OPENSSL_strlcpy');
  late final _OPENSSL_strlcpy = _OPENSSL_strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcat(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OPENSSL_strlcat');
  late final _OPENSSL_strlcat = _OPENSSL_strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strnlen(
    ffi.Pointer<ffi.Char> str,
    int maxlen,
  ) {
    return _OPENSSL_strnlen(
      str,
      maxlen,
    );
  }

  late final _OPENSSL_strnlenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'OPENSSL_strnlen');
  late final _OPENSSL_strnlen = _OPENSSL_strnlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strtoul(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    int base,
    ffi.Pointer<ffi.UnsignedLong> num,
  ) {
    return _OPENSSL_strtoul(
      str,
      endptr,
      base,
      num,
    );
  }

  late final _OPENSSL_strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>)>>('OPENSSL_strtoul');
  late final _OPENSSL_strtoul = _OPENSSL_strtoulPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<ffi.UnsignedLong>)>();

  int OPENSSL_buf2hexstr_ex(
    ffi.Pointer<ffi.Char> str,
    int str_n,
    ffi.Pointer<ffi.Size> strlength,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
    int sep,
  ) {
    return _OPENSSL_buf2hexstr_ex(
      str,
      str_n,
      strlength,
      buf,
      buflen,
      sep,
    );
  }

  late final _OPENSSL_buf2hexstr_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Char)>>('OPENSSL_buf2hexstr_ex');
  late final _OPENSSL_buf2hexstr_ex = _OPENSSL_buf2hexstr_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ffi.Char> OPENSSL_buf2hexstr(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
  ) {
    return _OPENSSL_buf2hexstr(
      buf,
      buflen,
    );
  }

  late final _OPENSSL_buf2hexstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('OPENSSL_buf2hexstr');
  late final _OPENSSL_buf2hexstr = _OPENSSL_buf2hexstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int OPENSSL_hexstr2buf_ex(
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buf_n,
    ffi.Pointer<ffi.Size> buflen,
    ffi.Pointer<ffi.Char> str,
    int sep,
  ) {
    return _OPENSSL_hexstr2buf_ex(
      buf,
      buf_n,
      buflen,
      str,
      sep,
    );
  }

  late final _OPENSSL_hexstr2buf_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Char)>>('OPENSSL_hexstr2buf_ex');
  late final _OPENSSL_hexstr2buf_ex = _OPENSSL_hexstr2buf_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.UnsignedChar> OPENSSL_hexstr2buf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Long> buflen,
  ) {
    return _OPENSSL_hexstr2buf(
      str,
      buflen,
    );
  }

  late final _OPENSSL_hexstr2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('OPENSSL_hexstr2buf');
  late final _OPENSSL_hexstr2buf = _OPENSSL_hexstr2bufPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  int OPENSSL_hexchar2int(
    int c,
  ) {
    return _OPENSSL_hexchar2int(
      c,
    );
  }

  late final _OPENSSL_hexchar2intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedChar)>>(
          'OPENSSL_hexchar2int');
  late final _OPENSSL_hexchar2int =
      _OPENSSL_hexchar2intPtr.asFunction<int Function(int)>();

  int OPENSSL_strcasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _OPENSSL_strcasecmp(
      s1,
      s2,
    );
  }

  late final _OPENSSL_strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_strcasecmp');
  late final _OPENSSL_strcasecmp = _OPENSSL_strcasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int OPENSSL_strncasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _OPENSSL_strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _OPENSSL_strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OPENSSL_strncasecmp');
  late final _OPENSSL_strncasecmp = _OPENSSL_strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_version_major() {
    return _OPENSSL_version_major();
  }

  late final _OPENSSL_version_majorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'OPENSSL_version_major');
  late final _OPENSSL_version_major =
      _OPENSSL_version_majorPtr.asFunction<int Function()>();

  int OPENSSL_version_minor() {
    return _OPENSSL_version_minor();
  }

  late final _OPENSSL_version_minorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'OPENSSL_version_minor');
  late final _OPENSSL_version_minor =
      _OPENSSL_version_minorPtr.asFunction<int Function()>();

  int OPENSSL_version_patch() {
    return _OPENSSL_version_patch();
  }

  late final _OPENSSL_version_patchPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'OPENSSL_version_patch');
  late final _OPENSSL_version_patch =
      _OPENSSL_version_patchPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> OPENSSL_version_pre_release() {
    return _OPENSSL_version_pre_release();
  }

  late final _OPENSSL_version_pre_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'OPENSSL_version_pre_release');
  late final _OPENSSL_version_pre_release = _OPENSSL_version_pre_releasePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> OPENSSL_version_build_metadata() {
    return _OPENSSL_version_build_metadata();
  }

  late final _OPENSSL_version_build_metadataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'OPENSSL_version_build_metadata');
  late final _OPENSSL_version_build_metadata =
      _OPENSSL_version_build_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  int OpenSSL_version_num() {
    return _OpenSSL_version_num();
  }

  late final _OpenSSL_version_numPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'OpenSSL_version_num');
  late final _OpenSSL_version_num =
      _OpenSSL_version_numPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> OpenSSL_version(
    int type,
  ) {
    return _OpenSSL_version(
      type,
    );
  }

  late final _OpenSSL_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OpenSSL_version');
  late final _OpenSSL_version =
      _OpenSSL_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> OPENSSL_info(
    int type,
  ) {
    return _OPENSSL_info(
      type,
    );
  }

  late final _OPENSSL_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OPENSSL_info');
  late final _OPENSSL_info =
      _OPENSSL_infoPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OPENSSL_issetugid() {
    return _OPENSSL_issetugid();
  }

  late final _OPENSSL_issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_issetugid');
  late final _OPENSSL_issetugid =
      _OPENSSL_issetugidPtr.asFunction<int Function()>();

  int CRYPTO_get_ex_new_index(
    int class_index,
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_new> new_func,
    ffi.Pointer<CRYPTO_EX_dup> dup_func,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _CRYPTO_get_ex_new_index(
      class_index,
      argl,
      argp,
      new_func,
      dup_func,
      free_func,
    );
  }

  late final _CRYPTO_get_ex_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Long,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_new>,
              ffi.Pointer<CRYPTO_EX_dup>,
              ffi.Pointer<CRYPTO_EX_free>)>>('CRYPTO_get_ex_new_index');
  late final _CRYPTO_get_ex_new_index = _CRYPTO_get_ex_new_indexPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_new>,
          ffi.Pointer<CRYPTO_EX_dup>, ffi.Pointer<CRYPTO_EX_free>)>();

  int CRYPTO_free_ex_index(
    int class_index,
    int idx,
  ) {
    return _CRYPTO_free_ex_index(
      class_index,
      idx,
    );
  }

  late final _CRYPTO_free_ex_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'CRYPTO_free_ex_index');
  late final _CRYPTO_free_ex_index =
      _CRYPTO_free_ex_indexPtr.asFunction<int Function(int, int)>();

  int CRYPTO_new_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_new_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_new_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_new_ex_data');
  late final _CRYPTO_new_ex_data = _CRYPTO_new_ex_dataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_dup_ex_data(
    int class_index,
    ffi.Pointer<CRYPTO_EX_DATA> to,
    ffi.Pointer<CRYPTO_EX_DATA> from,
  ) {
    return _CRYPTO_dup_ex_data(
      class_index,
      to,
      from,
    );
  }

  late final _CRYPTO_dup_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<CRYPTO_EX_DATA>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_dup_ex_data');
  late final _CRYPTO_dup_ex_data = _CRYPTO_dup_ex_dataPtr.asFunction<
      int Function(
          int, ffi.Pointer<CRYPTO_EX_DATA>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  void CRYPTO_free_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_free_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_free_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_free_ex_data');
  late final _CRYPTO_free_ex_data = _CRYPTO_free_ex_dataPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_alloc_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
  ) {
    return _CRYPTO_alloc_ex_data(
      class_index,
      obj,
      ad,
      idx,
    );
  }

  late final _CRYPTO_alloc_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int)>>('CRYPTO_alloc_ex_data');
  late final _CRYPTO_alloc_ex_data = _CRYPTO_alloc_ex_dataPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>, int)>();

  int CRYPTO_set_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_set_ex_data(
      ad,
      idx,
      val,
    );
  }

  late final _CRYPTO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_set_ex_data');
  late final _CRYPTO_set_ex_data = _CRYPTO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_EX_DATA>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CRYPTO_get_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
  ) {
    return _CRYPTO_get_ex_data(
      ad,
      idx,
    );
  }

  late final _CRYPTO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int)>>('CRYPTO_get_ex_data');
  late final _CRYPTO_get_ex_data = _CRYPTO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_EX_DATA>, int)>();

  int CRYPTO_set_mem_functions(
    CRYPTO_malloc_fn malloc_fn,
    CRYPTO_realloc_fn realloc_fn,
    CRYPTO_free_fn free_fn,
  ) {
    return _CRYPTO_set_mem_functions(
      malloc_fn,
      realloc_fn,
      free_fn,
    );
  }

  late final _CRYPTO_set_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CRYPTO_malloc_fn, CRYPTO_realloc_fn,
              CRYPTO_free_fn)>>('CRYPTO_set_mem_functions');
  late final _CRYPTO_set_mem_functions =
      _CRYPTO_set_mem_functionsPtr.asFunction<
          int Function(CRYPTO_malloc_fn, CRYPTO_realloc_fn, CRYPTO_free_fn)>();

  void CRYPTO_get_mem_functions(
    ffi.Pointer<CRYPTO_malloc_fn> malloc_fn,
    ffi.Pointer<CRYPTO_realloc_fn> realloc_fn,
    ffi.Pointer<CRYPTO_free_fn> free_fn,
  ) {
    return _CRYPTO_get_mem_functions(
      malloc_fn,
      realloc_fn,
      free_fn,
    );
  }

  late final _CRYPTO_get_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CRYPTO_malloc_fn>,
              ffi.Pointer<CRYPTO_realloc_fn>,
              ffi.Pointer<CRYPTO_free_fn>)>>('CRYPTO_get_mem_functions');
  late final _CRYPTO_get_mem_functions =
      _CRYPTO_get_mem_functionsPtr.asFunction<
          void Function(ffi.Pointer<CRYPTO_malloc_fn>,
              ffi.Pointer<CRYPTO_realloc_fn>, ffi.Pointer<CRYPTO_free_fn>)>();

  ffi.Pointer<ffi.Void> CRYPTO_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_malloc');
  late final _CRYPTO_malloc = _CRYPTO_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_zalloc');
  late final _CRYPTO_zalloc = _CRYPTO_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_aligned_alloc(
    int num,
    int align,
    ffi.Pointer<ffi.Pointer<ffi.Void>> freeptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_aligned_alloc(
      num,
      align,
      freeptr,
      file,
      line,
    );
  }

  late final _CRYPTO_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_aligned_alloc');
  late final _CRYPTO_aligned_alloc = _CRYPTO_aligned_allocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_memdup(
    ffi.Pointer<ffi.Void> str,
    int siz,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_memdup(
      str,
      siz,
      file,
      line,
    );
  }

  late final _CRYPTO_memdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_memdup');
  late final _CRYPTO_memdup = _CRYPTO_memdupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strdup(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strdup(
      str,
      file,
      line,
    );
  }

  late final _CRYPTO_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strdup');
  late final _CRYPTO_strdup = _CRYPTO_strdupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strndup(
    ffi.Pointer<ffi.Char> str,
    int s,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strndup(
      str,
      s,
      file,
      line,
    );
  }

  late final _CRYPTO_strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strndup');
  late final _CRYPTO_strndup = _CRYPTO_strndupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_free');
  late final _CRYPTO_free = _CRYPTO_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_clear_free');
  late final _CRYPTO_clear_free = _CRYPTO_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_realloc(
    ffi.Pointer<ffi.Void> addr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_realloc(
      addr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_realloc');
  late final _CRYPTO_realloc = _CRYPTO_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_clear_realloc(
    ffi.Pointer<ffi.Void> addr,
    int old_num,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_realloc(
      addr,
      old_num,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_clear_realloc');
  late final _CRYPTO_clear_realloc = _CRYPTO_clear_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_malloc_init(
    int sz,
    int minsize,
  ) {
    return _CRYPTO_secure_malloc_init(
      sz,
      minsize,
    );
  }

  late final _CRYPTO_secure_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size, ffi.Size)>>(
          'CRYPTO_secure_malloc_init');
  late final _CRYPTO_secure_malloc_init =
      _CRYPTO_secure_malloc_initPtr.asFunction<int Function(int, int)>();

  int CRYPTO_secure_malloc_done() {
    return _CRYPTO_secure_malloc_done();
  }

  late final _CRYPTO_secure_malloc_donePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_done');
  late final _CRYPTO_secure_malloc_done =
      _CRYPTO_secure_malloc_donePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_malloc');
  late final _CRYPTO_secure_malloc = _CRYPTO_secure_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_zalloc');
  late final _CRYPTO_secure_zalloc = _CRYPTO_secure_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_free');
  late final _CRYPTO_secure_free = _CRYPTO_secure_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_secure_clear_free');
  late final _CRYPTO_secure_clear_free =
      _CRYPTO_secure_clear_freePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_allocated(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_allocated(
      ptr,
    );
  }

  late final _CRYPTO_secure_allocatedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_allocated');
  late final _CRYPTO_secure_allocated = _CRYPTO_secure_allocatedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_malloc_initialized() {
    return _CRYPTO_secure_malloc_initialized();
  }

  late final _CRYPTO_secure_malloc_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_initialized');
  late final _CRYPTO_secure_malloc_initialized =
      _CRYPTO_secure_malloc_initializedPtr.asFunction<int Function()>();

  int CRYPTO_secure_actual_size(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_actual_size(
      ptr,
    );
  }

  late final _CRYPTO_secure_actual_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_actual_size');
  late final _CRYPTO_secure_actual_size = _CRYPTO_secure_actual_sizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_used() {
    return _CRYPTO_secure_used();
  }

  late final _CRYPTO_secure_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('CRYPTO_secure_used');
  late final _CRYPTO_secure_used =
      _CRYPTO_secure_usedPtr.asFunction<int Function()>();

  void OPENSSL_cleanse(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OPENSSL_cleanse(
      ptr,
      len,
    );
  }

  late final _OPENSSL_cleansePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'OPENSSL_cleanse');
  late final _OPENSSL_cleanse = _OPENSSL_cleansePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_die(
    ffi.Pointer<ffi.Char> assertion,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _OPENSSL_die(
      assertion,
      file,
      line,
    );
  }

  late final _OPENSSL_diePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('OPENSSL_die');
  late final _OPENSSL_die = _OPENSSL_diePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_isservice() {
    return _OPENSSL_isservice();
  }

  late final _OPENSSL_isservicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_isservice');
  late final _OPENSSL_isservice =
      _OPENSSL_isservicePtr.asFunction<int Function()>();

  void OPENSSL_init() {
    return _OPENSSL_init();
  }

  late final _OPENSSL_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_init');
  late final _OPENSSL_init = _OPENSSL_initPtr.asFunction<void Function()>();

  void OPENSSL_fork_prepare() {
    return _OPENSSL_fork_prepare();
  }

  late final _OPENSSL_fork_preparePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_prepare');
  late final _OPENSSL_fork_prepare =
      _OPENSSL_fork_preparePtr.asFunction<void Function()>();

  void OPENSSL_fork_parent() {
    return _OPENSSL_fork_parent();
  }

  late final _OPENSSL_fork_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_parent');
  late final _OPENSSL_fork_parent =
      _OPENSSL_fork_parentPtr.asFunction<void Function()>();

  void OPENSSL_fork_child() {
    return _OPENSSL_fork_child();
  }

  late final _OPENSSL_fork_childPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_child');
  late final _OPENSSL_fork_child =
      _OPENSSL_fork_childPtr.asFunction<void Function()>();

  ffi.Pointer<tm> OPENSSL_gmtime(
    ffi.Pointer<time_t> timer,
    ffi.Pointer<tm> result,
  ) {
    return _OPENSSL_gmtime(
      timer,
      result,
    );
  }

  late final _OPENSSL_gmtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('OPENSSL_gmtime');
  late final _OPENSSL_gmtime = _OPENSSL_gmtimePtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int OPENSSL_gmtime_adj(
    ffi.Pointer<tm> tm,
    int offset_day,
    int offset_sec,
  ) {
    return _OPENSSL_gmtime_adj(
      tm,
      offset_day,
      offset_sec,
    );
  }

  late final _OPENSSL_gmtime_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<tm>, ffi.Int, ffi.Long)>>('OPENSSL_gmtime_adj');
  late final _OPENSSL_gmtime_adj = _OPENSSL_gmtime_adjPtr.asFunction<
      int Function(ffi.Pointer<tm>, int, int)>();

  int OPENSSL_gmtime_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<tm> from,
    ffi.Pointer<tm> to,
  ) {
    return _OPENSSL_gmtime_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _OPENSSL_gmtime_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<tm>, ffi.Pointer<tm>)>>('OPENSSL_gmtime_diff');
  late final _OPENSSL_gmtime_diff = _OPENSSL_gmtime_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<tm>,
          ffi.Pointer<tm>)>();

  int CRYPTO_memcmp(
    ffi.Pointer<ffi.Void> in_a,
    ffi.Pointer<ffi.Void> in_b,
    int len,
  ) {
    return _CRYPTO_memcmp(
      in_a,
      in_b,
      len,
    );
  }

  late final _CRYPTO_memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('CRYPTO_memcmp');
  late final _CRYPTO_memcmp = _CRYPTO_memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_cleanup() {
    return _OPENSSL_cleanup();
  }

  late final _OPENSSL_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_cleanup');
  late final _OPENSSL_cleanup =
      _OPENSSL_cleanupPtr.asFunction<void Function()>();

  int OPENSSL_init_crypto(
    int opts,
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_init_crypto(
      opts,
      settings,
    );
  }

  late final _OPENSSL_init_cryptoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64,
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_init_crypto');
  late final _OPENSSL_init_crypto = _OPENSSL_init_cryptoPtr.asFunction<
      int Function(int, ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int OPENSSL_atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> handler,
  ) {
    return _OPENSSL_atexit(
      handler,
    );
  }

  late final _OPENSSL_atexitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'OPENSSL_atexit');
  late final _OPENSSL_atexit = _OPENSSL_atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void OPENSSL_thread_stop() {
    return _OPENSSL_thread_stop();
  }

  late final _OPENSSL_thread_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_thread_stop');
  late final _OPENSSL_thread_stop =
      _OPENSSL_thread_stopPtr.asFunction<void Function()>();

  void OPENSSL_thread_stop_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
  ) {
    return _OPENSSL_thread_stop_ex(
      ctx,
    );
  }

  late final _OPENSSL_thread_stop_exPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_LIB_CTX>)>>(
          'OPENSSL_thread_stop_ex');
  late final _OPENSSL_thread_stop_ex = _OPENSSL_thread_stop_exPtr.asFunction<
      void Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  ffi.Pointer<OPENSSL_INIT_SETTINGS> OPENSSL_INIT_new() {
    return _OPENSSL_INIT_new();
  }

  late final _OPENSSL_INIT_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>>(
      'OPENSSL_INIT_new');
  late final _OPENSSL_INIT_new = _OPENSSL_INIT_newPtr.asFunction<
      ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>();

  int OPENSSL_INIT_set_config_filename(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_filename,
  ) {
    return _OPENSSL_INIT_set_config_filename(
      settings,
      config_filename,
    );
  }

  late final _OPENSSL_INIT_set_config_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_filename');
  late final _OPENSSL_INIT_set_config_filename =
      _OPENSSL_INIT_set_config_filenamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_set_config_file_flags(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    int flags,
  ) {
    return _OPENSSL_INIT_set_config_file_flags(
      settings,
      flags,
    );
  }

  late final _OPENSSL_INIT_set_config_file_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.UnsignedLong)>>('OPENSSL_INIT_set_config_file_flags');
  late final _OPENSSL_INIT_set_config_file_flags =
      _OPENSSL_INIT_set_config_file_flagsPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>, int)>();

  int OPENSSL_INIT_set_config_appname(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_appname,
  ) {
    return _OPENSSL_INIT_set_config_appname(
      settings,
      config_appname,
    );
  }

  late final _OPENSSL_INIT_set_config_appnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_appname');
  late final _OPENSSL_INIT_set_config_appname =
      _OPENSSL_INIT_set_config_appnamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_free(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_INIT_free(
      settings,
    );
  }

  late final _OPENSSL_INIT_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_INIT_free');
  late final _OPENSSL_INIT_free = _OPENSSL_INIT_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_min(
    int arg0,
  ) {
    return _sched_get_priority_min(
      arg0,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_get_priority_max(
    int arg0,
  ) {
    return _sched_get_priority_max(
      arg0,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  /// !
  /// @function qos_class_self
  ///
  /// @abstract
  /// Returns the requested QOS class of the current thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_self() {
    return _qos_class_self();
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  /// !
  /// @function qos_class_main
  ///
  /// @abstract
  /// Returns the initial requested QOS class of the main thread.
  ///
  /// @discussion
  /// The QOS class that the main thread of a process is created with depends on
  /// the type of process (e.g. application or daemon) and on how it has been
  /// launched.
  ///
  /// This function returns that initial requested QOS class value chosen by the
  /// system to enable propagation of that classification to matching work not
  /// executing on the main thread.
  ///
  /// @return
  /// One of the QOS class values in qos_class_t.
  int qos_class_main() {
    return _qos_class_main();
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_attr_set_qos_class_np
  ///
  /// @abstract
  /// Sets the QOS class and relative priority of a pthread attribute structure
  /// which may be used to specify the requested QOS class of newly created
  /// threads.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_attr_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_attr_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED.
  ///
  /// @param __attr
  /// The pthread attribute structure to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_set_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_attr_set_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_set_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, qos_class_t,
              ffi.Int)>>('pthread_attr_set_qos_class_np');
  late final _pthread_attr_set_qos_class_np = _pthread_attr_set_qos_class_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int, int)>();

  /// !
  /// @function pthread_attr_get_qos_class_np
  ///
  /// @abstract
  /// Gets the QOS class and relative priority of a pthread attribute structure.
  ///
  /// @param __attr
  /// The pthread attribute structure to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_attr_get_qos_class_np(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_attr_get_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_attr_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_get_qos_class_np');
  late final _pthread_attr_get_qos_class_np =
      _pthread_attr_get_qos_class_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_set_qos_class_self_np
  ///
  /// @abstract
  /// Sets the requested QOS class and relative priority of the current thread.
  ///
  /// @discussion
  /// The QOS class and relative priority represent an overall combination of
  /// system quality of service attributes on a thread.
  ///
  /// Subsequent calls to interfaces such as pthread_setschedparam() that are
  /// incompatible or in conflict with the QOS class system will unset the QOS
  /// class requested with this interface and pthread_get_qos_class_np() will
  /// return QOS_CLASS_UNSPECIFIED thereafter. A thread so modified is permanently
  /// opted-out of the QOS class system and calls to this function to request a QOS
  /// class for such a thread will fail and return EPERM.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// EINVAL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// EINVAL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_set_qos_class_self_np(
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_set_qos_class_self_np(
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_set_qos_class_self_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(qos_class_t, ffi.Int)>>(
          'pthread_set_qos_class_self_np');
  late final _pthread_set_qos_class_self_np =
      _pthread_set_qos_class_self_npPtr.asFunction<int Function(int, int)>();

  /// !
  /// @function pthread_get_qos_class_np
  ///
  /// @abstract
  /// Gets the requested QOS class and relative priority of a thread.
  ///
  /// @param __pthread
  /// The target thread to inspect.
  ///
  /// @param __qos_class
  /// On output, a QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// - QOS_CLASS_UNSPECIFIED
  /// This value may be NULL in which case no value is returned.
  ///
  /// @param __relative_priority
  /// On output, a relative priority offset within the QOS class.
  /// This value may be NULL in which case no value is returned.
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_get_qos_class_np(
    pthread_t __pthread,
    ffi.Pointer<qos_class_t> __qos_class,
    ffi.Pointer<ffi.Int> __relative_priority,
  ) {
    return _pthread_get_qos_class_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_get_qos_class_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<qos_class_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_get_qos_class_np');
  late final _pthread_get_qos_class_np =
      _pthread_get_qos_class_npPtr.asFunction<
          int Function(
              pthread_t, ffi.Pointer<qos_class_t>, ffi.Pointer<ffi.Int>)>();

  /// !
  /// @function pthread_override_qos_class_start_np
  ///
  /// @abstract
  /// Starts a QOS class override of the specified target thread.
  ///
  /// @discussion
  /// Starting a QOS class override of the specified target thread expresses that
  /// an item of pending work classified with the specified QOS class and relative
  /// priority depends on the completion of the work currently being executed by
  /// the thread (e.g. due to ordering requirements).
  ///
  /// While overrides are in effect, the specified target thread will execute at
  /// the maximum QOS class and relative priority of all overrides and of the QOS
  /// class requested by the thread itself.
  ///
  /// Starting a QOS class override does not modify the target thread's requested
  /// QOS class value and the effect of an override is not visible to the
  /// qos_class_self() and pthread_get_qos_class_np() interfaces.
  ///
  /// The returned newly allocated override object is intended to be associated
  /// with the item of pending work in question. Once the dependency has been
  /// satisfied and enabled that work to begin executing, the QOS class override
  /// must be ended by passing the associated override object to
  /// pthread_override_qos_class_end_np(). Failure to do so will result in the
  /// associated resources to be leaked and the target thread to be permanently
  /// executed at an inappropriately elevated QOS class.
  ///
  /// @param __pthread
  /// The target thread to modify.
  ///
  /// @param __qos_class
  /// A QOS class value:
  /// - QOS_CLASS_USER_INTERACTIVE
  /// - QOS_CLASS_USER_INITIATED
  /// - QOS_CLASS_DEFAULT
  /// - QOS_CLASS_UTILITY
  /// - QOS_CLASS_BACKGROUND
  /// NULL will be returned if any other value is provided.
  ///
  /// @param __relative_priority
  /// A relative priority within the QOS class. This value is a negative offset
  /// from the maximum supported scheduler priority for the given class.
  /// NULL will be returned if the value is greater than zero or less than
  /// QOS_MIN_RELATIVE_PRIORITY.
  ///
  /// @return
  /// A newly allocated override object if successful, or NULL if the override
  /// could not be started.
  pthread_override_t pthread_override_qos_class_start_np(
    pthread_t __pthread,
    int __qos_class,
    int __relative_priority,
  ) {
    return _pthread_override_qos_class_start_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  late final _pthread_override_qos_class_start_npPtr = _lookup<
      ffi.NativeFunction<
          pthread_override_t Function(pthread_t, qos_class_t,
              ffi.Int)>>('pthread_override_qos_class_start_np');
  late final _pthread_override_qos_class_start_np =
      _pthread_override_qos_class_start_npPtr
          .asFunction<pthread_override_t Function(pthread_t, int, int)>();

  /// !
  /// @function pthread_override_qos_class_end_np
  ///
  /// @abstract
  /// Ends a QOS class override.
  ///
  /// @discussion
  /// Passing an override object returned by pthread_override_qos_class_start_np()
  /// ends the QOS class override started by that call and deallocates all
  /// associated resources as well as the override object itself.
  ///
  /// The thread starting and the thread ending a QOS class override need not be
  /// identical. If the thread ending the override is the the target thread of the
  /// override itself, it should take care to elevate its requested QOS class
  /// appropriately with pthread_set_qos_class_self_np() before ending the
  /// override.
  ///
  /// @param __override
  /// An override object returned by pthread_override_qos_class_start_np().
  ///
  /// @return
  /// Zero if successful, otherwise an errno value.
  int pthread_override_qos_class_end_np(
    pthread_override_t __override,
  ) {
    return _pthread_override_qos_class_end_np(
      __override,
    );
  }

  late final _pthread_override_qos_class_end_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_override_t)>>(
          'pthread_override_qos_class_end_np');
  late final _pthread_override_qos_class_end_np =
      _pthread_override_qos_class_end_npPtr
          .asFunction<int Function(pthread_override_t)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg2,
  ) {
    return _pthread_atfork(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_destroy(
      arg0,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_getschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_attr_getscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _pthread_attr_getstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_attr_getstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _pthread_attr_getstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> arg0,
  ) {
    return _pthread_attr_init(
      arg0,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setdetachstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setguardsize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setinheritsched(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    return _pthread_attr_setschedparam(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setschedpolicy(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setscope(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _pthread_attr_setstack(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_attr_setstackaddr(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> arg0,
    int arg1,
  ) {
    return _pthread_attr_setstacksize(
      arg0,
      arg1,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_cancel(
    pthread_t arg0,
  ) {
    return _pthread_cancel(
      arg0,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(pthread_t)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_broadcast(
      arg0,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_destroy(
      arg0,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_condattr_t> arg1,
  ) {
    return _pthread_cond_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> arg0,
  ) {
    return _pthread_cond_signal(
      arg0,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
  ) {
    return _pthread_cond_wait(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_destroy(
      arg0,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> arg0,
  ) {
    return _pthread_condattr_init(
      arg0,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_condattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> arg0,
    int arg1,
  ) {
    return _pthread_condattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_create(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int pthread_detach(
    pthread_t arg0,
  ) {
    return _pthread_detach(
      arg0,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(pthread_t)>();

  int pthread_equal(
    pthread_t arg0,
    pthread_t arg1,
  ) {
    return _pthread_equal(
      arg0,
      arg1,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(pthread_t, pthread_t)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _pthread_exit(
      arg0,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_getconcurrency() {
    return _pthread_getconcurrency();
  }

  late final _pthread_getconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_getconcurrency');
  late final _pthread_getconcurrency =
      _pthread_getconcurrencyPtr.asFunction<int Function()>();

  int pthread_getschedparam(
    pthread_t arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_getschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(
          pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int arg0,
  ) {
    return _pthread_getspecific(
      arg0,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_join(
    pthread_t arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _pthread_join(
      arg0,
      arg1,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr.asFunction<
      int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg1,
  ) {
    return _pthread_key_create(
      arg0,
      arg1,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int arg0,
  ) {
    return _pthread_key_delete(
      arg0,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_destroy(
      arg0,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutex_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> arg0,
    ffi.Pointer<pthread_mutexattr_t> arg1,
  ) {
    return _pthread_mutex_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_lock(
      arg0,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _pthread_mutex_setprioceiling(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_trylock(
      arg0,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> arg0,
  ) {
    return _pthread_mutex_unlock(
      arg0,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_destroy(
      arg0,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_gettype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_getpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_mutexattr_getpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_getpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpolicy_np');
  late final _pthread_mutexattr_getpolicy_np =
      _pthread_mutexattr_getpolicy_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> arg0,
  ) {
    return _pthread_mutexattr_init(
      arg0,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprioceiling(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setprotocol(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_settype(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_setpolicy_np(
    ffi.Pointer<pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    return _pthread_mutexattr_setpolicy_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_mutexattr_setpolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpolicy_np');
  late final _pthread_mutexattr_setpolicy_np =
      _pthread_mutexattr_setpolicy_npPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg1,
  ) {
    return _pthread_once(
      arg0,
      arg1,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_destroy(
      arg0,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> arg0,
    ffi.Pointer<pthread_rwlockattr_t> arg1,
  ) {
    return _pthread_rwlock_init(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_rdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_tryrdlock(
      arg0,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_trywrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_wrlock(
      arg0,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> arg0,
  ) {
    return _pthread_rwlock_unlock(
      arg0,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_destroy(
      arg0,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_rwlockattr_getpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
  ) {
    return _pthread_rwlockattr_init(
      arg0,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> arg0,
    int arg1,
  ) {
    return _pthread_rwlockattr_setpshared(
      arg0,
      arg1,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  pthread_t pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self =
      _pthread_selfPtr.asFunction<pthread_t Function()>();

  int pthread_setcancelstate(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcancelstate(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _pthread_setcanceltype(
      arg0,
      arg1,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setconcurrency(
    int arg0,
  ) {
    return _pthread_setconcurrency(
      arg0,
    );
  }

  late final _pthread_setconcurrencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pthread_setconcurrency');
  late final _pthread_setconcurrency =
      _pthread_setconcurrencyPtr.asFunction<int Function(int)>();

  int pthread_setschedparam(
    pthread_t arg0,
    int arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    return _pthread_setschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(pthread_t, int, ffi.Pointer<sched_param>)>();

  int pthread_setspecific(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _pthread_setspecific(
      arg0,
      arg1,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  int pthread_is_threaded_np() {
    return _pthread_is_threaded_np();
  }

  late final _pthread_is_threaded_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_is_threaded_np');
  late final _pthread_is_threaded_np =
      _pthread_is_threaded_npPtr.asFunction<int Function()>();

  int pthread_threadid_np(
    pthread_t arg0,
    ffi.Pointer<__uint64_t> arg1,
  ) {
    return _pthread_threadid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_threadid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__uint64_t>)>>('pthread_threadid_np');
  late final _pthread_threadid_np = _pthread_threadid_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<__uint64_t>)>();

  int pthread_getname_np(
    pthread_t arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _pthread_getname_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_getname_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('pthread_getname_np');
  late final _pthread_getname_np = _pthread_getname_npPtr
      .asFunction<int Function(pthread_t, ffi.Pointer<ffi.Char>, int)>();

  int pthread_setname_np(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pthread_setname_np(
      arg0,
    );
  }

  late final _pthread_setname_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pthread_setname_np');
  late final _pthread_setname_np =
      _pthread_setname_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int pthread_main_np() {
    return _pthread_main_np();
  }

  late final _pthread_main_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pthread_main_np');
  late final _pthread_main_np =
      _pthread_main_npPtr.asFunction<int Function()>();

  int pthread_mach_thread_np(
    pthread_t arg0,
  ) {
    return _pthread_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(pthread_t)>>(
          'pthread_mach_thread_np');
  late final _pthread_mach_thread_np =
      _pthread_mach_thread_npPtr.asFunction<int Function(pthread_t)>();

  int pthread_get_stacksize_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stacksize_np(
      arg0,
    );
  }

  late final _pthread_get_stacksize_npPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(pthread_t)>>(
          'pthread_get_stacksize_np');
  late final _pthread_get_stacksize_np =
      _pthread_get_stacksize_npPtr.asFunction<int Function(pthread_t)>();

  ffi.Pointer<ffi.Void> pthread_get_stackaddr_np(
    pthread_t arg0,
  ) {
    return _pthread_get_stackaddr_np(
      arg0,
    );
  }

  late final _pthread_get_stackaddr_npPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>>(
          'pthread_get_stackaddr_np');
  late final _pthread_get_stackaddr_np = _pthread_get_stackaddr_npPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(pthread_t)>();

  int pthread_cond_signal_thread_np(
    ffi.Pointer<pthread_cond_t> arg0,
    pthread_t arg1,
  ) {
    return _pthread_cond_signal_thread_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_cond_signal_thread_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              pthread_t)>>('pthread_cond_signal_thread_np');
  late final _pthread_cond_signal_thread_np = _pthread_cond_signal_thread_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>, pthread_t)>();

  int pthread_cond_timedwait_relative_np(
    ffi.Pointer<pthread_cond_t> arg0,
    ffi.Pointer<pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    return _pthread_cond_timedwait_relative_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_cond_timedwait_relative_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait_relative_np');
  late final _pthread_cond_timedwait_relative_np =
      _pthread_cond_timedwait_relative_npPtr.asFunction<
          int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_create_suspended_np(
    ffi.Pointer<pthread_t> arg0,
    ffi.Pointer<pthread_attr_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _pthread_create_suspended_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pthread_create_suspended_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create_suspended_np');
  late final _pthread_create_suspended_np =
      _pthread_create_suspended_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  pthread_t pthread_from_mach_thread_np(
    int arg0,
  ) {
    return _pthread_from_mach_thread_np(
      arg0,
    );
  }

  late final _pthread_from_mach_thread_npPtr =
      _lookup<ffi.NativeFunction<pthread_t Function(mach_port_t)>>(
          'pthread_from_mach_thread_np');
  late final _pthread_from_mach_thread_np =
      _pthread_from_mach_thread_npPtr.asFunction<pthread_t Function(int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  void pthread_yield_np() {
    return _pthread_yield_np();
  }

  late final _pthread_yield_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_yield_np');
  late final _pthread_yield_np =
      _pthread_yield_npPtr.asFunction<void Function()>();

  void pthread_jit_write_protect_np(
    int enabled,
  ) {
    return _pthread_jit_write_protect_np(
      enabled,
    );
  }

  late final _pthread_jit_write_protect_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'pthread_jit_write_protect_np');
  late final _pthread_jit_write_protect_np =
      _pthread_jit_write_protect_npPtr.asFunction<void Function(int)>();

  int pthread_jit_write_protect_supported_np() {
    return _pthread_jit_write_protect_supported_np();
  }

  late final _pthread_jit_write_protect_supported_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'pthread_jit_write_protect_supported_np');
  late final _pthread_jit_write_protect_supported_np =
      _pthread_jit_write_protect_supported_npPtr.asFunction<int Function()>();

  /// !
  /// @function pthread_jit_write_with_callback_np
  ///
  /// @abstract
  /// Toggles per-thread write-protection of the MAP_JIT region to writeable,
  /// invokes an allowed callback function to write to it, and toggles protection
  /// back to executable.
  ///
  /// @param callback
  /// The callback function to invoke to write to the MAP_JIT region.  It must be
  /// statically allowed using {@link PTHREAD_JIT_WRITE_ALLOW_CALLBACKS_NP}.
  ///
  /// @param ctx
  /// Context to pass through to the invocation of the callback function.
  ///
  /// @result
  /// The result code returned by the callback function.
  ///
  /// @discussion
  /// This function assumes that the MAP_JIT region has executable protection when
  /// called.  It is therefore invalid to call it recursively from within a write
  /// callback.  The implementation does not detect such invalid recursive calls,
  /// so the client is responsible for preventing them.
  ///
  /// Callbacks _must not_ perform any non-local transfer of control flow (e.g.
  /// throw an exception, longjmp(3)), as doing so would leave the MAP_JIT region
  /// writeable.
  ///
  /// On systems where pthread_jit_write_protect_supported_np(3) is false, this
  /// function calls @callback directly and does nothing else.
  ///
  /// This function only enforces that @callback is allowed if the caller has the
  /// com.apple.security.cs.jit-write-allowlist entitlement.  That entitlement also
  /// disallows use of pthread_jit_write_protect_np(3).  Adopting the entitlement
  /// is therefore crucial in realizing the security benefits of this interface.
  ///
  /// If the entitlement is not present then this function toggles protection of
  /// the MAP_JIT to writeable, calls @callback and then toggles protection back to
  /// executable, without validating that @callback is an allowed function.  This
  /// behavior is intended to permit independent adoption of this interface by
  /// libraries - once all libraries in an application have adopted, the
  /// application should add the entitlement.
  ///
  /// By default, only callbacks in libraries/images present at process start-up
  /// are allowed - callbacks in images loaded dynamically via dlopen(3)/etc. are
  /// not permitted.  However, if the additional entitlement
  /// com.apple.security.cs.jit-write-allowlist-freeze-late is _also_ present, any
  /// callbacks in dlopen'd libraries are also added to the set of allowed
  /// callbacks until the {@link pthread_jit_write_freeze_callbacks_np} function is
  /// called.
  ///
  /// The goal of this interface is to allow applications that execute JIT-compiled
  /// code to mitigate against attempts from attackers to escalate to code
  /// execution by getting their own instructions written to the MAP_JIT region.
  ///
  /// Callbacks should assume an attacker can control the input to this function.
  /// They must therefore carefully validate the data that they are passed and do
  /// so using as little attackable state as possible. This means simplifying
  /// control flow and avoiding spills of sensitive registers (e.g. those used for
  /// validation or control flow).
  ///
  /// In the event a callback detects that its input is invalid, it should either
  /// abort in the simplest fashion possible (preferring e.g. __builtin_trap() over
  /// abort(3), the latter being encumbered by various conformance requirements) or
  /// return a result indicating failure.
  int pthread_jit_write_with_callback_np(
    pthread_jit_write_callback_t callback,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _pthread_jit_write_with_callback_np(
      callback,
      ctx,
    );
  }

  late final _pthread_jit_write_with_callback_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_jit_write_callback_t,
              ffi.Pointer<ffi.Void>)>>('pthread_jit_write_with_callback_np');
  late final _pthread_jit_write_with_callback_np =
      _pthread_jit_write_with_callback_npPtr.asFunction<
          int Function(pthread_jit_write_callback_t, ffi.Pointer<ffi.Void>)>();

  /// !
  /// @function pthread_jit_write_freeze_callbacks_np
  ///
  /// @abstract
  /// Freezes the set of allowed pthread JIT write callbacks, preventing any
  /// callbacks in subsequently dlopen'd libraries from being allowed as arguments
  /// to {@link pthread_jit_write_with_callback_np}
  ///
  /// @discussion
  /// If the com.apple.security.cs.jit-write-allowlist-freeze-late entitlement is
  /// present, this function must be called exactly once after all libraries
  /// containing JIT write callbacks have been loaded to prevent any further
  /// runtime modifications to the set of allowed callbacks.  Failing to call this
  /// function before calling pthread_jit_write_with_callback_np(3) for the first
  /// time is an error, as is calling it multiple times.
  ///
  /// If the jit-write-allowlist-freeze-late entitlement is not present, calling
  /// this function is an error.
  ///
  /// If an application does not need to dlopen(3) any libraries or frameworks
  /// containing needed JIT write callbacks, it is best to avoid the
  /// jit-write-allowlist-freeze-late entitlement and accompanying need to call
  /// this function, as this allows the runtime to automatically freeze the set of
  /// allowed callbacks early in process initialization.
  void pthread_jit_write_freeze_callbacks_np() {
    return _pthread_jit_write_freeze_callbacks_np();
  }

  late final _pthread_jit_write_freeze_callbacks_npPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'pthread_jit_write_freeze_callbacks_np');
  late final _pthread_jit_write_freeze_callbacks_np =
      _pthread_jit_write_freeze_callbacks_npPtr.asFunction<void Function()>();

  /// !
  /// @function pthread_cpu_number_np
  ///
  /// @param cpu_number_out
  /// The CPU number that the thread was running on at the time of query.
  /// This cpu number is in the interval [0, ncpus) (from sysctlbyname("hw.ncpu"))
  ///
  /// @result
  /// This function returns 0 or the value of errno if an error occurred.
  ///
  /// @note
  /// Optimizations of per-CPU datastructures based on the result of this function
  /// still require synchronization since it is not guaranteed that the thread will
  /// still be on the same CPU by the time the function returns.
  int pthread_cpu_number_np(
    ffi.Pointer<ffi.Size> cpu_number_out,
  ) {
    return _pthread_cpu_number_np(
      cpu_number_out,
    );
  }

  late final _pthread_cpu_number_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Size>)>>(
          'pthread_cpu_number_np');
  late final _pthread_cpu_number_np = _pthread_cpu_number_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Size>)>();

  int CRYPTO_THREAD_run_once(
    ffi.Pointer<CRYPTO_ONCE> once,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> init,
  ) {
    return _CRYPTO_THREAD_run_once(
      once,
      init,
    );
  }

  late final _CRYPTO_THREAD_run_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<CRYPTO_ONCE>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'CRYPTO_THREAD_run_once');
  late final _CRYPTO_THREAD_run_once = _CRYPTO_THREAD_run_oncePtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_ONCE>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int CRYPTO_THREAD_init_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        cleanup,
  ) {
    return _CRYPTO_THREAD_init_local(
      key,
      cleanup,
    );
  }

  late final _CRYPTO_THREAD_init_localPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<CRYPTO_THREAD_LOCAL>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'CRYPTO_THREAD_init_local');
  late final _CRYPTO_THREAD_init_local =
      _CRYPTO_THREAD_init_localPtr.asFunction<
          int Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> CRYPTO_THREAD_get_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_get_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_get_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>('CRYPTO_THREAD_get_local');
  late final _CRYPTO_THREAD_get_local = _CRYPTO_THREAD_get_localPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  int CRYPTO_THREAD_set_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_THREAD_set_local(
      key,
      val,
    );
  }

  late final _CRYPTO_THREAD_set_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_THREAD_set_local');
  late final _CRYPTO_THREAD_set_local = _CRYPTO_THREAD_set_localPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>, ffi.Pointer<ffi.Void>)>();

  int CRYPTO_THREAD_cleanup_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_cleanup_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_cleanup_localPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>(
      'CRYPTO_THREAD_cleanup_local');
  late final _CRYPTO_THREAD_cleanup_local = _CRYPTO_THREAD_cleanup_localPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id() {
    return _CRYPTO_THREAD_get_current_id();
  }

  late final _CRYPTO_THREAD_get_current_idPtr =
      _lookup<ffi.NativeFunction<CRYPTO_THREAD_ID Function()>>(
          'CRYPTO_THREAD_get_current_id');
  late final _CRYPTO_THREAD_get_current_id = _CRYPTO_THREAD_get_current_idPtr
      .asFunction<CRYPTO_THREAD_ID Function()>();

  int CRYPTO_THREAD_compare_id(
    CRYPTO_THREAD_ID a,
    CRYPTO_THREAD_ID b,
  ) {
    return _CRYPTO_THREAD_compare_id(
      a,
      b,
    );
  }

  late final _CRYPTO_THREAD_compare_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CRYPTO_THREAD_ID, CRYPTO_THREAD_ID)>>('CRYPTO_THREAD_compare_id');
  late final _CRYPTO_THREAD_compare_id = _CRYPTO_THREAD_compare_idPtr
      .asFunction<int Function(CRYPTO_THREAD_ID, CRYPTO_THREAD_ID)>();

  ffi.Pointer<OSSL_LIB_CTX> OSSL_LIB_CTX_new() {
    return _OSSL_LIB_CTX_new();
  }

  late final _OSSL_LIB_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OSSL_LIB_CTX> Function()>>(
          'OSSL_LIB_CTX_new');
  late final _OSSL_LIB_CTX_new =
      _OSSL_LIB_CTX_newPtr.asFunction<ffi.Pointer<OSSL_LIB_CTX> Function()>();

  ffi.Pointer<OSSL_LIB_CTX> OSSL_LIB_CTX_new_from_dispatch(
    ffi.Pointer<OSSL_CORE_HANDLE> handle,
    ffi.Pointer<OSSL_DISPATCH> in1,
  ) {
    return _OSSL_LIB_CTX_new_from_dispatch(
      handle,
      in1,
    );
  }

  late final _OSSL_LIB_CTX_new_from_dispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(ffi.Pointer<OSSL_CORE_HANDLE>,
              ffi.Pointer<OSSL_DISPATCH>)>>('OSSL_LIB_CTX_new_from_dispatch');
  late final _OSSL_LIB_CTX_new_from_dispatch =
      _OSSL_LIB_CTX_new_from_dispatchPtr.asFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(
              ffi.Pointer<OSSL_CORE_HANDLE>, ffi.Pointer<OSSL_DISPATCH>)>();

  ffi.Pointer<OSSL_LIB_CTX> OSSL_LIB_CTX_new_child(
    ffi.Pointer<OSSL_CORE_HANDLE> handle,
    ffi.Pointer<OSSL_DISPATCH> in1,
  ) {
    return _OSSL_LIB_CTX_new_child(
      handle,
      in1,
    );
  }

  late final _OSSL_LIB_CTX_new_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(ffi.Pointer<OSSL_CORE_HANDLE>,
              ffi.Pointer<OSSL_DISPATCH>)>>('OSSL_LIB_CTX_new_child');
  late final _OSSL_LIB_CTX_new_child = _OSSL_LIB_CTX_new_childPtr.asFunction<
      ffi.Pointer<OSSL_LIB_CTX> Function(
          ffi.Pointer<OSSL_CORE_HANDLE>, ffi.Pointer<OSSL_DISPATCH>)>();

  int OSSL_LIB_CTX_load_config(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> config_file,
  ) {
    return _OSSL_LIB_CTX_load_config(
      ctx,
      config_file,
    );
  }

  late final _OSSL_LIB_CTX_load_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('OSSL_LIB_CTX_load_config');
  late final _OSSL_LIB_CTX_load_config =
      _OSSL_LIB_CTX_load_configPtr.asFunction<
          int Function(ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>)>();

  void OSSL_LIB_CTX_free(
    ffi.Pointer<OSSL_LIB_CTX> arg0,
  ) {
    return _OSSL_LIB_CTX_free(
      arg0,
    );
  }

  late final _OSSL_LIB_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_LIB_CTX>)>>(
          'OSSL_LIB_CTX_free');
  late final _OSSL_LIB_CTX_free = _OSSL_LIB_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  ffi.Pointer<OSSL_LIB_CTX> OSSL_LIB_CTX_get0_global_default() {
    return _OSSL_LIB_CTX_get0_global_default();
  }

  late final _OSSL_LIB_CTX_get0_global_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OSSL_LIB_CTX> Function()>>(
          'OSSL_LIB_CTX_get0_global_default');
  late final _OSSL_LIB_CTX_get0_global_default =
      _OSSL_LIB_CTX_get0_global_defaultPtr.asFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function()>();

  ffi.Pointer<OSSL_LIB_CTX> OSSL_LIB_CTX_set0_default(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
  ) {
    return _OSSL_LIB_CTX_set0_default(
      libctx,
    );
  }

  late final _OSSL_LIB_CTX_set0_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(
              ffi.Pointer<OSSL_LIB_CTX>)>>('OSSL_LIB_CTX_set0_default');
  late final _OSSL_LIB_CTX_set0_default =
      _OSSL_LIB_CTX_set0_defaultPtr.asFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  int OSSL_LIB_CTX_get_conf_diagnostics(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
  ) {
    return _OSSL_LIB_CTX_get_conf_diagnostics(
      ctx,
    );
  }

  late final _OSSL_LIB_CTX_get_conf_diagnosticsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_LIB_CTX>)>>(
          'OSSL_LIB_CTX_get_conf_diagnostics');
  late final _OSSL_LIB_CTX_get_conf_diagnostics =
      _OSSL_LIB_CTX_get_conf_diagnosticsPtr.asFunction<
          int Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  void OSSL_LIB_CTX_set_conf_diagnostics(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    int value,
  ) {
    return _OSSL_LIB_CTX_set_conf_diagnostics(
      ctx,
      value,
    );
  }

  late final _OSSL_LIB_CTX_set_conf_diagnosticsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Int)>>('OSSL_LIB_CTX_set_conf_diagnostics');
  late final _OSSL_LIB_CTX_set_conf_diagnostics =
      _OSSL_LIB_CTX_set_conf_diagnosticsPtr.asFunction<
          void Function(ffi.Pointer<OSSL_LIB_CTX>, int)>();

  void OSSL_sleep(
    int millis,
  ) {
    return _OSSL_sleep(
      millis,
    );
  }

  late final _OSSL_sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint64)>>('OSSL_sleep');
  late final _OSSL_sleep = _OSSL_sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Void> OSSL_LIB_CTX_get_data(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    int index,
  ) {
    return _OSSL_LIB_CTX_get_data(
      ctx,
      index,
    );
  }

  late final _OSSL_LIB_CTX_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OSSL_LIB_CTX>, ffi.Int)>>('OSSL_LIB_CTX_get_data');
  late final _OSSL_LIB_CTX_get_data = _OSSL_LIB_CTX_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OSSL_LIB_CTX>, int)>();

  void BN_set_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_flags(
      b,
      n,
    );
  }

  late final _BN_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_flags');
  late final _BN_set_flags =
      _BN_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_get_flags(
      b,
      n,
    );
  }

  late final _BN_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_get_flags');
  late final _BN_get_flags =
      _BN_get_flagsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  void BN_with_flags(
    ffi.Pointer<BIGNUM> dest,
    ffi.Pointer<BIGNUM> b,
    int flags,
  ) {
    return _BN_with_flags(
      dest,
      b,
      flags,
    );
  }

  late final _BN_with_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Int)>>('BN_with_flags');
  late final _BN_with_flags = _BN_with_flagsPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_GENCB_call(
    ffi.Pointer<BN_GENCB> cb,
    int a,
    int b,
  ) {
    return _BN_GENCB_call(
      cb,
      a,
      b,
    );
  }

  late final _BN_GENCB_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BN_GENCB>, ffi.Int, ffi.Int)>>('BN_GENCB_call');
  late final _BN_GENCB_call = _BN_GENCB_callPtr.asFunction<
      int Function(ffi.Pointer<BN_GENCB>, int, int)>();

  ffi.Pointer<BN_GENCB> BN_GENCB_new() {
    return _BN_GENCB_new();
  }

  late final _BN_GENCB_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_GENCB> Function()>>(
          'BN_GENCB_new');
  late final _BN_GENCB_new =
      _BN_GENCB_newPtr.asFunction<ffi.Pointer<BN_GENCB> Function()>();

  void BN_GENCB_free(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_free(
      cb,
    );
  }

  late final _BN_GENCB_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_GENCB>)>>(
          'BN_GENCB_free');
  late final _BN_GENCB_free =
      _BN_GENCB_freePtr.asFunction<void Function(ffi.Pointer<BN_GENCB>)>();

  void BN_GENCB_set_old(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set_old(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_set_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set_old');
  late final _BN_GENCB_set_old = _BN_GENCB_set_oldPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void BN_GENCB_set(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set');
  late final _BN_GENCB_set = _BN_GENCB_setPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BN_GENCB_get_arg(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_get_arg(
      cb,
    );
  }

  late final _BN_GENCB_get_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BN_GENCB>)>>('BN_GENCB_get_arg');
  late final _BN_GENCB_get_arg = _BN_GENCB_get_argPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)>();

  int BN_abs_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_abs_is_word(
      a,
      w,
    );
  }

  late final _BN_abs_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_abs_is_word');
  late final _BN_abs_is_word =
      _BN_abs_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_zero(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_zero(
      a,
    );
  }

  late final _BN_is_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_zero');
  late final _BN_is_zero =
      _BN_is_zeroPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_one(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_one(
      a,
    );
  }

  late final _BN_is_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_one');
  late final _BN_is_one =
      _BN_is_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_is_word(
      a,
      w,
    );
  }

  late final _BN_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_is_word');
  late final _BN_is_word =
      _BN_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_odd(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_odd(
      a,
    );
  }

  late final _BN_is_oddPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_odd');
  late final _BN_is_odd =
      _BN_is_oddPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  void BN_zero_ex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_zero_ex(
      a,
    );
  }

  late final _BN_zero_exPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_zero_ex');
  late final _BN_zero_ex =
      _BN_zero_exPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_value_one() {
    return _BN_value_one();
  }

  late final _BN_value_onePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_value_one');
  late final _BN_value_one =
      _BN_value_onePtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<ffi.Char> BN_options() {
    return _BN_options();
  }

  late final _BN_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'BN_options');
  late final _BN_options =
      _BN_optionsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_new_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
  ) {
    return _BN_CTX_new_ex(
      ctx,
    );
  }

  late final _BN_CTX_new_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_CTX> Function(
              ffi.Pointer<OSSL_LIB_CTX>)>>('BN_CTX_new_ex');
  late final _BN_CTX_new_ex = _BN_CTX_new_exPtr.asFunction<
      ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  ffi.Pointer<BN_CTX> BN_CTX_new() {
    return _BN_CTX_new();
  }

  late final _BN_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>('BN_CTX_new');
  late final _BN_CTX_new =
      _BN_CTX_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
  ) {
    return _BN_CTX_secure_new_ex(
      ctx,
    );
  }

  late final _BN_CTX_secure_new_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_CTX> Function(
              ffi.Pointer<OSSL_LIB_CTX>)>>('BN_CTX_secure_new_ex');
  late final _BN_CTX_secure_new_ex = _BN_CTX_secure_new_exPtr.asFunction<
      ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new() {
    return _BN_CTX_secure_new();
  }

  late final _BN_CTX_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>(
          'BN_CTX_secure_new');
  late final _BN_CTX_secure_new =
      _BN_CTX_secure_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  void BN_CTX_free(
    ffi.Pointer<BN_CTX> c,
  ) {
    return _BN_CTX_free(
      c,
    );
  }

  late final _BN_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_free');
  late final _BN_CTX_free =
      _BN_CTX_freePtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_start(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_start(
      ctx,
    );
  }

  late final _BN_CTX_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_start');
  late final _BN_CTX_start =
      _BN_CTX_startPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_CTX_get(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_get(
      ctx,
    );
  }

  late final _BN_CTX_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>>('BN_CTX_get');
  late final _BN_CTX_get = _BN_CTX_getPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_end(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_end(
      ctx,
    );
  }

  late final _BN_CTX_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_end');
  late final _BN_CTX_end =
      _BN_CTX_endPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  int BN_rand_ex(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_rand_ex(
      rnd,
      bits,
      top,
      bottom,
      strength,
      ctx,
    );
  }

  late final _BN_rand_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.Pointer<BN_CTX>)>>('BN_rand_ex');
  late final _BN_rand_ex = _BN_rand_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, int, int, int, int, ffi.Pointer<BN_CTX>)>();

  int BN_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_rand');
  late final _BN_rand = _BN_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_priv_rand_ex(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_priv_rand_ex(
      rnd,
      bits,
      top,
      bottom,
      strength,
      ctx,
    );
  }

  late final _BN_priv_rand_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int,
              ffi.UnsignedInt, ffi.Pointer<BN_CTX>)>>('BN_priv_rand_ex');
  late final _BN_priv_rand_ex = _BN_priv_rand_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, int, int, int, int, ffi.Pointer<BN_CTX>)>();

  int BN_priv_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_priv_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_priv_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_priv_rand');
  late final _BN_priv_rand = _BN_priv_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_rand_range_ex(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> range,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_rand_range_ex(
      r,
      range,
      strength,
      ctx,
    );
  }

  late final _BN_rand_range_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.UnsignedInt, ffi.Pointer<BN_CTX>)>>('BN_rand_range_ex');
  late final _BN_rand_range_ex = _BN_rand_range_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rand_range');
  late final _BN_rand_range = _BN_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_priv_rand_range_ex(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> range,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_priv_rand_range_ex(
      r,
      range,
      strength,
      ctx,
    );
  }

  late final _BN_priv_rand_range_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.UnsignedInt, ffi.Pointer<BN_CTX>)>>('BN_priv_rand_range_ex');
  late final _BN_priv_rand_range_ex = _BN_priv_rand_range_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_priv_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_priv_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_priv_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_priv_rand_range');
  late final _BN_priv_rand_range = _BN_priv_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_pseudo_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_pseudo_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_pseudo_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_pseudo_rand');
  late final _BN_pseudo_rand = _BN_pseudo_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_pseudo_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_pseudo_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_pseudo_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_pseudo_rand_range');
  late final _BN_pseudo_rand_range = _BN_pseudo_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_num_bits(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_num_bits(
      a,
    );
  }

  late final _BN_num_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_num_bits');
  late final _BN_num_bits =
      _BN_num_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_num_bits_word(
    int l,
  ) {
    return _BN_num_bits_word(
      l,
    );
  }

  late final _BN_num_bits_wordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong)>>(
          'BN_num_bits_word');
  late final _BN_num_bits_word =
      _BN_num_bits_wordPtr.asFunction<int Function(int)>();

  int BN_security_bits(
    int L,
    int N,
  ) {
    return _BN_security_bits(
      L,
      N,
    );
  }

  late final _BN_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BN_security_bits');
  late final _BN_security_bits =
      _BN_security_bitsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<BIGNUM> BN_new() {
    return _BN_new();
  }

  late final _BN_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>('BN_new');
  late final _BN_new = _BN_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_secure_new() {
    return _BN_secure_new();
  }

  late final _BN_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_secure_new');
  late final _BN_secure_new =
      _BN_secure_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  void BN_clear_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear_free(
      a,
    );
  }

  late final _BN_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear_free');
  late final _BN_clear_free =
      _BN_clear_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_copy(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_copy(
      a,
      b,
    );
  }

  late final _BN_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_copy');
  late final _BN_copy = _BN_copyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_swap(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_swap(
      a,
      b,
    );
  }

  late final _BN_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_swap');
  late final _BN_swap = _BN_swapPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_bin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_bin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_bin2bn');
  late final _BN_bin2bn = _BN_bin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_signed_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_bin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_signed_bin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_signed_bin2bn');
  late final _BN_signed_bin2bn = _BN_signed_bin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2bin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2bin(
      a,
      to,
    );
  }

  late final _BN_bn2binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2bin');
  late final _BN_bn2bin = _BN_bn2binPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_bn2binpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2binpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2binpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2binpad');
  late final _BN_bn2binpad = _BN_bn2binpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int BN_signed_bn2bin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2bin(
      a,
      to,
      tolen,
    );
  }

  late final _BN_signed_bn2binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_signed_bn2bin');
  late final _BN_signed_bn2bin = _BN_signed_bn2binPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_lebin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_lebin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_lebin2bn');
  late final _BN_lebin2bn = _BN_lebin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_signed_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_lebin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_signed_lebin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_signed_lebin2bn');
  late final _BN_signed_lebin2bn = _BN_signed_lebin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2lebinpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2lebinpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2lebinpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2lebinpad');
  late final _BN_bn2lebinpad = _BN_bn2lebinpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int BN_signed_bn2lebin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2lebin(
      a,
      to,
      tolen,
    );
  }

  late final _BN_signed_bn2lebinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_signed_bn2lebin');
  late final _BN_signed_bn2lebin = _BN_signed_bn2lebinPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_native2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_native2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_native2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_native2bn');
  late final _BN_native2bn = _BN_native2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_signed_native2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_native2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_signed_native2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_signed_native2bn');
  late final _BN_signed_native2bn = _BN_signed_native2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2nativepad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2nativepad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2nativepadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2nativepad');
  late final _BN_bn2nativepad = _BN_bn2nativepadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int BN_signed_bn2native(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2native(
      a,
      to,
      tolen,
    );
  }

  late final _BN_signed_bn2nativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_signed_bn2native');
  late final _BN_signed_bn2native = _BN_signed_bn2nativePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_mpi2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_mpi2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_mpi2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mpi2bn');
  late final _BN_mpi2bn = _BN_mpi2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2mpi(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2mpi(
      a,
      to,
    );
  }

  late final _BN_bn2mpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2mpi');
  late final _BN_bn2mpi = _BN_bn2mpiPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_sub(
      r,
      a,
      b,
    );
  }

  late final _BN_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_sub');
  late final _BN_sub = _BN_subPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_usub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_usub(
      r,
      a,
      b,
    );
  }

  late final _BN_usubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_usub');
  late final _BN_usub = _BN_usubPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_uadd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_uadd(
      r,
      a,
      b,
    );
  }

  late final _BN_uaddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_uadd');
  late final _BN_uadd = _BN_uaddPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_add(
      r,
      a,
      b,
    );
  }

  late final _BN_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_add');
  late final _BN_add = _BN_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mul(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mul');
  late final _BN_mul = _BN_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqr(
      r,
      a,
      ctx,
    );
  }

  late final _BN_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_sqr');
  late final _BN_sqr = _BN_sqrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// BN_set_negative sets sign of a BIGNUM
  /// \param  b  pointer to the BIGNUM object
  /// \param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise
  void BN_set_negative(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_negative(
      b,
      n,
    );
  }

  late final _BN_set_negativePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_negative');
  late final _BN_set_negative =
      _BN_set_negativePtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  /// BN_is_negative returns 1 if the BIGNUM is negative
  /// \param  b  pointer to the BIGNUM object
  /// \return 1 if a < 0 and 0 otherwise
  int BN_is_negative(
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_is_negative(
      b,
    );
  }

  late final _BN_is_negativePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_negative');
  late final _BN_is_negative =
      _BN_is_negativePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_div(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div(
      dv,
      rem,
      m,
      d,
      ctx,
    );
  }

  late final _BN_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_div');
  late final _BN_div = _BN_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nnmod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nnmod(
      r,
      m,
      d,
      ctx,
    );
  }

  late final _BN_nnmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nnmod');
  late final _BN_nnmod = _BN_nnmodPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_add(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_add');
  late final _BN_mod_add = _BN_mod_addPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_add_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_add_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_add_quick');
  late final _BN_mod_add_quick = _BN_mod_add_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sub(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_sub');
  late final _BN_mod_sub = _BN_mod_subPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sub_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_sub_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_sub_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_sub_quick');
  late final _BN_mod_sub_quick = _BN_mod_sub_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul');
  late final _BN_mod_mul = _BN_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqr(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqr');
  late final _BN_mod_sqr = _BN_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift1(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift1');
  late final _BN_mod_lshift1 = _BN_mod_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift1_quick(
      r,
      a,
      m,
    );
  }

  late final _BN_mod_lshift1_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift1_quick');
  late final _BN_mod_lshift1_quick = _BN_mod_lshift1_quickPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift(
      r,
      a,
      n,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift');
  late final _BN_mod_lshift = _BN_mod_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift_quick(
      r,
      a,
      n,
      m,
    );
  }

  late final _BN_mod_lshift_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift_quick');
  late final _BN_mod_lshift_quick = _BN_mod_lshift_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>)>();

  int BN_mod_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mod_word(
      a,
      w,
    );
  }

  late final _BN_mod_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mod_word');
  late final _BN_mod_word =
      _BN_mod_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_div_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_div_word(
      a,
      w,
    );
  }

  late final _BN_div_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_div_word');
  late final _BN_div_word =
      _BN_div_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mul_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mul_word(
      a,
      w,
    );
  }

  late final _BN_mul_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mul_word');
  late final _BN_mul_word =
      _BN_mul_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_add_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_add_word(
      a,
      w,
    );
  }

  late final _BN_add_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_add_word');
  late final _BN_add_word =
      _BN_add_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sub_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_sub_word(
      a,
      w,
    );
  }

  late final _BN_sub_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_sub_word');
  late final _BN_sub_word =
      _BN_sub_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_set_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_set_word(
      a,
      w,
    );
  }

  late final _BN_set_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_set_word');
  late final _BN_set_word =
      _BN_set_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_word(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_get_word(
      a,
    );
  }

  late final _BN_get_wordPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_word');
  late final _BN_get_word =
      _BN_get_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_cmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_cmp(
      a,
      b,
    );
  }

  late final _BN_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_cmp');
  late final _BN_cmp = _BN_cmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_free(
      a,
    );
  }

  late final _BN_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_free');
  late final _BN_free =
      _BN_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_bit_set(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_is_bit_set(
      a,
      n,
    );
  }

  late final _BN_is_bit_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_is_bit_set');
  late final _BN_is_bit_set =
      _BN_is_bit_setPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_lshift(
      r,
      a,
      n,
    );
  }

  late final _BN_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_lshift');
  late final _BN_lshift = _BN_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_lshift1(
      r,
      a,
    );
  }

  late final _BN_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_lshift1');
  late final _BN_lshift1 = _BN_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_exp(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_exp');
  late final _BN_exp = _BN_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp');
  late final _BN_mod_exp = _BN_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont');
  late final _BN_mod_exp_mont = _BN_mod_exp_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_consttime(
    ffi.Pointer<BIGNUM> rr,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> in_mont,
  ) {
    return _BN_mod_exp_mont_consttime(
      rr,
      a,
      p,
      m,
      ctx,
      in_mont,
    );
  }

  late final _BN_mod_exp_mont_consttimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_consttime');
  late final _BN_mod_exp_mont_consttime =
      _BN_mod_exp_mont_consttimePtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_word(
    ffi.Pointer<BIGNUM> r,
    int a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont_word(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_mont_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.UnsignedLong,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_word');
  late final _BN_mod_exp_mont_word = _BN_mod_exp_mont_wordPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp2_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp2_mont(
      r,
      a1,
      p1,
      a2,
      p2,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp2_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp2_mont');
  late final _BN_mod_exp2_mont = _BN_mod_exp2_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_simple(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_simple(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_simple');
  late final _BN_mod_exp_simple = _BN_mod_exp_simplePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_mont_consttime_x2(
    ffi.Pointer<BIGNUM> rr1,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> m1,
    ffi.Pointer<BN_MONT_CTX> in_mont1,
    ffi.Pointer<BIGNUM> rr2,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m2,
    ffi.Pointer<BN_MONT_CTX> in_mont2,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_mont_consttime_x2(
      rr1,
      a1,
      p1,
      m1,
      in_mont1,
      rr2,
      a2,
      p2,
      m2,
      in_mont2,
      ctx,
    );
  }

  late final _BN_mod_exp_mont_consttime_x2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_mont_consttime_x2');
  late final _BN_mod_exp_mont_consttime_x2 =
      _BN_mod_exp_mont_consttime_x2Ptr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>();

  int BN_mask_bits(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_mask_bits(
      a,
      n,
    );
  }

  late final _BN_mask_bitsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_mask_bits');
  late final _BN_mask_bits =
      _BN_mask_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print_fp(
      fp,
      a,
    );
  }

  late final _BN_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>>('BN_print_fp');
  late final _BN_print_fp = _BN_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>();

  int BN_print(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print(
      bio,
      a,
    );
  }

  late final _BN_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>>('BN_print');
  late final _BN_print = _BN_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>();

  int BN_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_reciprocal(
      r,
      m,
      len,
      ctx,
    );
  }

  late final _BN_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_reciprocal');
  late final _BN_reciprocal = _BN_reciprocalPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_rshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_rshift(
      r,
      a,
      n,
    );
  }

  late final _BN_rshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_rshift');
  late final _BN_rshift = _BN_rshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_rshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_rshift1(
      r,
      a,
    );
  }

  late final _BN_rshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rshift1');
  late final _BN_rshift1 = _BN_rshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_clear(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear(
      a,
    );
  }

  late final _BN_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear');
  late final _BN_clear =
      _BN_clearPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_dup(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_dup(
      a,
    );
  }

  late final _BN_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>('BN_dup');
  late final _BN_dup = _BN_dupPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_ucmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_ucmp(
      a,
      b,
    );
  }

  late final _BN_ucmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_ucmp');
  late final _BN_ucmp = _BN_ucmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_set_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_set_bit(
      a,
      n,
    );
  }

  late final _BN_set_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_bit');
  late final _BN_set_bit =
      _BN_set_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_clear_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_clear_bit(
      a,
      n,
    );
  }

  late final _BN_clear_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_clear_bit');
  late final _BN_clear_bit =
      _BN_clear_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<ffi.Char> BN_bn2hex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2hex(
      a,
    );
  }

  late final _BN_bn2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2hex');
  late final _BN_bn2hex = _BN_bn2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<ffi.Char> BN_bn2dec(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2dec(
      a,
    );
  }

  late final _BN_bn2decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2dec');
  late final _BN_bn2dec = _BN_bn2decPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  int BN_hex2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_hex2bn(
      a,
      str,
    );
  }

  late final _BN_hex2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_hex2bn');
  late final _BN_hex2bn = _BN_hex2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_dec2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_dec2bn(
      a,
      str,
    );
  }

  late final _BN_dec2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_dec2bn');
  late final _BN_dec2bn = _BN_dec2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_asc2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_asc2bn(
      a,
      str,
    );
  }

  late final _BN_asc2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_asc2bn');
  late final _BN_asc2bn = _BN_asc2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_gcd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_gcd(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_gcdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_gcd');
  late final _BN_gcd = _BN_gcdPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_kronecker(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_kronecker(
      a,
      b,
      ctx,
    );
  }

  late final _BN_kroneckerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_kronecker');
  late final _BN_kronecker = _BN_kroneckerPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_are_coprime(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_are_coprime(
      a,
      b,
      ctx,
    );
  }

  late final _BN_are_coprimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_are_coprime');
  late final _BN_are_coprime = _BN_are_coprimePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_inverse(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_inverse');
  late final _BN_mod_inverse = _BN_mod_inversePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_sqrt(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqrt(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqrt');
  late final _BN_mod_sqrt = _BN_mod_sqrtPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  void BN_consttime_swap(
    int swap,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    int nwords,
  ) {
    return _BN_consttime_swap(
      swap,
      a,
      b,
      nwords,
    );
  }

  late final _BN_consttime_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedLong, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_consttime_swap');
  late final _BN_consttime_swap = _BN_consttime_swapPtr.asFunction<
      void Function(int, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<BIGNUM> BN_generate_prime(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_generate_prime(
      ret,
      bits,
      safe,
      add,
      rem,
      callback,
      cb_arg,
    );
  }

  late final _BN_generate_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_generate_prime');
  late final _BN_generate_prime = _BN_generate_primePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_is_prime(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
    );
  }

  late final _BN_is_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>)>>('BN_is_prime');
  late final _BN_is_prime = _BN_is_primePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime_fasttest(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
    int do_trial_division,
  ) {
    return _BN_is_prime_fasttest(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
      do_trial_division,
    );
  }

  late final _BN_is_prime_fasttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('BN_is_prime_fasttest');
  late final _BN_is_prime_fasttest = _BN_is_prime_fasttestPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>,
          int)>();

  int BN_is_prime_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_ex(
      p,
      nchecks,
      ctx,
      cb,
    );
  }

  late final _BN_is_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_is_prime_ex');
  late final _BN_is_prime_ex = _BN_is_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_is_prime_fasttest_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    int do_trial_division,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_fasttest_ex(
      p,
      nchecks,
      ctx,
      do_trial_division,
      cb,
    );
  }

  late final _BN_is_prime_fasttest_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Int, ffi.Pointer<BN_GENCB>)>>('BN_is_prime_fasttest_ex');
  late final _BN_is_prime_fasttest_ex = _BN_is_prime_fasttest_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>, int,
          ffi.Pointer<BN_GENCB>)>();

  int BN_generate_prime_ex2(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_prime_ex2(
      ret,
      bits,
      safe,
      add,
      rem,
      cb,
      ctx,
    );
  }

  late final _BN_generate_prime_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<BN_CTX>)>>('BN_generate_prime_ex2');
  late final _BN_generate_prime_ex2 = _BN_generate_prime_ex2Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>, ffi.Pointer<BN_CTX>)>();

  int BN_generate_prime_ex(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_generate_prime_ex(
      ret,
      bits,
      safe,
      add,
      rem,
      cb,
    );
  }

  late final _BN_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('BN_generate_prime_ex');
  late final _BN_generate_prime_ex = _BN_generate_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>();

  int BN_check_prime(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_check_prime(
      p,
      ctx,
      cb,
    );
  }

  late final _BN_check_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_check_prime');
  late final _BN_check_prime = _BN_check_primePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>, ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_Xpq(
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xq,
    int nbits,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_X931_generate_Xpq(
      Xp,
      Xq,
      nbits,
      ctx,
    );
  }

  late final _BN_X931_generate_XpqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_X931_generate_Xpq');
  late final _BN_X931_generate_Xpq = _BN_X931_generate_XpqPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_X931_derive_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_derive_prime_ex(
      p,
      p1,
      p2,
      Xp,
      Xp1,
      Xp2,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_derive_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_derive_prime_ex');
  late final _BN_X931_derive_prime_ex = _BN_X931_derive_prime_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_generate_prime_ex(
      p,
      p1,
      p2,
      Xp1,
      Xp2,
      Xp,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_generate_prime_ex');
  late final _BN_X931_generate_prime_ex =
      _BN_X931_generate_prime_exPtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new() {
    return _BN_MONT_CTX_new();
  }

  late final _BN_MONT_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_MONT_CTX> Function()>>(
          'BN_MONT_CTX_new');
  late final _BN_MONT_CTX_new =
      _BN_MONT_CTX_newPtr.asFunction<ffi.Pointer<BN_MONT_CTX> Function()>();

  int BN_mod_mul_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_montgomery(
      r,
      a,
      b,
      mont,
      ctx,
    );
  }

  late final _BN_mod_mul_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_montgomery');
  late final _BN_mod_mul_montgomery = _BN_mod_mul_montgomeryPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_to_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_to_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_to_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_to_montgomery');
  late final _BN_to_montgomery = _BN_to_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  int BN_from_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_from_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_from_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_from_montgomery');
  late final _BN_from_montgomery = _BN_from_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  void BN_MONT_CTX_free(
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_MONT_CTX_free(
      mont,
    );
  }

  late final _BN_MONT_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_MONT_CTX>)>>(
          'BN_MONT_CTX_free');
  late final _BN_MONT_CTX_free = _BN_MONT_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_MONT_CTX>)>();

  int BN_MONT_CTX_set(
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set(
      mont,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set');
  late final _BN_MONT_CTX_set = _BN_MONT_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_copy(
    ffi.Pointer<BN_MONT_CTX> to,
    ffi.Pointer<BN_MONT_CTX> from,
  ) {
    return _BN_MONT_CTX_copy(
      to,
      from,
    );
  }

  late final _BN_MONT_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_MONT_CTX_copy');
  late final _BN_MONT_CTX_copy = _BN_MONT_CTX_copyPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_MONT_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_set_locked(
    ffi.Pointer<ffi.Pointer<BN_MONT_CTX>> pmont,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set_locked(
      pmont,
      lock,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_set_lockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
              ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
              ffi.Pointer<CRYPTO_RWLOCK>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set_locked');
  late final _BN_MONT_CTX_set_locked = _BN_MONT_CTX_set_lockedPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
          ffi.Pointer<CRYPTO_RWLOCK>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_new(
    ffi.Pointer<BIGNUM> A,
    ffi.Pointer<BIGNUM> Ai,
    ffi.Pointer<BIGNUM> mod,
  ) {
    return _BN_BLINDING_new(
      A,
      Ai,
      mod,
    );
  }

  late final _BN_BLINDING_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_BLINDING_new');
  late final _BN_BLINDING_new = _BN_BLINDING_newPtr.asFunction<
      ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_BLINDING_free(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_free(
      b,
    );
  }

  late final _BN_BLINDING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_free');
  late final _BN_BLINDING_free = _BN_BLINDING_freePtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_update(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_update(
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_update');
  late final _BN_BLINDING_update = _BN_BLINDING_updatePtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_convert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert');
  late final _BN_BLINDING_convert = _BN_BLINDING_convertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_invert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert');
  late final _BN_BLINDING_invert = _BN_BLINDING_invertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_convert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_convert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert_ex');
  late final _BN_BLINDING_convert_ex = _BN_BLINDING_convert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_invert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_invert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert_ex');
  late final _BN_BLINDING_invert_ex = _BN_BLINDING_invert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_is_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_is_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_is_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_is_current_thread');
  late final _BN_BLINDING_is_current_thread = _BN_BLINDING_is_current_threadPtr
      .asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_set_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_set_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_set_current_thread');
  late final _BN_BLINDING_set_current_thread =
      _BN_BLINDING_set_current_threadPtr.asFunction<
          void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_lock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_lock(
      b,
    );
  }

  late final _BN_BLINDING_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_lock');
  late final _BN_BLINDING_lock =
      _BN_BLINDING_lockPtr.asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_unlock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_unlock(
      b,
    );
  }

  late final _BN_BLINDING_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_unlock');
  late final _BN_BLINDING_unlock = _BN_BLINDING_unlockPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_get_flags(
    ffi.Pointer<BN_BLINDING> arg0,
  ) {
    return _BN_BLINDING_get_flags(
      arg0,
    );
  }

  late final _BN_BLINDING_get_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BN_BLINDING>)>>(
      'BN_BLINDING_get_flags');
  late final _BN_BLINDING_get_flags = _BN_BLINDING_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_flags(
    ffi.Pointer<BN_BLINDING> arg0,
    int arg1,
  ) {
    return _BN_BLINDING_set_flags(
      arg0,
      arg1,
    );
  }

  late final _BN_BLINDING_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BN_BLINDING>,
              ffi.UnsignedLong)>>('BN_BLINDING_set_flags');
  late final _BN_BLINDING_set_flags = _BN_BLINDING_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>, int)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_create_param(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIGNUM> r,
                    ffi.Pointer<BIGNUM> a,
                    ffi.Pointer<BIGNUM> p,
                    ffi.Pointer<BIGNUM> m,
                    ffi.Pointer<BN_CTX> ctx,
                    ffi.Pointer<BN_MONT_CTX> m_ctx)>>
        bn_mod_exp,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_BLINDING_create_param(
      b,
      e,
      m,
      ctx,
      bn_mod_exp,
      m_ctx,
    );
  }

  late final _BN_BLINDING_create_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM> r,
                          ffi.Pointer<BIGNUM> a,
                          ffi.Pointer<BIGNUM> p,
                          ffi.Pointer<BIGNUM> m,
                          ffi.Pointer<BN_CTX> ctx,
                          ffi.Pointer<BN_MONT_CTX> m_ctx)>>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_BLINDING_create_param');
  late final _BN_BLINDING_create_param =
      _BN_BLINDING_create_paramPtr.asFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM> r,
                          ffi.Pointer<BIGNUM> a,
                          ffi.Pointer<BIGNUM> p,
                          ffi.Pointer<BIGNUM> m,
                          ffi.Pointer<BN_CTX> ctx,
                          ffi.Pointer<BN_MONT_CTX> m_ctx)>>,
              ffi.Pointer<BN_MONT_CTX>)>();

  void BN_set_params(
    int mul,
    int high,
    int low,
    int mont,
  ) {
    return _BN_set_params(
      mul,
      high,
      low,
      mont,
    );
  }

  late final _BN_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BN_set_params');
  late final _BN_set_params =
      _BN_set_paramsPtr.asFunction<void Function(int, int, int, int)>();

  int BN_get_params(
    int which,
  ) {
    return _BN_get_params(
      which,
    );
  }

  late final _BN_get_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BN_get_params');
  late final _BN_get_params = _BN_get_paramsPtr.asFunction<int Function(int)>();

  ffi.Pointer<BN_RECP_CTX> BN_RECP_CTX_new() {
    return _BN_RECP_CTX_new();
  }

  late final _BN_RECP_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_RECP_CTX> Function()>>(
          'BN_RECP_CTX_new');
  late final _BN_RECP_CTX_new =
      _BN_RECP_CTX_newPtr.asFunction<ffi.Pointer<BN_RECP_CTX> Function()>();

  void BN_RECP_CTX_free(
    ffi.Pointer<BN_RECP_CTX> recp,
  ) {
    return _BN_RECP_CTX_free(
      recp,
    );
  }

  late final _BN_RECP_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_RECP_CTX>)>>(
          'BN_RECP_CTX_free');
  late final _BN_RECP_CTX_free = _BN_RECP_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_RECP_CTX>)>();

  int BN_RECP_CTX_set(
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BIGNUM> rdiv,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_RECP_CTX_set(
      recp,
      rdiv,
      ctx,
    );
  }

  late final _BN_RECP_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_RECP_CTX_set');
  late final _BN_RECP_CTX_set = _BN_RECP_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_mul_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_reciprocal(
      r,
      x,
      y,
      recp,
      ctx,
    );
  }

  late final _BN_mod_mul_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_reciprocal');
  late final _BN_mod_mul_reciprocal = _BN_mod_mul_reciprocalPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_recp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_recp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_recp');
  late final _BN_mod_exp_recp = _BN_mod_exp_recpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_div_recp(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div_recp(
      dv,
      rem,
      m,
      recp,
      ctx,
    );
  }

  late final _BN_div_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_div_recp');
  late final _BN_div_recp = _BN_div_recpPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_GF2m_add(
      r,
      a,
      b,
    );
  }

  late final _BN_GF2m_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_add');
  late final _BN_GF2m_add = _BN_GF2m_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_GF2m_mod(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_mod');
  late final _BN_GF2m_mod = _BN_GF2m_modPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul');
  late final _BN_GF2m_mod_mul = _BN_GF2m_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr');
  late final _BN_GF2m_mod_sqr = _BN_GF2m_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_invPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv');
  late final _BN_GF2m_mod_inv = _BN_GF2m_mod_invPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div');
  late final _BN_GF2m_mod_div = _BN_GF2m_mod_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp');
  late final _BN_GF2m_mod_exp = _BN_GF2m_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt');
  late final _BN_GF2m_mod_sqrt = _BN_GF2m_mod_sqrtPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad');
  late final _BN_GF2m_mod_solve_quad = _BN_GF2m_mod_solve_quadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
  ) {
    return _BN_GF2m_mod_arr(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_mod_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>)>>('BN_GF2m_mod_arr');
  late final _BN_GF2m_mod_arr = _BN_GF2m_mod_arrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)>();

  int BN_GF2m_mod_mul_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mul_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul_arr');
  late final _BN_GF2m_mod_mul_arr = _BN_GF2m_mod_mul_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqr_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr_arr');
  late final _BN_GF2m_mod_sqr_arr = _BN_GF2m_mod_sqr_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv_arr(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_inv_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv_arr');
  late final _BN_GF2m_mod_inv_arr = _BN_GF2m_mod_inv_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_div_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div_arr');
  late final _BN_GF2m_mod_div_arr = _BN_GF2m_mod_div_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_exp_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp_arr');
  late final _BN_GF2m_mod_exp_arr = _BN_GF2m_mod_exp_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrt_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt_arr');
  late final _BN_GF2m_mod_sqrt_arr = _BN_GF2m_mod_sqrt_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quad_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad_arr');
  late final _BN_GF2m_mod_solve_quad_arr =
      _BN_GF2m_mod_solve_quad_arrPtr.asFunction<
          int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_poly2arr(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    int max,
  ) {
    return _BN_GF2m_poly2arr(
      a,
      p,
      max,
    );
  }

  late final _BN_GF2m_poly2arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('BN_GF2m_poly2arr');
  late final _BN_GF2m_poly2arr = _BN_GF2m_poly2arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, int)>();

  int BN_GF2m_arr2poly(
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_GF2m_arr2poly(
      p,
      a,
    );
  }

  late final _BN_GF2m_arr2polyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>>('BN_GF2m_arr2poly');
  late final _BN_GF2m_arr2poly = _BN_GF2m_arr2polyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>();

  int BN_nist_mod_192(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_192(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_192');
  late final _BN_nist_mod_192 = _BN_nist_mod_192Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_224(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_224(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_224');
  late final _BN_nist_mod_224 = _BN_nist_mod_224Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_256(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_256(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_256');
  late final _BN_nist_mod_256 = _BN_nist_mod_256Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_384(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_384(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_384');
  late final _BN_nist_mod_384 = _BN_nist_mod_384Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_521(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_521(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_521Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_521');
  late final _BN_nist_mod_521 = _BN_nist_mod_521Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_192() {
    return _BN_get0_nist_prime_192();
  }

  late final _BN_get0_nist_prime_192Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_192');
  late final _BN_get0_nist_prime_192 =
      _BN_get0_nist_prime_192Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_224() {
    return _BN_get0_nist_prime_224();
  }

  late final _BN_get0_nist_prime_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_224');
  late final _BN_get0_nist_prime_224 =
      _BN_get0_nist_prime_224Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_256() {
    return _BN_get0_nist_prime_256();
  }

  late final _BN_get0_nist_prime_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_256');
  late final _BN_get0_nist_prime_256 =
      _BN_get0_nist_prime_256Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_384() {
    return _BN_get0_nist_prime_384();
  }

  late final _BN_get0_nist_prime_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_384');
  late final _BN_get0_nist_prime_384 =
      _BN_get0_nist_prime_384Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_521() {
    return _BN_get0_nist_prime_521();
  }

  late final _BN_get0_nist_prime_521Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_521');
  late final _BN_get0_nist_prime_521 =
      _BN_get0_nist_prime_521Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>> BN_nist_mod_func(
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_nist_mod_func(
      p,
    );
  }

  late final _BN_nist_mod_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
              Function(ffi.Pointer<BIGNUM>)>>('BN_nist_mod_func');
  late final _BN_nist_mod_func = _BN_nist_mod_funcPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
          Function(ffi.Pointer<BIGNUM>)>();

  int BN_generate_dsa_nonce(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<BIGNUM> range,
    ffi.Pointer<BIGNUM> priv,
    ffi.Pointer<ffi.UnsignedChar> message,
    int message_len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_dsa_nonce(
      out,
      range,
      priv,
      message,
      message_len,
      ctx,
    );
  }

  late final _BN_generate_dsa_noncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<BN_CTX>)>>('BN_generate_dsa_nonce');
  late final _BN_generate_dsa_nonce = _BN_generate_dsa_noncePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_768(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_768(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_768Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc2409_prime_768');
  late final _BN_get_rfc2409_prime_768 = _BN_get_rfc2409_prime_768Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_1024(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_1024(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_1024Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc2409_prime_1024');
  late final _BN_get_rfc2409_prime_1024 = _BN_get_rfc2409_prime_1024Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_1536(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_1536(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_1536Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_1536');
  late final _BN_get_rfc3526_prime_1536 = _BN_get_rfc3526_prime_1536Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_2048(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_2048(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_2048Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_2048');
  late final _BN_get_rfc3526_prime_2048 = _BN_get_rfc3526_prime_2048Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_3072(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_3072(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_3072Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_3072');
  late final _BN_get_rfc3526_prime_3072 = _BN_get_rfc3526_prime_3072Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_4096(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_4096(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_4096Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_4096');
  late final _BN_get_rfc3526_prime_4096 = _BN_get_rfc3526_prime_4096Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_6144(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_6144(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_6144Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_6144');
  late final _BN_get_rfc3526_prime_6144 = _BN_get_rfc3526_prime_6144Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_8192(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_8192(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_8192Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_rfc3526_prime_8192');
  late final _BN_get_rfc3526_prime_8192 = _BN_get_rfc3526_prime_8192Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_bntest_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_bntest_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_bntest_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_bntest_rand');
  late final _BN_bntest_rand = _BN_bntest_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  ffi.Pointer<OSSL_PARAM> OSSL_PARAM_locate(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _OSSL_PARAM_locate(
      p,
      key,
    );
  }

  late final _OSSL_PARAM_locatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>)>>('OSSL_PARAM_locate');
  late final _OSSL_PARAM_locate = _OSSL_PARAM_locatePtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(
          ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<OSSL_PARAM> OSSL_PARAM_locate_const(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _OSSL_PARAM_locate_const(
      p,
      key,
    );
  }

  late final _OSSL_PARAM_locate_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>)>>('OSSL_PARAM_locate_const');
  late final _OSSL_PARAM_locate_const = _OSSL_PARAM_locate_constPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(
          ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Char>)>();

  OSSL_PARAM OSSL_PARAM_construct_int(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> buf,
  ) {
    return _OSSL_PARAM_construct_int(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_intPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('OSSL_PARAM_construct_int');
  late final _OSSL_PARAM_construct_int =
      _OSSL_PARAM_construct_intPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  OSSL_PARAM OSSL_PARAM_construct_uint(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.UnsignedInt> buf,
  ) {
    return _OSSL_PARAM_construct_uint(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_uintPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedInt>)>>('OSSL_PARAM_construct_uint');
  late final _OSSL_PARAM_construct_uint =
      _OSSL_PARAM_construct_uintPtr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>)>();

  OSSL_PARAM OSSL_PARAM_construct_long(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Long> buf,
  ) {
    return _OSSL_PARAM_construct_long(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_longPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('OSSL_PARAM_construct_long');
  late final _OSSL_PARAM_construct_long =
      _OSSL_PARAM_construct_longPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  OSSL_PARAM OSSL_PARAM_construct_ulong(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.UnsignedLong> buf,
  ) {
    return _OSSL_PARAM_construct_ulong(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_ulongPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>)>>('OSSL_PARAM_construct_ulong');
  late final _OSSL_PARAM_construct_ulong =
      _OSSL_PARAM_construct_ulongPtr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedLong>)>();

  OSSL_PARAM OSSL_PARAM_construct_int32(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int32> buf,
  ) {
    return _OSSL_PARAM_construct_int32(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_int32Ptr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>)>>('OSSL_PARAM_construct_int32');
  late final _OSSL_PARAM_construct_int32 =
      _OSSL_PARAM_construct_int32Ptr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>)>();

  OSSL_PARAM OSSL_PARAM_construct_uint32(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Uint32> buf,
  ) {
    return _OSSL_PARAM_construct_uint32(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_uint32Ptr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint32>)>>('OSSL_PARAM_construct_uint32');
  late final _OSSL_PARAM_construct_uint32 =
      _OSSL_PARAM_construct_uint32Ptr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint32>)>();

  OSSL_PARAM OSSL_PARAM_construct_int64(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int64> buf,
  ) {
    return _OSSL_PARAM_construct_int64(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_int64Ptr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int64>)>>('OSSL_PARAM_construct_int64');
  late final _OSSL_PARAM_construct_int64 =
      _OSSL_PARAM_construct_int64Ptr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int64>)>();

  OSSL_PARAM OSSL_PARAM_construct_uint64(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Uint64> buf,
  ) {
    return _OSSL_PARAM_construct_uint64(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_uint64Ptr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('OSSL_PARAM_construct_uint64');
  late final _OSSL_PARAM_construct_uint64 =
      _OSSL_PARAM_construct_uint64Ptr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  OSSL_PARAM OSSL_PARAM_construct_size_t(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Size> buf,
  ) {
    return _OSSL_PARAM_construct_size_t(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_size_tPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('OSSL_PARAM_construct_size_t');
  late final _OSSL_PARAM_construct_size_t =
      _OSSL_PARAM_construct_size_tPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  OSSL_PARAM OSSL_PARAM_construct_time_t(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<time_t> buf,
  ) {
    return _OSSL_PARAM_construct_time_t(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_time_tPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<time_t>)>>('OSSL_PARAM_construct_time_t');
  late final _OSSL_PARAM_construct_time_t =
      _OSSL_PARAM_construct_time_tPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<time_t>)>();

  OSSL_PARAM OSSL_PARAM_construct_BN(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bsize,
  ) {
    return _OSSL_PARAM_construct_BN(
      key,
      buf,
      bsize,
    );
  }

  late final _OSSL_PARAM_construct_BNPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('OSSL_PARAM_construct_BN');
  late final _OSSL_PARAM_construct_BN = _OSSL_PARAM_construct_BNPtr.asFunction<
      OSSL_PARAM Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  OSSL_PARAM OSSL_PARAM_construct_double(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Double> buf,
  ) {
    return _OSSL_PARAM_construct_double(
      key,
      buf,
    );
  }

  late final _OSSL_PARAM_construct_doublePtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('OSSL_PARAM_construct_double');
  late final _OSSL_PARAM_construct_double =
      _OSSL_PARAM_construct_doublePtr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>)>();

  OSSL_PARAM OSSL_PARAM_construct_utf8_string(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> buf,
    int bsize,
  ) {
    return _OSSL_PARAM_construct_utf8_string(
      key,
      buf,
      bsize,
    );
  }

  late final _OSSL_PARAM_construct_utf8_stringPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OSSL_PARAM_construct_utf8_string');
  late final _OSSL_PARAM_construct_utf8_string =
      _OSSL_PARAM_construct_utf8_stringPtr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  OSSL_PARAM OSSL_PARAM_construct_utf8_ptr(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int bsize,
  ) {
    return _OSSL_PARAM_construct_utf8_ptr(
      key,
      buf,
      bsize,
    );
  }

  late final _OSSL_PARAM_construct_utf8_ptrPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('OSSL_PARAM_construct_utf8_ptr');
  late final _OSSL_PARAM_construct_utf8_ptr =
      _OSSL_PARAM_construct_utf8_ptrPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  OSSL_PARAM OSSL_PARAM_construct_octet_string(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Void> buf,
    int bsize,
  ) {
    return _OSSL_PARAM_construct_octet_string(
      key,
      buf,
      bsize,
    );
  }

  late final _OSSL_PARAM_construct_octet_stringPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('OSSL_PARAM_construct_octet_string');
  late final _OSSL_PARAM_construct_octet_string =
      _OSSL_PARAM_construct_octet_stringPtr.asFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  OSSL_PARAM OSSL_PARAM_construct_octet_ptr(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buf,
    int bsize,
  ) {
    return _OSSL_PARAM_construct_octet_ptr(
      key,
      buf,
      bsize,
    );
  }

  late final _OSSL_PARAM_construct_octet_ptrPtr = _lookup<
      ffi.NativeFunction<
          OSSL_PARAM Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Size)>>('OSSL_PARAM_construct_octet_ptr');
  late final _OSSL_PARAM_construct_octet_ptr =
      _OSSL_PARAM_construct_octet_ptrPtr.asFunction<
          OSSL_PARAM Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  OSSL_PARAM OSSL_PARAM_construct_end() {
    return _OSSL_PARAM_construct_end();
  }

  late final _OSSL_PARAM_construct_endPtr =
      _lookup<ffi.NativeFunction<OSSL_PARAM Function()>>(
          'OSSL_PARAM_construct_end');
  late final _OSSL_PARAM_construct_end =
      _OSSL_PARAM_construct_endPtr.asFunction<OSSL_PARAM Function()>();

  int OSSL_PARAM_allocate_from_text(
    ffi.Pointer<OSSL_PARAM> to,
    ffi.Pointer<OSSL_PARAM> paramdefs,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
    int value_n,
    ffi.Pointer<ffi.Int> found,
  ) {
    return _OSSL_PARAM_allocate_from_text(
      to,
      paramdefs,
      key,
      value,
      value_n,
      found,
    );
  }

  late final _OSSL_PARAM_allocate_from_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Int>)>>('OSSL_PARAM_allocate_from_text');
  late final _OSSL_PARAM_allocate_from_text =
      _OSSL_PARAM_allocate_from_textPtr.asFunction<
          int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Int>)>();

  int OSSL_PARAM_get_int(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _OSSL_PARAM_get_int(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Int>)>>('OSSL_PARAM_get_int');
  late final _OSSL_PARAM_get_int = _OSSL_PARAM_get_intPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Int>)>();

  int OSSL_PARAM_get_uint(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _OSSL_PARAM_get_uint(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.UnsignedInt>)>>('OSSL_PARAM_get_uint');
  late final _OSSL_PARAM_get_uint = _OSSL_PARAM_get_uintPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.UnsignedInt>)>();

  int OSSL_PARAM_get_long(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Long> val,
  ) {
    return _OSSL_PARAM_get_long(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Long>)>>('OSSL_PARAM_get_long');
  late final _OSSL_PARAM_get_long = _OSSL_PARAM_get_longPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Long>)>();

  int OSSL_PARAM_get_ulong(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.UnsignedLong> val,
  ) {
    return _OSSL_PARAM_get_ulong(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.UnsignedLong>)>>('OSSL_PARAM_get_ulong');
  late final _OSSL_PARAM_get_ulong = _OSSL_PARAM_get_ulongPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.UnsignedLong>)>();

  int OSSL_PARAM_get_int32(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _OSSL_PARAM_get_int32(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Int32>)>>('OSSL_PARAM_get_int32');
  late final _OSSL_PARAM_get_int32 = _OSSL_PARAM_get_int32Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Int32>)>();

  int OSSL_PARAM_get_uint32(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Uint32> val,
  ) {
    return _OSSL_PARAM_get_uint32(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Uint32>)>>('OSSL_PARAM_get_uint32');
  late final _OSSL_PARAM_get_uint32 = _OSSL_PARAM_get_uint32Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Uint32>)>();

  int OSSL_PARAM_get_int64(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Int64> val,
  ) {
    return _OSSL_PARAM_get_int64(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Int64>)>>('OSSL_PARAM_get_int64');
  late final _OSSL_PARAM_get_int64 = _OSSL_PARAM_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Int64>)>();

  int OSSL_PARAM_get_uint64(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Uint64> val,
  ) {
    return _OSSL_PARAM_get_uint64(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Uint64>)>>('OSSL_PARAM_get_uint64');
  late final _OSSL_PARAM_get_uint64 = _OSSL_PARAM_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Uint64>)>();

  int OSSL_PARAM_get_size_t(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Size> val,
  ) {
    return _OSSL_PARAM_get_size_t(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_size_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Size>)>>('OSSL_PARAM_get_size_t');
  late final _OSSL_PARAM_get_size_t = _OSSL_PARAM_get_size_tPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Size>)>();

  int OSSL_PARAM_get_time_t(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<time_t> val,
  ) {
    return _OSSL_PARAM_get_time_t(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_time_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<time_t>)>>('OSSL_PARAM_get_time_t');
  late final _OSSL_PARAM_get_time_t = _OSSL_PARAM_get_time_tPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<time_t>)>();

  int OSSL_PARAM_set_int(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_int(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_intPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM>, ffi.Int)>>(
      'OSSL_PARAM_set_int');
  late final _OSSL_PARAM_set_int = _OSSL_PARAM_set_intPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_uint(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_uint(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.UnsignedInt)>>('OSSL_PARAM_set_uint');
  late final _OSSL_PARAM_set_uint = _OSSL_PARAM_set_uintPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_long(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_long(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_longPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM>, ffi.Long)>>(
      'OSSL_PARAM_set_long');
  late final _OSSL_PARAM_set_long = _OSSL_PARAM_set_longPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_ulong(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_ulong(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.UnsignedLong)>>('OSSL_PARAM_set_ulong');
  late final _OSSL_PARAM_set_ulong = _OSSL_PARAM_set_ulongPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_int32(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_int32(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Int32)>>('OSSL_PARAM_set_int32');
  late final _OSSL_PARAM_set_int32 = _OSSL_PARAM_set_int32Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_uint32(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_uint32(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Uint32)>>('OSSL_PARAM_set_uint32');
  late final _OSSL_PARAM_set_uint32 = _OSSL_PARAM_set_uint32Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_int64(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_int64(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Int64)>>('OSSL_PARAM_set_int64');
  late final _OSSL_PARAM_set_int64 = _OSSL_PARAM_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_uint64(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_uint64(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Uint64)>>('OSSL_PARAM_set_uint64');
  late final _OSSL_PARAM_set_uint64 = _OSSL_PARAM_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_size_t(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_size_t(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_size_tPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM>, ffi.Size)>>(
      'OSSL_PARAM_set_size_t');
  late final _OSSL_PARAM_set_size_t = _OSSL_PARAM_set_size_tPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_set_time_t(
    ffi.Pointer<OSSL_PARAM> p,
    int val,
  ) {
    return _OSSL_PARAM_set_time_t(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_time_tPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM>, time_t)>>(
      'OSSL_PARAM_set_time_t');
  late final _OSSL_PARAM_set_time_t = _OSSL_PARAM_set_time_tPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, int)>();

  int OSSL_PARAM_get_double(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _OSSL_PARAM_get_double(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Double>)>>('OSSL_PARAM_get_double');
  late final _OSSL_PARAM_get_double = _OSSL_PARAM_get_doublePtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Double>)>();

  int OSSL_PARAM_set_double(
    ffi.Pointer<OSSL_PARAM> p,
    double val,
  ) {
    return _OSSL_PARAM_set_double(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Double)>>('OSSL_PARAM_set_double');
  late final _OSSL_PARAM_set_double = _OSSL_PARAM_set_doublePtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, double)>();

  int OSSL_PARAM_get_BN(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> val,
  ) {
    return _OSSL_PARAM_get_BN(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('OSSL_PARAM_get_BN');
  late final _OSSL_PARAM_get_BN = _OSSL_PARAM_get_BNPtr.asFunction<
      int Function(
          ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int OSSL_PARAM_set_BN(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<BIGNUM> val,
  ) {
    return _OSSL_PARAM_set_BN(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<BIGNUM>)>>('OSSL_PARAM_set_BN');
  late final _OSSL_PARAM_set_BN = _OSSL_PARAM_set_BNPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<BIGNUM>)>();

  int OSSL_PARAM_get_utf8_string(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Char>> val,
    int max_len,
  ) {
    return _OSSL_PARAM_get_utf8_string(
      p,
      val,
      max_len,
    );
  }

  late final _OSSL_PARAM_get_utf8_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('OSSL_PARAM_get_utf8_string');
  late final _OSSL_PARAM_get_utf8_string =
      _OSSL_PARAM_get_utf8_stringPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int OSSL_PARAM_set_utf8_string(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _OSSL_PARAM_set_utf8_string(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_utf8_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>)>>('OSSL_PARAM_set_utf8_string');
  late final _OSSL_PARAM_set_utf8_string =
      _OSSL_PARAM_set_utf8_stringPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Char>)>();

  int OSSL_PARAM_get_octet_string(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> val,
    int max_len,
    ffi.Pointer<ffi.Size> used_len,
  ) {
    return _OSSL_PARAM_get_octet_string(
      p,
      val,
      max_len,
      used_len,
    );
  }

  late final _OSSL_PARAM_get_octet_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('OSSL_PARAM_get_octet_string');
  late final _OSSL_PARAM_get_octet_string =
      _OSSL_PARAM_get_octet_stringPtr.asFunction<
          int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int,
              ffi.Pointer<ffi.Size>)>();

  int OSSL_PARAM_set_octet_string(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Void> val,
    int len,
  ) {
    return _OSSL_PARAM_set_octet_string(
      p,
      val,
      len,
    );
  }

  late final _OSSL_PARAM_set_octet_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('OSSL_PARAM_set_octet_string');
  late final _OSSL_PARAM_set_octet_string =
      _OSSL_PARAM_set_octet_stringPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Void>, int)>();

  int OSSL_PARAM_get_utf8_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Char>> val,
  ) {
    return _OSSL_PARAM_get_utf8_ptr(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_utf8_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('OSSL_PARAM_get_utf8_ptr');
  late final _OSSL_PARAM_get_utf8_ptr = _OSSL_PARAM_get_utf8_ptrPtr.asFunction<
      int Function(
          ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int OSSL_PARAM_set_utf8_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _OSSL_PARAM_set_utf8_ptr(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_set_utf8_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Char>)>>('OSSL_PARAM_set_utf8_ptr');
  late final _OSSL_PARAM_set_utf8_ptr = _OSSL_PARAM_set_utf8_ptrPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Char>)>();

  int OSSL_PARAM_get_octet_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> val,
    ffi.Pointer<ffi.Size> used_len,
  ) {
    return _OSSL_PARAM_get_octet_ptr(
      p,
      val,
      used_len,
    );
  }

  late final _OSSL_PARAM_get_octet_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('OSSL_PARAM_get_octet_ptr');
  late final _OSSL_PARAM_get_octet_ptr =
      _OSSL_PARAM_get_octet_ptrPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int OSSL_PARAM_set_octet_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Void> val,
    int used_len,
  ) {
    return _OSSL_PARAM_set_octet_ptr(
      p,
      val,
      used_len,
    );
  }

  late final _OSSL_PARAM_set_octet_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('OSSL_PARAM_set_octet_ptr');
  late final _OSSL_PARAM_set_octet_ptr =
      _OSSL_PARAM_set_octet_ptrPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Void>, int)>();

  int OSSL_PARAM_get_utf8_string_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Char>> val,
  ) {
    return _OSSL_PARAM_get_utf8_string_ptr(
      p,
      val,
    );
  }

  late final _OSSL_PARAM_get_utf8_string_ptrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<OSSL_PARAM>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'OSSL_PARAM_get_utf8_string_ptr');
  late final _OSSL_PARAM_get_utf8_string_ptr =
      _OSSL_PARAM_get_utf8_string_ptrPtr.asFunction<
          int Function(
              ffi.Pointer<OSSL_PARAM>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int OSSL_PARAM_get_octet_string_ptr(
    ffi.Pointer<OSSL_PARAM> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> val,
    ffi.Pointer<ffi.Size> used_len,
  ) {
    return _OSSL_PARAM_get_octet_string_ptr(
      p,
      val,
      used_len,
    );
  }

  late final _OSSL_PARAM_get_octet_string_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('OSSL_PARAM_get_octet_string_ptr');
  late final _OSSL_PARAM_get_octet_string_ptr =
      _OSSL_PARAM_get_octet_string_ptrPtr.asFunction<
          int Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int OSSL_PARAM_modified(
    ffi.Pointer<OSSL_PARAM> p,
  ) {
    return _OSSL_PARAM_modified(
      p,
    );
  }

  late final _OSSL_PARAM_modifiedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM>)>>(
          'OSSL_PARAM_modified');
  late final _OSSL_PARAM_modified = _OSSL_PARAM_modifiedPtr.asFunction<
      int Function(ffi.Pointer<OSSL_PARAM>)>();

  void OSSL_PARAM_set_all_unmodified(
    ffi.Pointer<OSSL_PARAM> p,
  ) {
    return _OSSL_PARAM_set_all_unmodified(
      p,
    );
  }

  late final _OSSL_PARAM_set_all_unmodifiedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_PARAM>)>>(
          'OSSL_PARAM_set_all_unmodified');
  late final _OSSL_PARAM_set_all_unmodified = _OSSL_PARAM_set_all_unmodifiedPtr
      .asFunction<void Function(ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> OSSL_PARAM_dup(
    ffi.Pointer<OSSL_PARAM> p,
  ) {
    return _OSSL_PARAM_dup(
      p,
    );
  }

  late final _OSSL_PARAM_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<OSSL_PARAM>)>>('OSSL_PARAM_dup');
  late final _OSSL_PARAM_dup = _OSSL_PARAM_dupPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> OSSL_PARAM_merge(
    ffi.Pointer<OSSL_PARAM> p1,
    ffi.Pointer<OSSL_PARAM> p2,
  ) {
    return _OSSL_PARAM_merge(
      p1,
      p2,
    );
  }

  late final _OSSL_PARAM_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<OSSL_PARAM>)>>('OSSL_PARAM_merge');
  late final _OSSL_PARAM_merge = _OSSL_PARAM_mergePtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(
          ffi.Pointer<OSSL_PARAM>, ffi.Pointer<OSSL_PARAM>)>();

  void OSSL_PARAM_free(
    ffi.Pointer<OSSL_PARAM> p,
  ) {
    return _OSSL_PARAM_free(
      p,
    );
  }

  late final _OSSL_PARAM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_PARAM>)>>(
          'OSSL_PARAM_free');
  late final _OSSL_PARAM_free =
      _OSSL_PARAM_freePtr.asFunction<void Function(ffi.Pointer<OSSL_PARAM>)>();

  void OSSL_INDICATOR_set_callback(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<OSSL_INDICATOR_CALLBACK> cb,
  ) {
    return _OSSL_INDICATOR_set_callback(
      libctx,
      cb,
    );
  }

  late final _OSSL_INDICATOR_set_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OSSL_LIB_CTX>,
                  ffi.Pointer<OSSL_INDICATOR_CALLBACK>)>>(
      'OSSL_INDICATOR_set_callback');
  late final _OSSL_INDICATOR_set_callback =
      _OSSL_INDICATOR_set_callbackPtr.asFunction<
          void Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<OSSL_INDICATOR_CALLBACK>)>();

  void OSSL_INDICATOR_get_callback(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Pointer<OSSL_INDICATOR_CALLBACK>> cb,
  ) {
    return _OSSL_INDICATOR_get_callback(
      libctx,
      cb,
    );
  }

  late final _OSSL_INDICATOR_get_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OSSL_LIB_CTX>,
                  ffi.Pointer<ffi.Pointer<OSSL_INDICATOR_CALLBACK>>)>>(
      'OSSL_INDICATOR_get_callback');
  late final _OSSL_INDICATOR_get_callback =
      _OSSL_INDICATOR_get_callbackPtr.asFunction<
          void Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Pointer<OSSL_INDICATOR_CALLBACK>>)>();

  int BIO_get_new_index() {
    return _BIO_get_new_index();
  }

  late final _BIO_get_new_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_get_new_index');
  late final _BIO_get_new_index =
      _BIO_get_new_indexPtr.asFunction<int Function()>();

  void BIO_set_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_set_flags(
      b,
      flags,
    );
  }

  late final _BIO_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_flags');
  late final _BIO_set_flags =
      _BIO_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_test_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_test_flags(
      b,
      flags,
    );
  }

  late final _BIO_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_test_flags');
  late final _BIO_test_flags =
      _BIO_test_flagsPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  void BIO_clear_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_clear_flags(
      b,
      flags,
    );
  }

  late final _BIO_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_clear_flags');
  late final _BIO_clear_flags =
      _BIO_clear_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  BIO_callback_fn BIO_get_callback(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback(
      b,
    );
  }

  late final _BIO_get_callbackPtr =
      _lookup<ffi.NativeFunction<BIO_callback_fn Function(ffi.Pointer<BIO>)>>(
          'BIO_get_callback');
  late final _BIO_get_callback = _BIO_get_callbackPtr.asFunction<
      BIO_callback_fn Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback(
    ffi.Pointer<BIO> b,
    BIO_callback_fn callback,
  ) {
    return _BIO_set_callback(
      b,
      callback,
    );
  }

  late final _BIO_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn)>>('BIO_set_callback');
  late final _BIO_set_callback = _BIO_set_callbackPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn)>();

  int BIO_debug_callback(
    ffi.Pointer<BIO> bio,
    int cmd,
    ffi.Pointer<ffi.Char> argp,
    int argi,
    int argl,
    int ret,
  ) {
    return _BIO_debug_callback(
      bio,
      cmd,
      argp,
      argi,
      argl,
      ret,
    );
  }

  late final _BIO_debug_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Long, ffi.Long)>>('BIO_debug_callback');
  late final _BIO_debug_callback = _BIO_debug_callbackPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Char>, int, int, int)>();

  BIO_callback_fn_ex BIO_get_callback_ex(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_ex(
      b,
    );
  }

  late final _BIO_get_callback_exPtr = _lookup<
          ffi.NativeFunction<BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_ex');
  late final _BIO_get_callback_ex = _BIO_get_callback_exPtr.asFunction<
      BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_ex(
    ffi.Pointer<BIO> b,
    BIO_callback_fn_ex callback,
  ) {
    return _BIO_set_callback_ex(
      b,
      callback,
    );
  }

  late final _BIO_set_callback_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn_ex)>>('BIO_set_callback_ex');
  late final _BIO_set_callback_ex = _BIO_set_callback_exPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn_ex)>();

  int BIO_debug_callback_ex(
    ffi.Pointer<BIO> bio,
    int oper,
    ffi.Pointer<ffi.Char> argp,
    int len,
    int argi,
    int argl,
    int ret,
    ffi.Pointer<ffi.Size> processed,
  ) {
    return _BIO_debug_callback_ex(
      bio,
      oper,
      argp,
      len,
      argi,
      argl,
      ret,
      processed,
    );
  }

  late final _BIO_debug_callback_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int,
              ffi.Long,
              ffi.Int,
              ffi.Pointer<ffi.Size>)>>('BIO_debug_callback_ex');
  late final _BIO_debug_callback_ex = _BIO_debug_callback_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Char>, int, int, int,
          int, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> BIO_get_callback_arg(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_arg(
      b,
    );
  }

  late final _BIO_get_callback_argPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_arg');
  late final _BIO_get_callback_arg = _BIO_get_callback_argPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_arg(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> arg,
  ) {
    return _BIO_set_callback_arg(
      b,
      arg,
    );
  }

  late final _BIO_set_callback_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>)>>('BIO_set_callback_arg');
  late final _BIO_set_callback_arg = _BIO_set_callback_argPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> BIO_method_name(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_name(
      b,
    );
  }

  late final _BIO_method_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_method_name');
  late final _BIO_method_name = _BIO_method_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  int BIO_method_type(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_type(
      b,
    );
  }

  late final _BIO_method_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_method_type');
  late final _BIO_method_type =
      _BIO_method_typePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_pending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_pending(
      b,
    );
  }

  late final _BIO_ctrl_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_pending');
  late final _BIO_ctrl_pending =
      _BIO_ctrl_pendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_wpending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_wpending(
      b,
    );
  }

  late final _BIO_ctrl_wpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_wpending');
  late final _BIO_ctrl_wpending =
      _BIO_ctrl_wpendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_write_guarantee(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_write_guarantee(
      b,
    );
  }

  late final _BIO_ctrl_get_write_guaranteePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_write_guarantee');
  late final _BIO_ctrl_get_write_guarantee = _BIO_ctrl_get_write_guaranteePtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_read_request(
      b,
    );
  }

  late final _BIO_ctrl_get_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_read_request');
  late final _BIO_ctrl_get_read_request = _BIO_ctrl_get_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_reset_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_reset_read_request(
      b,
    );
  }

  late final _BIO_ctrl_reset_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_reset_read_request');
  late final _BIO_ctrl_reset_read_request = _BIO_ctrl_reset_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_set_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _BIO_set_ex_data(
      bio,
      idx,
      data,
    );
  }

  late final _BIO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('BIO_set_ex_data');
  late final _BIO_set_ex_data = _BIO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
  ) {
    return _BIO_get_ex_data(
      bio,
      idx,
    );
  }

  late final _BIO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_get_ex_data');
  late final _BIO_get_ex_data = _BIO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int)>();

  int BIO_number_read(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_read(
      bio,
    );
  }

  late final _BIO_number_readPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_read');
  late final _BIO_number_read =
      _BIO_number_readPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_number_written(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_written(
      bio,
    );
  }

  late final _BIO_number_writtenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_written');
  late final _BIO_number_written =
      _BIO_number_writtenPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_asn1_set_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> prefix,
    ffi.Pointer<asn1_ps_func> prefix_free,
  ) {
    return _BIO_asn1_set_prefix(
      b,
      prefix,
      prefix_free,
    );
  }

  late final _BIO_asn1_set_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_prefix');
  late final _BIO_asn1_set_prefix = _BIO_asn1_set_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix_free,
  ) {
    return _BIO_asn1_get_prefix(
      b,
      pprefix,
      pprefix_free,
    );
  }

  late final _BIO_asn1_get_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_prefix');
  late final _BIO_asn1_get_prefix = _BIO_asn1_get_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  int BIO_asn1_set_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> suffix,
    ffi.Pointer<asn1_ps_func> suffix_free,
  ) {
    return _BIO_asn1_set_suffix(
      b,
      suffix,
      suffix_free,
    );
  }

  late final _BIO_asn1_set_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_suffix');
  late final _BIO_asn1_set_suffix = _BIO_asn1_set_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix_free,
  ) {
    return _BIO_asn1_get_suffix(
      b,
      psuffix,
      psuffix_free,
    );
  }

  late final _BIO_asn1_get_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_suffix');
  late final _BIO_asn1_get_suffix = _BIO_asn1_get_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  ffi.Pointer<BIO_METHOD> BIO_s_file() {
    return _BIO_s_file();
  }

  late final _BIO_s_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_file');
  late final _BIO_s_file =
      _BIO_s_filePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _BIO_new_file(
      filename,
      mode,
    );
  }

  late final _BIO_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('BIO_new_file');
  late final _BIO_new_file = _BIO_new_filePtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_from_core_bio(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<OSSL_CORE_BIO> corebio,
  ) {
    return _BIO_new_from_core_bio(
      libctx,
      corebio,
    );
  }

  late final _BIO_new_from_core_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<OSSL_CORE_BIO>)>>('BIO_new_from_core_bio');
  late final _BIO_new_from_core_bio = _BIO_new_from_core_bioPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<OSSL_CORE_BIO>)>();

  ffi.Pointer<BIO> BIO_new_fp(
    ffi.Pointer<FILE> stream,
    int close_flag,
  ) {
    return _BIO_new_fp(
      stream,
      close_flag,
    );
  }

  late final _BIO_new_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, ffi.Int)>>('BIO_new_fp');
  late final _BIO_new_fp = _BIO_new_fpPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, int)>();

  ffi.Pointer<BIO> BIO_new_ex(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<BIO_METHOD> method,
  ) {
    return _BIO_new_ex(
      libctx,
      method,
    );
  }

  late final _BIO_new_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<BIO_METHOD>)>>('BIO_new_ex');
  late final _BIO_new_ex = _BIO_new_exPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<BIO> BIO_new(
    ffi.Pointer<BIO_METHOD> type,
  ) {
    return _BIO_new(
      type,
    );
  }

  late final _BIO_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>>('BIO_new');
  late final _BIO_new = _BIO_newPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_free(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free(
      a,
    );
  }

  late final _BIO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_free');
  late final _BIO_free =
      _BIO_freePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_data(
    ffi.Pointer<BIO> a,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _BIO_set_data(
      a,
      ptr,
    );
  }

  late final _BIO_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('BIO_set_data');
  late final _BIO_set_data = _BIO_set_dataPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_data(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_data(
      a,
    );
  }

  late final _BIO_get_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_data');
  late final _BIO_get_data = _BIO_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>();

  void BIO_set_init(
    ffi.Pointer<BIO> a,
    int init,
  ) {
    return _BIO_set_init(
      a,
      init,
    );
  }

  late final _BIO_set_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_init');
  late final _BIO_set_init =
      _BIO_set_initPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_init(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_init(
      a,
    );
  }

  late final _BIO_get_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_init');
  late final _BIO_get_init =
      _BIO_get_initPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_shutdown(
    ffi.Pointer<BIO> a,
    int shut,
  ) {
    return _BIO_set_shutdown(
      a,
      shut,
    );
  }

  late final _BIO_set_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_shutdown');
  late final _BIO_set_shutdown =
      _BIO_set_shutdownPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_shutdown(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_shutdown(
      a,
    );
  }

  late final _BIO_get_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_shutdown');
  late final _BIO_get_shutdown =
      _BIO_get_shutdownPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_vfree(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_vfree(
      a,
    );
  }

  late final _BIO_vfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_vfree');
  late final _BIO_vfree =
      _BIO_vfreePtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_up_ref(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_up_ref(
      a,
    );
  }

  late final _BIO_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_up_ref');
  late final _BIO_up_ref =
      _BIO_up_refPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_read(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_read(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_read');
  late final _BIO_read = _BIO_readPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_read_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Size> readbytes,
  ) {
    return _BIO_read_ex(
      b,
      data,
      dlen,
      readbytes,
    );
  }

  late final _BIO_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('BIO_read_ex');
  late final _BIO_read_ex = _BIO_read_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_recvmmsg(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO_MSG> msg,
    int stride,
    int num_msg,
    int flags,
    ffi.Pointer<ffi.Size> msgs_processed,
  ) {
    return _BIO_recvmmsg(
      b,
      msg,
      stride,
      num_msg,
      flags,
      msgs_processed,
    );
  }

  late final _BIO_recvmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>, ffi.Size,
              ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>('BIO_recvmmsg');
  late final _BIO_recvmmsg = _BIO_recvmmsgPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>, int, int, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_gets(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _BIO_gets(
      bp,
      buf,
      size,
    );
  }

  late final _BIO_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>('BIO_gets');
  late final _BIO_gets = _BIO_getsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_get_line(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _BIO_get_line(
      bio,
      buf,
      size,
    );
  }

  late final _BIO_get_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('BIO_get_line');
  late final _BIO_get_line = _BIO_get_linePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_write(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_write(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_write');
  late final _BIO_write = _BIO_writePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_write_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Size> written,
  ) {
    return _BIO_write_ex(
      b,
      data,
      dlen,
      written,
    );
  }

  late final _BIO_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('BIO_write_ex');
  late final _BIO_write_ex = _BIO_write_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_sendmmsg(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO_MSG> msg,
    int stride,
    int num_msg,
    int flags,
    ffi.Pointer<ffi.Size> msgs_processed,
  ) {
    return _BIO_sendmmsg(
      b,
      msg,
      stride,
      num_msg,
      flags,
      msgs_processed,
    );
  }

  late final _BIO_sendmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>, ffi.Size,
              ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>('BIO_sendmmsg');
  late final _BIO_sendmmsg = _BIO_sendmmsgPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>, int, int, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_get_rpoll_descriptor(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO_POLL_DESCRIPTOR> desc,
  ) {
    return _BIO_get_rpoll_descriptor(
      b,
      desc,
    );
  }

  late final _BIO_get_rpoll_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<BIO_POLL_DESCRIPTOR>)>>('BIO_get_rpoll_descriptor');
  late final _BIO_get_rpoll_descriptor =
      _BIO_get_rpoll_descriptorPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_POLL_DESCRIPTOR>)>();

  int BIO_get_wpoll_descriptor(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO_POLL_DESCRIPTOR> desc,
  ) {
    return _BIO_get_wpoll_descriptor(
      b,
      desc,
    );
  }

  late final _BIO_get_wpoll_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<BIO_POLL_DESCRIPTOR>)>>('BIO_get_wpoll_descriptor');
  late final _BIO_get_wpoll_descriptor =
      _BIO_get_wpoll_descriptorPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_POLL_DESCRIPTOR>)>();

  int BIO_puts(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _BIO_puts(
      bp,
      buf,
    );
  }

  late final _BIO_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_puts');
  late final _BIO_puts = _BIO_putsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_indent(
    ffi.Pointer<BIO> b,
    int indent,
    int max,
  ) {
    return _BIO_indent(
      b,
      indent,
      max,
    );
  }

  late final _BIO_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>>('BIO_indent');
  late final _BIO_indent =
      _BIO_indentPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    ffi.Pointer<ffi.Void> parg,
  ) {
    return _BIO_ctrl(
      bp,
      cmd,
      larg,
      parg,
    );
  }

  late final _BIO_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
              ffi.Pointer<ffi.Void>)>>('BIO_ctrl');
  late final _BIO_ctrl = _BIO_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_callback_ctrl(
    ffi.Pointer<BIO> b,
    int cmd,
    ffi.Pointer<BIO_info_cb> fp,
  ) {
    return _BIO_callback_ctrl(
      b,
      cmd,
      fp,
    );
  }

  late final _BIO_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<BIO_info_cb>)>>('BIO_callback_ctrl');
  late final _BIO_callback_ctrl = _BIO_callback_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<BIO_info_cb>)>();

  ffi.Pointer<ffi.Void> BIO_ptr_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
  ) {
    return _BIO_ptr_ctrl(
      bp,
      cmd,
      larg,
    );
  }

  late final _BIO_ptr_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long)>>('BIO_ptr_ctrl');
  late final _BIO_ptr_ctrl = _BIO_ptr_ctrlPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_int_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    int iarg,
  ) {
    return _BIO_int_ctrl(
      bp,
      cmd,
      larg,
      iarg,
    );
  }

  late final _BIO_int_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Int)>>('BIO_int_ctrl');
  late final _BIO_int_ctrl = _BIO_int_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, int)>();

  ffi.Pointer<BIO> BIO_push(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> append,
  ) {
    return _BIO_push(
      b,
      append,
    );
  }

  late final _BIO_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_push');
  late final _BIO_push = _BIO_pushPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_pop(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_pop(
      b,
    );
  }

  late final _BIO_popPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_pop');
  late final _BIO_pop =
      _BIO_popPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_free_all(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free_all(
      a,
    );
  }

  late final _BIO_free_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_free_all');
  late final _BIO_free_all =
      _BIO_free_allPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_find_type(
    ffi.Pointer<BIO> b,
    int bio_type,
  ) {
    return _BIO_find_type(
      b,
      bio_type,
    );
  }

  late final _BIO_find_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_find_type');
  late final _BIO_find_type = _BIO_find_typePtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_next(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_next(
      b,
    );
  }

  late final _BIO_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_next');
  late final _BIO_next =
      _BIO_nextPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_set_next(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> next,
  ) {
    return _BIO_set_next(
      b,
      next,
    );
  }

  late final _BIO_set_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_set_next');
  late final _BIO_set_next = _BIO_set_nextPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_get_retry_BIO(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Int> reason,
  ) {
    return _BIO_get_retry_BIO(
      bio,
      reason,
    );
  }

  late final _BIO_get_retry_BIOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>>('BIO_get_retry_BIO');
  late final _BIO_get_retry_BIO = _BIO_get_retry_BIOPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>();

  int BIO_get_retry_reason(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_get_retry_reason(
      bio,
    );
  }

  late final _BIO_get_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_retry_reason');
  late final _BIO_get_retry_reason =
      _BIO_get_retry_reasonPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_retry_reason(
    ffi.Pointer<BIO> bio,
    int reason,
  ) {
    return _BIO_set_retry_reason(
      bio,
      reason,
    );
  }

  late final _BIO_set_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_retry_reason');
  late final _BIO_set_retry_reason = _BIO_set_retry_reasonPtr.asFunction<
      void Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_dup_chain(
    ffi.Pointer<BIO> in1,
  ) {
    return _BIO_dup_chain(
      in1,
    );
  }

  late final _BIO_dup_chainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_dup_chain');
  late final _BIO_dup_chain = _BIO_dup_chainPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  int BIO_nread0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nread0(
      bio,
      buf,
    );
  }

  late final _BIO_nread0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nread0');
  late final _BIO_nread0 = _BIO_nread0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nread(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nread(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nread');
  late final _BIO_nread = _BIO_nreadPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_nwrite0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nwrite0(
      bio,
      buf,
    );
  }

  late final _BIO_nwrite0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nwrite0');
  late final _BIO_nwrite0 = _BIO_nwrite0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nwrite(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nwrite(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nwrite');
  late final _BIO_nwrite = _BIO_nwritePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_mem() {
    return _BIO_s_mem();
  }

  late final _BIO_s_memPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_mem');
  late final _BIO_s_mem =
      _BIO_s_memPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_dgram_mem() {
    return _BIO_s_dgram_mem();
  }

  late final _BIO_s_dgram_memPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_dgram_mem');
  late final _BIO_s_dgram_mem =
      _BIO_s_dgram_memPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_secmem() {
    return _BIO_s_secmem();
  }

  late final _BIO_s_secmemPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_secmem');
  late final _BIO_s_secmem =
      _BIO_s_secmemPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_mem_buf(
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _BIO_new_mem_buf(
      buf,
      len,
    );
  }

  late final _BIO_new_mem_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_new_mem_buf');
  late final _BIO_new_mem_buf = _BIO_new_mem_bufPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_socket() {
    return _BIO_s_socket();
  }

  late final _BIO_s_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_socket');
  late final _BIO_s_socket =
      _BIO_s_socketPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_connect() {
    return _BIO_s_connect();
  }

  late final _BIO_s_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_connect');
  late final _BIO_s_connect =
      _BIO_s_connectPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_accept() {
    return _BIO_s_accept();
  }

  late final _BIO_s_acceptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_accept');
  late final _BIO_s_accept =
      _BIO_s_acceptPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_fd() {
    return _BIO_s_fd();
  }

  late final _BIO_s_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_fd');
  late final _BIO_s_fd =
      _BIO_s_fdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_log() {
    return _BIO_s_log();
  }

  late final _BIO_s_logPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_log');
  late final _BIO_s_log =
      _BIO_s_logPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_bio() {
    return _BIO_s_bio();
  }

  late final _BIO_s_bioPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_bio');
  late final _BIO_s_bio =
      _BIO_s_bioPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_null() {
    return _BIO_s_null();
  }

  late final _BIO_s_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_null');
  late final _BIO_s_null =
      _BIO_s_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_null() {
    return _BIO_f_null();
  }

  late final _BIO_f_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_null');
  late final _BIO_f_null =
      _BIO_f_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_buffer() {
    return _BIO_f_buffer();
  }

  late final _BIO_f_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_buffer');
  late final _BIO_f_buffer =
      _BIO_f_bufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_readbuffer() {
    return _BIO_f_readbuffer();
  }

  late final _BIO_f_readbufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_readbuffer');
  late final _BIO_f_readbuffer =
      _BIO_f_readbufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_linebuffer() {
    return _BIO_f_linebuffer();
  }

  late final _BIO_f_linebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_linebuffer');
  late final _BIO_f_linebuffer =
      _BIO_f_linebufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_nbio_test() {
    return _BIO_f_nbio_test();
  }

  late final _BIO_f_nbio_testPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_nbio_test');
  late final _BIO_f_nbio_test =
      _BIO_f_nbio_testPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_prefix() {
    return _BIO_f_prefix();
  }

  late final _BIO_f_prefixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_prefix');
  late final _BIO_f_prefix =
      _BIO_f_prefixPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_core() {
    return _BIO_s_core();
  }

  late final _BIO_s_corePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_core');
  late final _BIO_s_core =
      _BIO_s_corePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_dgram_pair() {
    return _BIO_s_dgram_pair();
  }

  late final _BIO_s_dgram_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_dgram_pair');
  late final _BIO_s_dgram_pair =
      _BIO_s_dgram_pairPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_datagram() {
    return _BIO_s_datagram();
  }

  late final _BIO_s_datagramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_datagram');
  late final _BIO_s_datagram =
      _BIO_s_datagramPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  int BIO_dgram_non_fatal_error(
    int error,
  ) {
    return _BIO_dgram_non_fatal_error(
      error,
    );
  }

  late final _BIO_dgram_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_dgram_non_fatal_error');
  late final _BIO_dgram_non_fatal_error =
      _BIO_dgram_non_fatal_errorPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_dgram(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_dgram(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_dgramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_dgram');
  late final _BIO_new_dgram =
      _BIO_new_dgramPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_sock_should_retry(
    int i,
  ) {
    return _BIO_sock_should_retry(
      i,
    );
  }

  late final _BIO_sock_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_should_retry');
  late final _BIO_sock_should_retry =
      _BIO_sock_should_retryPtr.asFunction<int Function(int)>();

  int BIO_sock_non_fatal_error(
    int error,
  ) {
    return _BIO_sock_non_fatal_error(
      error,
    );
  }

  late final _BIO_sock_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_non_fatal_error');
  late final _BIO_sock_non_fatal_error =
      _BIO_sock_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_err_is_non_fatal(
    int errcode,
  ) {
    return _BIO_err_is_non_fatal(
      errcode,
    );
  }

  late final _BIO_err_is_non_fatalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'BIO_err_is_non_fatal');
  late final _BIO_err_is_non_fatal =
      _BIO_err_is_non_fatalPtr.asFunction<int Function(int)>();

  int BIO_socket_wait(
    int fd,
    int for_read,
    int max_time,
  ) {
    return _BIO_socket_wait(
      fd,
      for_read,
      max_time,
    );
  }

  late final _BIO_socket_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, time_t)>>(
          'BIO_socket_wait');
  late final _BIO_socket_wait =
      _BIO_socket_waitPtr.asFunction<int Function(int, int, int)>();

  int BIO_wait(
    ffi.Pointer<BIO> bio,
    int max_time,
    int nap_milliseconds,
  ) {
    return _BIO_wait(
      bio,
      max_time,
      nap_milliseconds,
    );
  }

  late final _BIO_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, time_t, ffi.UnsignedInt)>>('BIO_wait');
  late final _BIO_wait =
      _BIO_waitPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_do_connect_retry(
    ffi.Pointer<BIO> bio,
    int timeout,
    int nap_milliseconds,
  ) {
    return _BIO_do_connect_retry(
      bio,
      timeout,
      nap_milliseconds,
    );
  }

  late final _BIO_do_connect_retryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Int)>>('BIO_do_connect_retry');
  late final _BIO_do_connect_retry = _BIO_do_connect_retryPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_fd_should_retry(
    int i,
  ) {
    return _BIO_fd_should_retry(
      i,
    );
  }

  late final _BIO_fd_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_should_retry');
  late final _BIO_fd_should_retry =
      _BIO_fd_should_retryPtr.asFunction<int Function(int)>();

  int BIO_fd_non_fatal_error(
    int error,
  ) {
    return _BIO_fd_non_fatal_error(
      error,
    );
  }

  late final _BIO_fd_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_non_fatal_error');
  late final _BIO_fd_non_fatal_error =
      _BIO_fd_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_dump_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                    ffi.Pointer<ffi.Void> u)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Void> s,
    int len,
  ) {
    return _BIO_dump_cb(
      cb,
      u,
      s,
      len,
    );
  }

  late final _BIO_dump_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                          ffi.Pointer<ffi.Void> u)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('BIO_dump_cb');
  late final _BIO_dump_cb = _BIO_dump_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                      ffi.Pointer<ffi.Void> u)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  int BIO_dump_indent_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                    ffi.Pointer<ffi.Void> u)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Void> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_cb(
      cb,
      u,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                          ffi.Pointer<ffi.Void> u)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('BIO_dump_indent_cb');
  late final _BIO_dump_indent_cb = _BIO_dump_indent_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                      ffi.Pointer<ffi.Void> u)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int)>();

  int BIO_dump(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> bytes,
    int len,
  ) {
    return _BIO_dump(
      b,
      bytes,
      len,
    );
  }

  late final _BIO_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_dump');
  late final _BIO_dump = _BIO_dumpPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_dump_indent(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent(
      b,
      bytes,
      len,
      indent,
    );
  }

  late final _BIO_dump_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent');
  late final _BIO_dump_indent = _BIO_dump_indentPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int, int)>();

  int BIO_dump_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Void> s,
    int len,
  ) {
    return _BIO_dump_fp(
      fp,
      s,
      len,
    );
  }

  late final _BIO_dump_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('BIO_dump_fp');
  late final _BIO_dump_fp = _BIO_dump_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_dump_indent_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Void> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_fp(
      fp,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent_fp');
  late final _BIO_dump_indent_fp = _BIO_dump_indent_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>, int, int)>();

  int BIO_hex_string(
    ffi.Pointer<BIO> out,
    int indent,
    int width,
    ffi.Pointer<ffi.Void> data,
    int datalen,
  ) {
    return _BIO_hex_string(
      out,
      indent,
      width,
      data,
      datalen,
    );
  }

  late final _BIO_hex_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_hex_string');
  late final _BIO_hex_string = _BIO_hex_stringPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDR_new() {
    return _BIO_ADDR_new();
  }

  late final _BIO_ADDR_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_ADDR> Function()>>(
          'BIO_ADDR_new');
  late final _BIO_ADDR_new =
      _BIO_ADDR_newPtr.asFunction<ffi.Pointer<BIO_ADDR> Function()>();

  int BIO_ADDR_copy(
    ffi.Pointer<BIO_ADDR> dst,
    ffi.Pointer<BIO_ADDR> src,
  ) {
    return _BIO_ADDR_copy(
      dst,
      src,
    );
  }

  late final _BIO_ADDR_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_ADDR>, ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_copy');
  late final _BIO_ADDR_copy = _BIO_ADDR_copyPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDR_dup(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_dup(
      ap,
    );
  }

  late final _BIO_ADDR_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDR> Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_dup');
  late final _BIO_ADDR_dup = _BIO_ADDR_dupPtr.asFunction<
      ffi.Pointer<BIO_ADDR> Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_rawmake(
    ffi.Pointer<BIO_ADDR> ap,
    int family,
    ffi.Pointer<ffi.Void> where,
    int wherelen,
    int port,
  ) {
    return _BIO_ADDR_rawmake(
      ap,
      family,
      where,
      wherelen,
      port,
    );
  }

  late final _BIO_ADDR_rawmakePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_ADDR>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedShort)>>('BIO_ADDR_rawmake');
  late final _BIO_ADDR_rawmake = _BIO_ADDR_rawmakePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_ADDR>, int, ffi.Pointer<ffi.Void>, int, int)>();

  void BIO_ADDR_free(
    ffi.Pointer<BIO_ADDR> arg0,
  ) {
    return _BIO_ADDR_free(
      arg0,
    );
  }

  late final _BIO_ADDR_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_free');
  late final _BIO_ADDR_free =
      _BIO_ADDR_freePtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  void BIO_ADDR_clear(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_clear(
      ap,
    );
  }

  late final _BIO_ADDR_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_clear');
  late final _BIO_ADDR_clear =
      _BIO_ADDR_clearPtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_family(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_family(
      ap,
    );
  }

  late final _BIO_ADDR_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_family');
  late final _BIO_ADDR_family =
      _BIO_ADDR_familyPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_rawaddress(
    ffi.Pointer<BIO_ADDR> ap,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Size> l,
  ) {
    return _BIO_ADDR_rawaddress(
      ap,
      p,
      l,
    );
  }

  late final _BIO_ADDR_rawaddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('BIO_ADDR_rawaddress');
  late final _BIO_ADDR_rawaddress = _BIO_ADDR_rawaddressPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int BIO_ADDR_rawport(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_rawport(
      ap,
    );
  }

  late final _BIO_ADDR_rawportPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedShort Function(ffi.Pointer<BIO_ADDR>)>>(
      'BIO_ADDR_rawport');
  late final _BIO_ADDR_rawport =
      _BIO_ADDR_rawportPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_hostname_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_hostname_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_hostname_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_hostname_string');
  late final _BIO_ADDR_hostname_string = _BIO_ADDR_hostname_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_service_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_service_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_service_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_service_string');
  late final _BIO_ADDR_service_string = _BIO_ADDR_service_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_path_string(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_path_string(
      ap,
    );
  }

  late final _BIO_ADDR_path_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_path_string');
  late final _BIO_ADDR_path_string = _BIO_ADDR_path_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<BIO_ADDRINFO> BIO_ADDRINFO_next(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_next(
      bai,
    );
  }

  late final _BIO_ADDRINFO_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDRINFO> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_next');
  late final _BIO_ADDRINFO_next = _BIO_ADDRINFO_nextPtr.asFunction<
      ffi.Pointer<BIO_ADDRINFO> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_family(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_family(
      bai,
    );
  }

  late final _BIO_ADDRINFO_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_family');
  late final _BIO_ADDRINFO_family = _BIO_ADDRINFO_familyPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_socktype(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_socktype(
      bai,
    );
  }

  late final _BIO_ADDRINFO_socktypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_socktype');
  late final _BIO_ADDRINFO_socktype = _BIO_ADDRINFO_socktypePtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_protocol(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_protocol(
      bai,
    );
  }

  late final _BIO_ADDRINFO_protocolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_protocol');
  late final _BIO_ADDRINFO_protocol = _BIO_ADDRINFO_protocolPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDRINFO_address(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_address(
      bai,
    );
  }

  late final _BIO_ADDRINFO_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDR> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_address');
  late final _BIO_ADDRINFO_address = _BIO_ADDRINFO_addressPtr.asFunction<
      ffi.Pointer<BIO_ADDR> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  void BIO_ADDRINFO_free(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_free(
      bai,
    );
  }

  late final _BIO_ADDRINFO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_free');
  late final _BIO_ADDRINFO_free = _BIO_ADDRINFO_freePtr.asFunction<
      void Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_parse_hostserv(
    ffi.Pointer<ffi.Char> hostserv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<ffi.Pointer<ffi.Char>> service,
    BIO_hostserv_priorities hostserv_prio,
  ) {
    return _BIO_parse_hostserv(
      hostserv,
      host,
      service,
      hostserv_prio.value,
    );
  }

  late final _BIO_parse_hostservPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('BIO_parse_hostserv');
  late final _BIO_parse_hostserv = _BIO_parse_hostservPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_lookup(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    BIO_lookup_type lookup_type,
    int family,
    int socktype,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup(
      host,
      service,
      lookup_type.value,
      family,
      socktype,
      res,
    );
  }

  late final _BIO_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup');
  late final _BIO_lookup = _BIO_lookupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_lookup_ex(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    int lookup_type,
    int family,
    int socktype,
    int protocol,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup_ex(
      host,
      service,
      lookup_type,
      family,
      socktype,
      protocol,
      res,
    );
  }

  late final _BIO_lookup_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup_ex');
  late final _BIO_lookup_ex = _BIO_lookup_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          int, ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_sock_error(
    int sock,
  ) {
    return _BIO_sock_error(
      sock,
    );
  }

  late final _BIO_sock_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_sock_error');
  late final _BIO_sock_error =
      _BIO_sock_errorPtr.asFunction<int Function(int)>();

  int BIO_socket_ioctl(
    int fd,
    int type,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _BIO_socket_ioctl(
      fd,
      type,
      arg,
    );
  }

  late final _BIO_socket_ioctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>('BIO_socket_ioctl');
  late final _BIO_socket_ioctl = _BIO_socket_ioctlPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_socket_nbio(
    int fd,
    int mode,
  ) {
    return _BIO_socket_nbio(
      fd,
      mode,
    );
  }

  late final _BIO_socket_nbioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_socket_nbio');
  late final _BIO_socket_nbio =
      _BIO_socket_nbioPtr.asFunction<int Function(int, int)>();

  int BIO_sock_init() {
    return _BIO_sock_init();
  }

  late final _BIO_sock_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_sock_init');
  late final _BIO_sock_init = _BIO_sock_initPtr.asFunction<int Function()>();

  int BIO_set_tcp_ndelay(
    int sock,
    int turn_on,
  ) {
    return _BIO_set_tcp_ndelay(
      sock,
      turn_on,
    );
  }

  late final _BIO_set_tcp_ndelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_set_tcp_ndelay');
  late final _BIO_set_tcp_ndelay =
      _BIO_set_tcp_ndelayPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<hostent> BIO_gethostbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_gethostbyname(
      name,
    );
  }

  late final _BIO_gethostbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>)>>('BIO_gethostbyname');
  late final _BIO_gethostbyname = _BIO_gethostbynamePtr.asFunction<
      ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>)>();

  int BIO_get_port(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedShort> port_ptr,
  ) {
    return _BIO_get_port(
      str,
      port_ptr,
    );
  }

  late final _BIO_get_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedShort>)>>('BIO_get_port');
  late final _BIO_get_port = _BIO_get_portPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedShort>)>();

  int BIO_get_host_ip(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedChar> ip,
  ) {
    return _BIO_get_host_ip(
      str,
      ip,
    );
  }

  late final _BIO_get_host_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BIO_get_host_ip');
  late final _BIO_get_host_ip = _BIO_get_host_ipPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BIO_get_accept_socket(
    ffi.Pointer<ffi.Char> host_port,
    int mode,
  ) {
    return _BIO_get_accept_socket(
      host_port,
      mode,
    );
  }

  late final _BIO_get_accept_socketPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'BIO_get_accept_socket');
  late final _BIO_get_accept_socket = _BIO_get_accept_socketPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int BIO_accept(
    int sock,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ip_port,
  ) {
    return _BIO_accept(
      sock,
      ip_port,
    );
  }

  late final _BIO_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_accept');
  late final _BIO_accept = _BIO_acceptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_sock_info(
    int sock,
    BIO_sock_info_type type,
    ffi.Pointer<BIO_sock_info_u> info,
  ) {
    return _BIO_sock_info(
      sock,
      type.value,
      info,
    );
  }

  late final _BIO_sock_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedInt,
              ffi.Pointer<BIO_sock_info_u>)>>('BIO_sock_info');
  late final _BIO_sock_info = _BIO_sock_infoPtr.asFunction<
      int Function(int, int, ffi.Pointer<BIO_sock_info_u>)>();

  int BIO_socket(
    int domain,
    int socktype,
    int protocol,
    int options,
  ) {
    return _BIO_socket(
      domain,
      socktype,
      protocol,
      options,
    );
  }

  late final _BIO_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BIO_socket');
  late final _BIO_socket =
      _BIO_socketPtr.asFunction<int Function(int, int, int, int)>();

  int BIO_connect(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_connect(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_connect');
  late final _BIO_connect = _BIO_connectPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_bind(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_bind(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_bind');
  late final _BIO_bind =
      _BIO_bindPtr.asFunction<int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_listen(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_listen(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_listen');
  late final _BIO_listen = _BIO_listenPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_accept_ex(
    int accept_sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_accept_ex(
      accept_sock,
      addr,
      options,
    );
  }

  late final _BIO_accept_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_accept_ex');
  late final _BIO_accept_ex = _BIO_accept_exPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_closesocket(
    int sock,
  ) {
    return _BIO_closesocket(
      sock,
    );
  }

  late final _BIO_closesocketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_closesocket');
  late final _BIO_closesocket =
      _BIO_closesocketPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_socket(
    int sock,
    int close_flag,
  ) {
    return _BIO_new_socket(
      sock,
      close_flag,
    );
  }

  late final _BIO_new_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_socket');
  late final _BIO_new_socket =
      _BIO_new_socketPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  ffi.Pointer<BIO> BIO_new_connect(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_connect(
      host_port,
    );
  }

  late final _BIO_new_connectPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_connect');
  late final _BIO_new_connect = _BIO_new_connectPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_accept(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_accept(
      host_port,
    );
  }

  late final _BIO_new_acceptPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_accept');
  late final _BIO_new_accept = _BIO_new_acceptPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_fd(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_fd(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_fd');
  late final _BIO_new_fd =
      _BIO_new_fdPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_new_bio_pair(
    ffi.Pointer<ffi.Pointer<BIO>> bio1,
    int writebuf1,
    ffi.Pointer<ffi.Pointer<BIO>> bio2,
    int writebuf2,
  ) {
    return _BIO_new_bio_pair(
      bio1,
      writebuf1,
      bio2,
      writebuf2,
    );
  }

  late final _BIO_new_bio_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIO>>, ffi.Size,
              ffi.Pointer<ffi.Pointer<BIO>>, ffi.Size)>>('BIO_new_bio_pair');
  late final _BIO_new_bio_pair = _BIO_new_bio_pairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIO>>, int,
          ffi.Pointer<ffi.Pointer<BIO>>, int)>();

  int BIO_new_bio_dgram_pair(
    ffi.Pointer<ffi.Pointer<BIO>> bio1,
    int writebuf1,
    ffi.Pointer<ffi.Pointer<BIO>> bio2,
    int writebuf2,
  ) {
    return _BIO_new_bio_dgram_pair(
      bio1,
      writebuf1,
      bio2,
      writebuf2,
    );
  }

  late final _BIO_new_bio_dgram_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Size)>>('BIO_new_bio_dgram_pair');
  late final _BIO_new_bio_dgram_pair = _BIO_new_bio_dgram_pairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIO>>, int,
          ffi.Pointer<ffi.Pointer<BIO>>, int)>();

  void BIO_copy_next_retry(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_copy_next_retry(
      b,
    );
  }

  late final _BIO_copy_next_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_copy_next_retry');
  late final _BIO_copy_next_retry =
      _BIO_copy_next_retryPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_printf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_printf(
      bio,
      format,
    );
  }

  late final _BIO_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_printf');
  late final _BIO_printf = _BIO_printfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_vprintf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
    va_list2 args,
  ) {
    return _BIO_vprintf(
      bio,
      format,
      args,
    );
  }

  late final _BIO_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
              va_list2)>>('BIO_vprintf');
  late final _BIO_vprintf = _BIO_vprintfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, va_list2)>();

  int BIO_snprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_snprintf(
      buf,
      n,
      format,
    );
  }

  late final _BIO_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('BIO_snprintf');
  late final _BIO_snprintf = _BIO_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int BIO_vsnprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
    va_list2 args,
  ) {
    return _BIO_vsnprintf(
      buf,
      n,
      format,
      args,
    );
  }

  late final _BIO_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list2)>>('BIO_vsnprintf');
  late final _BIO_vsnprintf = _BIO_vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list2)>();

  ffi.Pointer<BIO_METHOD> BIO_meth_new(
    int type,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_meth_new(
      type,
      name,
    );
  }

  late final _BIO_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_METHOD> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('BIO_meth_new');
  late final _BIO_meth_new = _BIO_meth_newPtr.asFunction<
      ffi.Pointer<BIO_METHOD> Function(int, ffi.Pointer<ffi.Char>)>();

  void BIO_meth_free(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_free(
      biom,
    );
  }

  late final _BIO_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_METHOD>)>>(
          'BIO_meth_free');
  late final _BIO_meth_free =
      _BIO_meth_freePtr.asFunction<void Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_write(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write(
      biom,
    );
  }

  late final _BIO_meth_get_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write');
  late final _BIO_meth_get_write = _BIO_meth_get_writePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write_ex(
      biom,
    );
  }

  late final _BIO_meth_get_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Size, ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write_ex');
  late final _BIO_meth_get_write_ex = _BIO_meth_get_write_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_write(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        write,
  ) {
    return _BIO_meth_set_write(
      biom,
      write,
    );
  }

  late final _BIO_meth_set_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_write');
  late final _BIO_meth_set_write = _BIO_meth_set_writePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Size>)>>
        bwrite,
  ) {
    return _BIO_meth_set_write_ex(
      biom,
      bwrite,
    );
  }

  late final _BIO_meth_set_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_write_ex');
  late final _BIO_meth_set_write_ex = _BIO_meth_set_write_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>)>();

  int BIO_meth_set_sendmmsg(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>,
                    ffi.Size, ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>
        f,
  ) {
    return _BIO_meth_set_sendmmsg(
      biom,
      f,
    );
  }

  late final _BIO_meth_set_sendmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<BIO_MSG>,
                          ffi.Size,
                          ffi.Size,
                          ffi.Uint64,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_sendmmsg');
  late final _BIO_meth_set_sendmmsg = _BIO_meth_set_sendmmsgPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>,
                      ffi.Pointer<BIO_MSG>,
                      ffi.Size,
                      ffi.Size,
                      ffi.Uint64,
                      ffi.Pointer<ffi.Size>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<BIO_MSG>,
              ffi.Size,
              ffi.Size,
              ffi.Uint64,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_sendmmsg(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_sendmmsg(
      biom,
    );
  }

  late final _BIO_meth_get_sendmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<BIO_MSG>,
                          ffi.Size,
                          ffi.Size,
                          ffi.Uint64,
                          ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_sendmmsg');
  late final _BIO_meth_get_sendmmsg = _BIO_meth_get_sendmmsgPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>,
                      ffi.Size, ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_read(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read(
      biom,
    );
  }

  late final _BIO_meth_get_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read');
  late final _BIO_meth_get_read = _BIO_meth_get_readPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read_ex(
      biom,
    );
  }

  late final _BIO_meth_get_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Size, ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read_ex');
  late final _BIO_meth_get_read_ex = _BIO_meth_get_read_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_read(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        read,
  ) {
    return _BIO_meth_set_read(
      biom,
      read,
    );
  }

  late final _BIO_meth_set_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_read');
  late final _BIO_meth_set_read = _BIO_meth_set_readPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Size>)>>
        bread,
  ) {
    return _BIO_meth_set_read_ex(
      biom,
      bread,
    );
  }

  late final _BIO_meth_set_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_read_ex');
  late final _BIO_meth_set_read_ex = _BIO_meth_set_read_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>)>();

  int BIO_meth_set_recvmmsg(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>,
                    ffi.Size, ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>
        f,
  ) {
    return _BIO_meth_set_recvmmsg(
      biom,
      f,
    );
  }

  late final _BIO_meth_set_recvmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<BIO_MSG>,
                          ffi.Size,
                          ffi.Size,
                          ffi.Uint64,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_recvmmsg');
  late final _BIO_meth_set_recvmmsg = _BIO_meth_set_recvmmsgPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>,
                      ffi.Pointer<BIO_MSG>,
                      ffi.Size,
                      ffi.Size,
                      ffi.Uint64,
                      ffi.Pointer<ffi.Size>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<BIO_MSG>,
              ffi.Size,
              ffi.Size,
              ffi.Uint64,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_recvmmsg(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_recvmmsg(
      biom,
    );
  }

  late final _BIO_meth_get_recvmmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<BIO_MSG>,
                          ffi.Size,
                          ffi.Size,
                          ffi.Uint64,
                          ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_recvmmsg');
  late final _BIO_meth_get_recvmmsg = _BIO_meth_get_recvmmsgPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO_MSG>,
                      ffi.Size, ffi.Size, ffi.Uint64, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
      BIO_meth_get_puts(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_puts(
      biom,
    );
  }

  late final _BIO_meth_get_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_puts');
  late final _BIO_meth_get_puts = _BIO_meth_get_putsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_puts(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
        puts,
  ) {
    return _BIO_meth_set_puts(
      biom,
      puts,
    );
  }

  late final _BIO_meth_set_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>)>>)>>('BIO_meth_set_puts');
  late final _BIO_meth_set_puts = _BIO_meth_set_putsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_gets(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_gets(
      biom,
    );
  }

  late final _BIO_meth_get_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_gets');
  late final _BIO_meth_get_gets = _BIO_meth_get_getsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_gets(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        ossl_gets,
  ) {
    return _BIO_meth_set_gets(
      biom,
      ossl_gets,
    );
  }

  late final _BIO_meth_set_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_gets');
  late final _BIO_meth_set_gets = _BIO_meth_set_getsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>
      BIO_meth_get_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_ctrl');
  late final _BIO_meth_get_ctrl = _BIO_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _BIO_meth_set_ctrl(
      biom,
      ctrl,
    );
  }

  late final _BIO_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>)>>('BIO_meth_set_ctrl');
  late final _BIO_meth_set_ctrl = _BIO_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_create(
    ffi.Pointer<BIO_METHOD> bion,
  ) {
    return _BIO_meth_get_create(
      bion,
    );
  }

  late final _BIO_meth_get_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_create');
  late final _BIO_meth_get_create = _BIO_meth_get_createPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_create(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> create,
  ) {
    return _BIO_meth_set_create(
      biom,
      create,
    );
  }

  late final _BIO_meth_set_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO_METHOD>,
                  ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>>(
      'BIO_meth_set_create');
  late final _BIO_meth_set_create = _BIO_meth_set_createPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_destroy(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_destroy(
      biom,
    );
  }

  late final _BIO_meth_get_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_destroy');
  late final _BIO_meth_get_destroy = _BIO_meth_get_destroyPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_destroy(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> destroy,
  ) {
    return _BIO_meth_set_destroy(
      biom,
      destroy,
    );
  }

  late final _BIO_meth_set_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO_METHOD>,
                  ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>>(
      'BIO_meth_set_destroy');
  late final _BIO_meth_set_destroy = _BIO_meth_set_destroyPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
      BIO_meth_get_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_callback_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_callback_ctrl');
  late final _BIO_meth_get_callback_ctrl =
      _BIO_meth_get_callback_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(
                    ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
        callback_ctrl,
  ) {
    return _BIO_meth_set_callback_ctrl(
      biom,
      callback_ctrl,
    );
  }

  late final _BIO_meth_set_callback_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                              ffi.Pointer<BIO_info_cb>)>>)>>(
      'BIO_meth_set_callback_ctrl');
  late final _BIO_meth_set_callback_ctrl =
      _BIO_meth_set_callback_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                          ffi.Pointer<BIO_info_cb>)>>)>();

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SEQUENCE_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SEQUENCE_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SEQUENCE_ANY');
  late final _d2i_ASN1_SEQUENCE_ANY = _d2i_ASN1_SEQUENCE_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SEQUENCE_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SEQUENCE_ANYPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_SEQUENCE_ANY');
  late final _i2d_ASN1_SEQUENCE_ANY = _i2d_ASN1_SEQUENCE_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_SEQUENCE_ANY_it() {
    return _ASN1_SEQUENCE_ANY_it();
  }

  late final _ASN1_SEQUENCE_ANY_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_SEQUENCE_ANY_it');
  late final _ASN1_SEQUENCE_ANY_it =
      _ASN1_SEQUENCE_ANY_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SET_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SET_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SET_ANY');
  late final _d2i_ASN1_SET_ANY = _d2i_ASN1_SET_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SET_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SET_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_SET_ANY');
  late final _i2d_ASN1_SET_ANY = _i2d_ASN1_SET_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_SET_ANY_it() {
    return _ASN1_SET_ANY_it();
  }

  late final _ASN1_SET_ANY_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_SET_ANY_it');
  late final _ASN1_SET_ANY_it =
      _ASN1_SET_ANY_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_new() {
    return _ASN1_TYPE_new();
  }

  late final _ASN1_TYPE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TYPE> Function()>>(
          'ASN1_TYPE_new');
  late final _ASN1_TYPE_new =
      _ASN1_TYPE_newPtr.asFunction<ffi.Pointer<ASN1_TYPE> Function()>();

  void ASN1_TYPE_free(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_free(
      a,
    );
  }

  late final _ASN1_TYPE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_free');
  late final _ASN1_TYPE_free =
      _ASN1_TYPE_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> d2i_ASN1_TYPE(
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TYPE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TYPE');
  late final _d2i_ASN1_TYPE = _d2i_ASN1_TYPEPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TYPE(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TYPE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TYPE');
  late final _i2d_ASN1_TYPE = _i2d_ASN1_TYPEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ANY_it() {
    return _ASN1_ANY_it();
  }

  late final _ASN1_ANY_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_ANY_it');
  late final _ASN1_ANY_it =
      _ASN1_ANY_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  int ASN1_TYPE_get(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_get(
      a,
    );
  }

  late final _ASN1_TYPE_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_get');
  late final _ASN1_TYPE_get =
      _ASN1_TYPE_getPtr.asFunction<int Function(ffi.Pointer<ASN1_TYPE>)>();

  void ASN1_TYPE_set(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set');
  late final _ASN1_TYPE_set = _ASN1_TYPE_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_set1(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set1(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set1');
  late final _ASN1_TYPE_set1 = _ASN1_TYPE_set1Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_cmp(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ASN1_TYPE> b,
  ) {
    return _ASN1_TYPE_cmp(
      a,
      b,
    );
  }

  late final _ASN1_TYPE_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_cmp');
  late final _ASN1_TYPE_cmp = _ASN1_TYPE_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_pack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> t,
  ) {
    return _ASN1_TYPE_pack_sequence(
      it,
      s,
      t,
    );
  }

  late final _ASN1_TYPE_pack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>>('ASN1_TYPE_pack_sequence');
  late final _ASN1_TYPE_pack_sequence = _ASN1_TYPE_pack_sequencePtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>();

  ffi.Pointer<ffi.Void> ASN1_TYPE_unpack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_TYPE> t,
  ) {
    return _ASN1_TYPE_unpack_sequence(
      it,
      t,
    );
  }

  late final _ASN1_TYPE_unpack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_unpack_sequence');
  late final _ASN1_TYPE_unpack_sequence =
      _ASN1_TYPE_unpack_sequencePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_new() {
    return _ASN1_OBJECT_new();
  }

  late final _ASN1_OBJECT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function()>>(
          'ASN1_OBJECT_new');
  late final _ASN1_OBJECT_new =
      _ASN1_OBJECT_newPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function()>();

  void ASN1_OBJECT_free(
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _ASN1_OBJECT_free(
      a,
    );
  }

  late final _ASN1_OBJECT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'ASN1_OBJECT_free');
  late final _ASN1_OBJECT_free = _ASN1_OBJECT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> d2i_ASN1_OBJECT(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_OBJECT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OBJECT');
  late final _d2i_ASN1_OBJECT = _d2i_ASN1_OBJECTPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_OBJECT(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_OBJECT(
      a,
      out,
    );
  }

  late final _i2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_OBJECT');
  late final _i2d_ASN1_OBJECT = _i2d_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_OBJECT_it() {
    return _ASN1_OBJECT_it();
  }

  late final _ASN1_OBJECT_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_OBJECT_it');
  late final _ASN1_OBJECT_it =
      _ASN1_OBJECT_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_new() {
    return _ASN1_STRING_new();
  }

  late final _ASN1_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_STRING_new');
  late final _ASN1_STRING_new =
      _ASN1_STRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_STRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_free(
      a,
    );
  }

  late final _ASN1_STRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_free');
  late final _ASN1_STRING_free = _ASN1_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_clear_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_clear_free(
      a,
    );
  }

  late final _ASN1_STRING_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_clear_free');
  late final _ASN1_STRING_clear_free = _ASN1_STRING_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_copy(
    ffi.Pointer<ASN1_STRING> dst,
    ffi.Pointer<ASN1_STRING> str,
  ) {
    return _ASN1_STRING_copy(
      dst,
      str,
    );
  }

  late final _ASN1_STRING_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_copy');
  late final _ASN1_STRING_copy = _ASN1_STRING_copyPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_dup(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_dup(
      a,
    );
  }

  late final _ASN1_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_dup');
  late final _ASN1_STRING_dup = _ASN1_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_type_new(
    int type,
  ) {
    return _ASN1_STRING_type_new(
      type,
    );
  }

  late final _ASN1_STRING_type_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function(ffi.Int)>>(
          'ASN1_STRING_type_new');
  late final _ASN1_STRING_type_new = _ASN1_STRING_type_newPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(int)>();

  int ASN1_STRING_cmp(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ASN1_STRING> b,
  ) {
    return _ASN1_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_cmp');
  late final _ASN1_STRING_cmp = _ASN1_STRING_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_set(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set');
  late final _ASN1_STRING_set = _ASN1_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  void ASN1_STRING_set0(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set0(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set0');
  late final _ASN1_STRING_set0 = _ASN1_STRING_set0Ptr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  int ASN1_STRING_length(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_length(
      x,
    );
  }

  late final _ASN1_STRING_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_length');
  late final _ASN1_STRING_length = _ASN1_STRING_lengthPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_length_set(
    ffi.Pointer<ASN1_STRING> x,
    int n,
  ) {
    return _ASN1_STRING_length_set(
      x,
      n,
    );
  }

  late final _ASN1_STRING_length_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_STRING>, ffi.Int)>>('ASN1_STRING_length_set');
  late final _ASN1_STRING_length_set = _ASN1_STRING_length_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_type(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_type(
      x,
    );
  }

  late final _ASN1_STRING_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_type');
  late final _ASN1_STRING_type =
      _ASN1_STRING_typePtr.asFunction<int Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_data(
      x,
    );
  }

  late final _ASN1_STRING_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_data');
  late final _ASN1_STRING_data = _ASN1_STRING_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_get0_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_get0_data(
      x,
    );
  }

  late final _ASN1_STRING_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_get0_data');
  late final _ASN1_STRING_get0_data = _ASN1_STRING_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> ASN1_BIT_STRING_new() {
    return _ASN1_BIT_STRING_new();
  }

  late final _ASN1_BIT_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BIT_STRING> Function()>>(
          'ASN1_BIT_STRING_new');
  late final _ASN1_BIT_STRING_new = _ASN1_BIT_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function()>();

  void ASN1_BIT_STRING_free(
    ffi.Pointer<ASN1_BIT_STRING> a,
  ) {
    return _ASN1_BIT_STRING_free(
      a,
    );
  }

  late final _ASN1_BIT_STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BIT_STRING>)>>(
      'ASN1_BIT_STRING_free');
  late final _ASN1_BIT_STRING_free = _ASN1_BIT_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BIT_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> d2i_ASN1_BIT_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BIT_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BIT_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BIT_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BIT_STRING');
  late final _d2i_ASN1_BIT_STRING = _d2i_ASN1_BIT_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BIT_STRING(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BIT_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BIT_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BIT_STRING');
  late final _i2d_ASN1_BIT_STRING = _i2d_ASN1_BIT_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_BIT_STRING_it() {
    return _ASN1_BIT_STRING_it();
  }

  late final _ASN1_BIT_STRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_BIT_STRING_it');
  late final _ASN1_BIT_STRING_it =
      _ASN1_BIT_STRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  int ASN1_BIT_STRING_set(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> d,
    int length,
  ) {
    return _ASN1_BIT_STRING_set(
      a,
      d,
      length,
    );
  }

  late final _ASN1_BIT_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_BIT_STRING_set');
  late final _ASN1_BIT_STRING_set = _ASN1_BIT_STRING_setPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_set_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
    int value,
  ) {
    return _ASN1_BIT_STRING_set_bit(
      a,
      n,
      value,
    );
  }

  late final _ASN1_BIT_STRING_set_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Int,
              ffi.Int)>>('ASN1_BIT_STRING_set_bit');
  late final _ASN1_BIT_STRING_set_bit = _ASN1_BIT_STRING_set_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int, int)>();

  int ASN1_BIT_STRING_get_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
  ) {
    return _ASN1_BIT_STRING_get_bit(
      a,
      n,
    );
  }

  late final _ASN1_BIT_STRING_get_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Int)>>('ASN1_BIT_STRING_get_bit');
  late final _ASN1_BIT_STRING_get_bit = _ASN1_BIT_STRING_get_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int)>();

  int ASN1_BIT_STRING_check(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> flags,
    int flags_len,
  ) {
    return _ASN1_BIT_STRING_check(
      a,
      flags,
      flags_len,
    );
  }

  late final _ASN1_BIT_STRING_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_BIT_STRING_check');
  late final _ASN1_BIT_STRING_check = _ASN1_BIT_STRING_checkPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_name_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
    int indent,
  ) {
    return _ASN1_BIT_STRING_name_print(
      out,
      bs,
      tbl,
      indent,
    );
  }

  late final _ASN1_BIT_STRING_name_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>,
              ffi.Int)>>('ASN1_BIT_STRING_name_print');
  late final _ASN1_BIT_STRING_name_print =
      _ASN1_BIT_STRING_name_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>, int)>();

  int ASN1_BIT_STRING_num_asc(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_num_asc(
      name,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_num_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_num_asc');
  late final _ASN1_BIT_STRING_num_asc = _ASN1_BIT_STRING_num_ascPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<BIT_STRING_BITNAME>)>();

  int ASN1_BIT_STRING_set_asc(
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<ffi.Char> name,
    int value,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_set_asc(
      bs,
      name,
      value,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_set_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_set_asc');
  late final _ASN1_BIT_STRING_set_asc = _ASN1_BIT_STRING_set_ascPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<BIT_STRING_BITNAME>)>();

  ffi.Pointer<ASN1_INTEGER> ASN1_INTEGER_new() {
    return _ASN1_INTEGER_new();
  }

  late final _ASN1_INTEGER_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_INTEGER> Function()>>(
          'ASN1_INTEGER_new');
  late final _ASN1_INTEGER_new =
      _ASN1_INTEGER_newPtr.asFunction<ffi.Pointer<ASN1_INTEGER> Function()>();

  void ASN1_INTEGER_free(
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_free(
      a,
    );
  }

  late final _ASN1_INTEGER_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_INTEGER>)>>(
          'ASN1_INTEGER_free');
  late final _ASN1_INTEGER_free = _ASN1_INTEGER_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_INTEGER> d2i_ASN1_INTEGER(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_INTEGER(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_INTEGER');
  late final _d2i_ASN1_INTEGER = _d2i_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_INTEGER(
    ffi.Pointer<ASN1_INTEGER> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_INTEGER(
      a,
      out,
    );
  }

  late final _i2d_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_INTEGER');
  late final _i2d_ASN1_INTEGER = _i2d_ASN1_INTEGERPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_INTEGER_it() {
    return _ASN1_INTEGER_it();
  }

  late final _ASN1_INTEGER_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_INTEGER_it');
  late final _ASN1_INTEGER_it =
      _ASN1_INTEGER_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_INTEGER> d2i_ASN1_UINTEGER(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_ASN1_UINTEGER(
      a,
      pp,
      length,
    );
  }

  late final _d2i_ASN1_UINTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UINTEGER');
  late final _d2i_ASN1_UINTEGER = _d2i_ASN1_UINTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<ASN1_INTEGER> ASN1_INTEGER_dup(
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_dup(
      a,
    );
  }

  late final _ASN1_INTEGER_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_dup');
  late final _ASN1_INTEGER_dup = _ASN1_INTEGER_dupPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_cmp(
    ffi.Pointer<ASN1_INTEGER> x,
    ffi.Pointer<ASN1_INTEGER> y,
  ) {
    return _ASN1_INTEGER_cmp(
      x,
      y,
    );
  }

  late final _ASN1_INTEGER_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_cmp');
  late final _ASN1_INTEGER_cmp = _ASN1_INTEGER_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_ENUMERATED> ASN1_ENUMERATED_new() {
    return _ASN1_ENUMERATED_new();
  }

  late final _ASN1_ENUMERATED_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ENUMERATED> Function()>>(
          'ASN1_ENUMERATED_new');
  late final _ASN1_ENUMERATED_new = _ASN1_ENUMERATED_newPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function()>();

  void ASN1_ENUMERATED_free(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_free(
      a,
    );
  }

  late final _ASN1_ENUMERATED_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_free');
  late final _ASN1_ENUMERATED_free = _ASN1_ENUMERATED_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> d2i_ASN1_ENUMERATED(
    ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_ENUMERATED(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(
              ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_ENUMERATED');
  late final _d2i_ASN1_ENUMERATED = _d2i_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_ENUMERATED(
    ffi.Pointer<ASN1_ENUMERATED> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_ENUMERATED(
      a,
      out,
    );
  }

  late final _i2d_ASN1_ENUMERATEDPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_ENUMERATED');
  late final _i2d_ASN1_ENUMERATED = _i2d_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ENUMERATED_it() {
    return _ASN1_ENUMERATED_it();
  }

  late final _ASN1_ENUMERATED_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_ENUMERATED_it');
  late final _ASN1_ENUMERATED_it =
      _ASN1_ENUMERATED_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  int ASN1_UTCTIME_check(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_check(
      a,
    );
  }

  late final _ASN1_UTCTIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_check');
  late final _ASN1_UTCTIME_check = _ASN1_UTCTIME_checkPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_set(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ASN1_UTCTIME>, time_t)>>('ASN1_UTCTIME_set');
  late final _ASN1_UTCTIME_set = _ASN1_UTCTIME_setPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_adj(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_UTCTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_UTCTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_UTCTIME_adj');
  late final _ASN1_UTCTIME_adj = _ASN1_UTCTIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(
          ffi.Pointer<ASN1_UTCTIME>, int, int, int)>();

  int ASN1_UTCTIME_set_string(
    ffi.Pointer<ASN1_UTCTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_UTCTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_UTCTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_UTCTIME_set_string');
  late final _ASN1_UTCTIME_set_string = _ASN1_UTCTIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_UTCTIME_cmp_time_t(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_cmp_time_tPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>, time_t)>>(
      'ASN1_UTCTIME_cmp_time_t');
  late final _ASN1_UTCTIME_cmp_time_t = _ASN1_UTCTIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  int ASN1_GENERALIZEDTIME_check(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_check(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_checkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_check');
  late final _ASN1_GENERALIZEDTIME_check = _ASN1_GENERALIZEDTIME_checkPtr
      .asFunction<int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_set(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
  ) {
    return _ASN1_GENERALIZEDTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_GENERALIZEDTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t)>>('ASN1_GENERALIZEDTIME_set');
  late final _ASN1_GENERALIZEDTIME_set =
      _ASN1_GENERALIZEDTIME_setPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_adj(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_GENERALIZEDTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_GENERALIZEDTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t,
              ffi.Int,
              ffi.Long)>>('ASN1_GENERALIZEDTIME_adj');
  late final _ASN1_GENERALIZEDTIME_adj =
      _ASN1_GENERALIZEDTIME_adjPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int, int, int)>();

  int ASN1_GENERALIZEDTIME_set_string(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_GENERALIZEDTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_GENERALIZEDTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_GENERALIZEDTIME_set_string');
  late final _ASN1_GENERALIZEDTIME_set_string =
      _ASN1_GENERALIZEDTIME_set_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<ASN1_TIME> from,
    ffi.Pointer<ASN1_TIME> to,
  ) {
    return _ASN1_TIME_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _ASN1_TIME_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_diff');
  late final _ASN1_TIME_diff = _ASN1_TIME_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_new() {
    return _ASN1_OCTET_STRING_new();
  }

  late final _ASN1_OCTET_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OCTET_STRING> Function()>>(
          'ASN1_OCTET_STRING_new');
  late final _ASN1_OCTET_STRING_new = _ASN1_OCTET_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function()>();

  void ASN1_OCTET_STRING_free(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_free(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_OCTET_STRING>)>>(
      'ASN1_OCTET_STRING_free');
  late final _ASN1_OCTET_STRING_free = _ASN1_OCTET_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OCTET_STRING>)>();

  ffi.Pointer<ASN1_OCTET_STRING> d2i_ASN1_OCTET_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_OCTET_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_OCTET_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OCTET_STRING');
  late final _d2i_ASN1_OCTET_STRING = _d2i_ASN1_OCTET_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_OCTET_STRING(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_OCTET_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_OCTET_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_OCTET_STRING');
  late final _i2d_ASN1_OCTET_STRING = _i2d_ASN1_OCTET_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_OCTET_STRING_it() {
    return _ASN1_OCTET_STRING_it();
  }

  late final _ASN1_OCTET_STRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_OCTET_STRING_it');
  late final _ASN1_OCTET_STRING_it =
      _ASN1_OCTET_STRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_dup(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_dup(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_dup');
  late final _ASN1_OCTET_STRING_dup = _ASN1_OCTET_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_cmp(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ASN1_OCTET_STRING> b,
  ) {
    return _ASN1_OCTET_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_OCTET_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_cmp');
  late final _ASN1_OCTET_STRING_cmp = _ASN1_OCTET_STRING_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_OCTET_STRING>, ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_set(
    ffi.Pointer<ASN1_OCTET_STRING> str,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_OCTET_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_OCTET_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_OCTET_STRING_set');
  late final _ASN1_OCTET_STRING_set = _ASN1_OCTET_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ASN1_VISIBLESTRING> ASN1_VISIBLESTRING_new() {
    return _ASN1_VISIBLESTRING_new();
  }

  late final _ASN1_VISIBLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_VISIBLESTRING> Function()>>(
          'ASN1_VISIBLESTRING_new');
  late final _ASN1_VISIBLESTRING_new = _ASN1_VISIBLESTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function()>();

  void ASN1_VISIBLESTRING_free(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
  ) {
    return _ASN1_VISIBLESTRING_free(
      a,
    );
  }

  late final _ASN1_VISIBLESTRING_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_VISIBLESTRING>)>>(
      'ASN1_VISIBLESTRING_free');
  late final _ASN1_VISIBLESTRING_free = _ASN1_VISIBLESTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VISIBLESTRING>)>();

  ffi.Pointer<ASN1_VISIBLESTRING> d2i_ASN1_VISIBLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_VISIBLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_VISIBLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VISIBLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_VISIBLESTRING');
  late final _d2i_ASN1_VISIBLESTRING = _d2i_ASN1_VISIBLESTRINGPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_VISIBLESTRING(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_VISIBLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_VISIBLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_VISIBLESTRING');
  late final _i2d_ASN1_VISIBLESTRING = _i2d_ASN1_VISIBLESTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_VISIBLESTRING_it() {
    return _ASN1_VISIBLESTRING_it();
  }

  late final _ASN1_VISIBLESTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_VISIBLESTRING_it');
  late final _ASN1_VISIBLESTRING_it =
      _ASN1_VISIBLESTRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_UNIVERSALSTRING> ASN1_UNIVERSALSTRING_new() {
    return _ASN1_UNIVERSALSTRING_new();
  }

  late final _ASN1_UNIVERSALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>>(
          'ASN1_UNIVERSALSTRING_new');
  late final _ASN1_UNIVERSALSTRING_new = _ASN1_UNIVERSALSTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>();

  void ASN1_UNIVERSALSTRING_free(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
  ) {
    return _ASN1_UNIVERSALSTRING_free(
      a,
    );
  }

  late final _ASN1_UNIVERSALSTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_UNIVERSALSTRING>)>>('ASN1_UNIVERSALSTRING_free');
  late final _ASN1_UNIVERSALSTRING_free = _ASN1_UNIVERSALSTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  ffi.Pointer<ASN1_UNIVERSALSTRING> d2i_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UNIVERSALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UNIVERSALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UNIVERSALSTRING');
  late final _d2i_ASN1_UNIVERSALSTRING =
      _d2i_ASN1_UNIVERSALSTRINGPtr.asFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UNIVERSALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UNIVERSALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UNIVERSALSTRING');
  late final _i2d_ASN1_UNIVERSALSTRING =
      _i2d_ASN1_UNIVERSALSTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_UNIVERSALSTRING_it() {
    return _ASN1_UNIVERSALSTRING_it();
  }

  late final _ASN1_UNIVERSALSTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_UNIVERSALSTRING_it');
  late final _ASN1_UNIVERSALSTRING_it = _ASN1_UNIVERSALSTRING_itPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_UTF8STRING> ASN1_UTF8STRING_new() {
    return _ASN1_UTF8STRING_new();
  }

  late final _ASN1_UTF8STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTF8STRING> Function()>>(
          'ASN1_UTF8STRING_new');
  late final _ASN1_UTF8STRING_new = _ASN1_UTF8STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function()>();

  void ASN1_UTF8STRING_free(
    ffi.Pointer<ASN1_UTF8STRING> a,
  ) {
    return _ASN1_UTF8STRING_free(
      a,
    );
  }

  late final _ASN1_UTF8STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTF8STRING>)>>(
      'ASN1_UTF8STRING_free');
  late final _ASN1_UTF8STRING_free = _ASN1_UTF8STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTF8STRING>)>();

  ffi.Pointer<ASN1_UTF8STRING> d2i_ASN1_UTF8STRING(
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTF8STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTF8STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTF8STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTF8STRING');
  late final _d2i_ASN1_UTF8STRING = _d2i_ASN1_UTF8STRINGPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_UTF8STRING(
    ffi.Pointer<ASN1_UTF8STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTF8STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTF8STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UTF8STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UTF8STRING');
  late final _i2d_ASN1_UTF8STRING = _i2d_ASN1_UTF8STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTF8STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_UTF8STRING_it() {
    return _ASN1_UTF8STRING_it();
  }

  late final _ASN1_UTF8STRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_UTF8STRING_it');
  late final _ASN1_UTF8STRING_it =
      _ASN1_UTF8STRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_NULL> ASN1_NULL_new() {
    return _ASN1_NULL_new();
  }

  late final _ASN1_NULL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_NULL> Function()>>(
          'ASN1_NULL_new');
  late final _ASN1_NULL_new =
      _ASN1_NULL_newPtr.asFunction<ffi.Pointer<ASN1_NULL> Function()>();

  void ASN1_NULL_free(
    ffi.Pointer<ASN1_NULL> a,
  ) {
    return _ASN1_NULL_free(
      a,
    );
  }

  late final _ASN1_NULL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_NULL>)>>(
          'ASN1_NULL_free');
  late final _ASN1_NULL_free =
      _ASN1_NULL_freePtr.asFunction<void Function(ffi.Pointer<ASN1_NULL>)>();

  ffi.Pointer<ASN1_NULL> d2i_ASN1_NULL(
    ffi.Pointer<ffi.Pointer<ASN1_NULL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_NULL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_NULL> Function(
              ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_NULL');
  late final _d2i_ASN1_NULL = _d2i_ASN1_NULLPtr.asFunction<
      ffi.Pointer<ASN1_NULL> Function(ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_NULL(
    ffi.Pointer<ASN1_NULL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_NULL(
      a,
      out,
    );
  }

  late final _i2d_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_NULL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_NULL');
  late final _i2d_ASN1_NULL = _i2d_ASN1_NULLPtr.asFunction<
      int Function(ffi.Pointer<ASN1_NULL>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_NULL_it() {
    return _ASN1_NULL_it();
  }

  late final _ASN1_NULL_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_NULL_it');
  late final _ASN1_NULL_it =
      _ASN1_NULL_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_BMPSTRING> ASN1_BMPSTRING_new() {
    return _ASN1_BMPSTRING_new();
  }

  late final _ASN1_BMPSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BMPSTRING> Function()>>(
          'ASN1_BMPSTRING_new');
  late final _ASN1_BMPSTRING_new = _ASN1_BMPSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function()>();

  void ASN1_BMPSTRING_free(
    ffi.Pointer<ASN1_BMPSTRING> a,
  ) {
    return _ASN1_BMPSTRING_free(
      a,
    );
  }

  late final _ASN1_BMPSTRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BMPSTRING>)>>(
      'ASN1_BMPSTRING_free');
  late final _ASN1_BMPSTRING_free = _ASN1_BMPSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BMPSTRING>)>();

  ffi.Pointer<ASN1_BMPSTRING> d2i_ASN1_BMPSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BMPSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BMPSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BMPSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BMPSTRING');
  late final _d2i_ASN1_BMPSTRING = _d2i_ASN1_BMPSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BMPSTRING(
    ffi.Pointer<ASN1_BMPSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BMPSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BMPSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BMPSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BMPSTRING');
  late final _i2d_ASN1_BMPSTRING = _i2d_ASN1_BMPSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BMPSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_BMPSTRING_it() {
    return _ASN1_BMPSTRING_it();
  }

  late final _ASN1_BMPSTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_BMPSTRING_it');
  late final _ASN1_BMPSTRING_it =
      _ASN1_BMPSTRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  int UTF8_getc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    ffi.Pointer<ffi.UnsignedLong> val,
  ) {
    return _UTF8_getc(
      str,
      len,
      val,
    );
  }

  late final _UTF8_getcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>)>>('UTF8_getc');
  late final _UTF8_getc = _UTF8_getcPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedLong>)>();

  int UTF8_putc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    int value,
  ) {
    return _UTF8_putc(
      str,
      len,
      value,
    );
  }

  late final _UTF8_putcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.UnsignedLong)>>('UTF8_putc');
  late final _UTF8_putc = _UTF8_putcPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_PRINTABLE_new() {
    return _ASN1_PRINTABLE_new();
  }

  late final _ASN1_PRINTABLE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_PRINTABLE_new');
  late final _ASN1_PRINTABLE_new =
      _ASN1_PRINTABLE_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_PRINTABLE_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_PRINTABLE_free(
      a,
    );
  }

  late final _ASN1_PRINTABLE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_PRINTABLE_free');
  late final _ASN1_PRINTABLE_free = _ASN1_PRINTABLE_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_ASN1_PRINTABLE(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLE');
  late final _d2i_ASN1_PRINTABLE = _d2i_ASN1_PRINTABLEPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_PRINTABLE(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLE');
  late final _i2d_ASN1_PRINTABLE = _i2d_ASN1_PRINTABLEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_PRINTABLE_it() {
    return _ASN1_PRINTABLE_it();
  }

  late final _ASN1_PRINTABLE_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_PRINTABLE_it');
  late final _ASN1_PRINTABLE_it =
      _ASN1_PRINTABLE_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_STRING> DIRECTORYSTRING_new() {
    return _DIRECTORYSTRING_new();
  }

  late final _DIRECTORYSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DIRECTORYSTRING_new');
  late final _DIRECTORYSTRING_new =
      _DIRECTORYSTRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DIRECTORYSTRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DIRECTORYSTRING_free(
      a,
    );
  }

  late final _DIRECTORYSTRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DIRECTORYSTRING_free');
  late final _DIRECTORYSTRING_free = _DIRECTORYSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DIRECTORYSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DIRECTORYSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DIRECTORYSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DIRECTORYSTRING');
  late final _d2i_DIRECTORYSTRING = _d2i_DIRECTORYSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DIRECTORYSTRING(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DIRECTORYSTRING(
      a,
      out,
    );
  }

  late final _i2d_DIRECTORYSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_DIRECTORYSTRING');
  late final _i2d_DIRECTORYSTRING = _i2d_DIRECTORYSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> DIRECTORYSTRING_it() {
    return _DIRECTORYSTRING_it();
  }

  late final _DIRECTORYSTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'DIRECTORYSTRING_it');
  late final _DIRECTORYSTRING_it =
      _DIRECTORYSTRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_STRING> DISPLAYTEXT_new() {
    return _DISPLAYTEXT_new();
  }

  late final _DISPLAYTEXT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DISPLAYTEXT_new');
  late final _DISPLAYTEXT_new =
      _DISPLAYTEXT_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DISPLAYTEXT_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DISPLAYTEXT_free(
      a,
    );
  }

  late final _DISPLAYTEXT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DISPLAYTEXT_free');
  late final _DISPLAYTEXT_free = _DISPLAYTEXT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DISPLAYTEXT(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DISPLAYTEXT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DISPLAYTEXT');
  late final _d2i_DISPLAYTEXT = _d2i_DISPLAYTEXTPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DISPLAYTEXT(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DISPLAYTEXT(
      a,
      out,
    );
  }

  late final _i2d_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DISPLAYTEXT');
  late final _i2d_DISPLAYTEXT = _i2d_DISPLAYTEXTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> DISPLAYTEXT_it() {
    return _DISPLAYTEXT_it();
  }

  late final _DISPLAYTEXT_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'DISPLAYTEXT_it');
  late final _DISPLAYTEXT_it =
      _DISPLAYTEXT_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_PRINTABLESTRING> ASN1_PRINTABLESTRING_new() {
    return _ASN1_PRINTABLESTRING_new();
  }

  late final _ASN1_PRINTABLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>>(
          'ASN1_PRINTABLESTRING_new');
  late final _ASN1_PRINTABLESTRING_new = _ASN1_PRINTABLESTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>();

  void ASN1_PRINTABLESTRING_free(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
  ) {
    return _ASN1_PRINTABLESTRING_free(
      a,
    );
  }

  late final _ASN1_PRINTABLESTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_PRINTABLESTRING>)>>('ASN1_PRINTABLESTRING_free');
  late final _ASN1_PRINTABLESTRING_free = _ASN1_PRINTABLESTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_PRINTABLESTRING>)>();

  ffi.Pointer<ASN1_PRINTABLESTRING> d2i_ASN1_PRINTABLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLESTRING');
  late final _d2i_ASN1_PRINTABLESTRING =
      _d2i_ASN1_PRINTABLESTRINGPtr.asFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_PRINTABLESTRING(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLESTRING');
  late final _i2d_ASN1_PRINTABLESTRING =
      _i2d_ASN1_PRINTABLESTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_PRINTABLESTRING_it() {
    return _ASN1_PRINTABLESTRING_it();
  }

  late final _ASN1_PRINTABLESTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_PRINTABLESTRING_it');
  late final _ASN1_PRINTABLESTRING_it = _ASN1_PRINTABLESTRING_itPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_T61STRING> ASN1_T61STRING_new() {
    return _ASN1_T61STRING_new();
  }

  late final _ASN1_T61STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_T61STRING> Function()>>(
          'ASN1_T61STRING_new');
  late final _ASN1_T61STRING_new = _ASN1_T61STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function()>();

  void ASN1_T61STRING_free(
    ffi.Pointer<ASN1_T61STRING> a,
  ) {
    return _ASN1_T61STRING_free(
      a,
    );
  }

  late final _ASN1_T61STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_T61STRING>)>>(
      'ASN1_T61STRING_free');
  late final _ASN1_T61STRING_free = _ASN1_T61STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_T61STRING>)>();

  ffi.Pointer<ASN1_T61STRING> d2i_ASN1_T61STRING(
    ffi.Pointer<ffi.Pointer<ASN1_T61STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_T61STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_T61STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_T61STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_T61STRING');
  late final _d2i_ASN1_T61STRING = _d2i_ASN1_T61STRINGPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_T61STRING(
    ffi.Pointer<ASN1_T61STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_T61STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_T61STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_T61STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_T61STRING');
  late final _i2d_ASN1_T61STRING = _i2d_ASN1_T61STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_T61STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_T61STRING_it() {
    return _ASN1_T61STRING_it();
  }

  late final _ASN1_T61STRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_T61STRING_it');
  late final _ASN1_T61STRING_it =
      _ASN1_T61STRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_IA5STRING> ASN1_IA5STRING_new() {
    return _ASN1_IA5STRING_new();
  }

  late final _ASN1_IA5STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_IA5STRING> Function()>>(
          'ASN1_IA5STRING_new');
  late final _ASN1_IA5STRING_new = _ASN1_IA5STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function()>();

  void ASN1_IA5STRING_free(
    ffi.Pointer<ASN1_IA5STRING> a,
  ) {
    return _ASN1_IA5STRING_free(
      a,
    );
  }

  late final _ASN1_IA5STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_IA5STRING>)>>(
      'ASN1_IA5STRING_free');
  late final _ASN1_IA5STRING_free = _ASN1_IA5STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_IA5STRING>)>();

  ffi.Pointer<ASN1_IA5STRING> d2i_ASN1_IA5STRING(
    ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_IA5STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_IA5STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_IA5STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_IA5STRING');
  late final _d2i_ASN1_IA5STRING = _d2i_ASN1_IA5STRINGPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_IA5STRING(
    ffi.Pointer<ASN1_IA5STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_IA5STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_IA5STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_IA5STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_IA5STRING');
  late final _i2d_ASN1_IA5STRING = _i2d_ASN1_IA5STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_IA5STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_IA5STRING_it() {
    return _ASN1_IA5STRING_it();
  }

  late final _ASN1_IA5STRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_IA5STRING_it');
  late final _ASN1_IA5STRING_it =
      _ASN1_IA5STRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_GENERALSTRING> ASN1_GENERALSTRING_new() {
    return _ASN1_GENERALSTRING_new();
  }

  late final _ASN1_GENERALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALSTRING> Function()>>(
          'ASN1_GENERALSTRING_new');
  late final _ASN1_GENERALSTRING_new = _ASN1_GENERALSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function()>();

  void ASN1_GENERALSTRING_free(
    ffi.Pointer<ASN1_GENERALSTRING> a,
  ) {
    return _ASN1_GENERALSTRING_free(
      a,
    );
  }

  late final _ASN1_GENERALSTRING_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_GENERALSTRING>)>>(
      'ASN1_GENERALSTRING_free');
  late final _ASN1_GENERALSTRING_free = _ASN1_GENERALSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_GENERALSTRING>)>();

  ffi.Pointer<ASN1_GENERALSTRING> d2i_ASN1_GENERALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALSTRING');
  late final _d2i_ASN1_GENERALSTRING = _d2i_ASN1_GENERALSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_GENERALSTRING(
    ffi.Pointer<ASN1_GENERALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALSTRING');
  late final _i2d_ASN1_GENERALSTRING = _i2d_ASN1_GENERALSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_GENERALSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_GENERALSTRING_it() {
    return _ASN1_GENERALSTRING_it();
  }

  late final _ASN1_GENERALSTRING_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_GENERALSTRING_it');
  late final _ASN1_GENERALSTRING_it =
      _ASN1_GENERALSTRING_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_new() {
    return _ASN1_UTCTIME_new();
  }

  late final _ASN1_UTCTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTCTIME> Function()>>(
          'ASN1_UTCTIME_new');
  late final _ASN1_UTCTIME_new =
      _ASN1_UTCTIME_newPtr.asFunction<ffi.Pointer<ASN1_UTCTIME> Function()>();

  void ASN1_UTCTIME_free(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_free(
      a,
    );
  }

  late final _ASN1_UTCTIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_free');
  late final _ASN1_UTCTIME_free = _ASN1_UTCTIME_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> d2i_ASN1_UTCTIME(
    ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTCTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTCTIME');
  late final _d2i_ASN1_UTCTIME = _d2i_ASN1_UTCTIMEPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_UTCTIME(
    ffi.Pointer<ASN1_UTCTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTCTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_UTCTIME');
  late final _i2d_ASN1_UTCTIME = _i2d_ASN1_UTCTIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_UTCTIME_it() {
    return _ASN1_UTCTIME_it();
  }

  late final _ASN1_UTCTIME_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_UTCTIME_it');
  late final _ASN1_UTCTIME_it =
      _ASN1_UTCTIME_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_new() {
    return _ASN1_GENERALIZEDTIME_new();
  }

  late final _ASN1_GENERALIZEDTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>>(
          'ASN1_GENERALIZEDTIME_new');
  late final _ASN1_GENERALIZEDTIME_new = _ASN1_GENERALIZEDTIME_newPtr
      .asFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>();

  void ASN1_GENERALIZEDTIME_free(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_free(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>)>>('ASN1_GENERALIZEDTIME_free');
  late final _ASN1_GENERALIZEDTIME_free = _ASN1_GENERALIZEDTIME_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> d2i_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALIZEDTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALIZEDTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALIZEDTIME');
  late final _d2i_ASN1_GENERALIZEDTIME =
      _d2i_ASN1_GENERALIZEDTIMEPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALIZEDTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALIZEDTIMEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALIZEDTIME');
  late final _i2d_ASN1_GENERALIZEDTIME =
      _i2d_ASN1_GENERALIZEDTIMEPtr.asFunction<
          int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_GENERALIZEDTIME_it() {
    return _ASN1_GENERALIZEDTIME_it();
  }

  late final _ASN1_GENERALIZEDTIME_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_GENERALIZEDTIME_it');
  late final _ASN1_GENERALIZEDTIME_it = _ASN1_GENERALIZEDTIME_itPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_new() {
    return _ASN1_TIME_new();
  }

  late final _ASN1_TIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TIME> Function()>>(
          'ASN1_TIME_new');
  late final _ASN1_TIME_new =
      _ASN1_TIME_newPtr.asFunction<ffi.Pointer<ASN1_TIME> Function()>();

  void ASN1_TIME_free(
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_free(
      a,
    );
  }

  late final _ASN1_TIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_free');
  late final _ASN1_TIME_free =
      _ASN1_TIME_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_TIME> d2i_ASN1_TIME(
    ffi.Pointer<ffi.Pointer<ASN1_TIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TIME');
  late final _d2i_ASN1_TIME = _d2i_ASN1_TIMEPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TIME(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TIME');
  late final _i2d_ASN1_TIME = _i2d_ASN1_TIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_TIME_it() {
    return _ASN1_TIME_it();
  }

  late final _ASN1_TIME_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_TIME_it');
  late final _ASN1_TIME_it =
      _ASN1_TIME_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_dup(
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_dup(
      a,
    );
  }

  late final _ASN1_TIME_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_dup');
  late final _ASN1_TIME_dup = _ASN1_TIME_dupPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_dup(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_dup(
      a,
    );
  }

  late final _ASN1_UTCTIME_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ASN1_UTCTIME>)>>('ASN1_UTCTIME_dup');
  late final _ASN1_UTCTIME_dup = _ASN1_UTCTIME_dupPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_dup(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_dup(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>)>>('ASN1_GENERALIZEDTIME_dup');
  late final _ASN1_GENERALIZEDTIME_dup =
      _ASN1_GENERALIZEDTIME_dupPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_OCTET_STRING_NDEF_it() {
    return _ASN1_OCTET_STRING_NDEF_it();
  }

  late final _ASN1_OCTET_STRING_NDEF_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ASN1_OCTET_STRING_NDEF_it');
  late final _ASN1_OCTET_STRING_NDEF_it = _ASN1_OCTET_STRING_NDEF_itPtr
      .asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_set(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_set(
      s,
      t,
    );
  }

  late final _ASN1_TIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ASN1_TIME>, time_t)>>('ASN1_TIME_set');
  late final _ASN1_TIME_set = _ASN1_TIME_setPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int)>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_adj(
    ffi.Pointer<ASN1_TIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_TIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_TIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_TIME_adj');
  late final _ASN1_TIME_adj = _ASN1_TIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int, int, int)>();

  int ASN1_TIME_check(
    ffi.Pointer<ASN1_TIME> t,
  ) {
    return _ASN1_TIME_check(
      t,
    );
  }

  late final _ASN1_TIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_check');
  late final _ASN1_TIME_check =
      _ASN1_TIME_checkPtr.asFunction<int Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_TIME_to_generalizedtime(
    ffi.Pointer<ASN1_TIME> t,
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> out,
  ) {
    return _ASN1_TIME_to_generalizedtime(
      t,
      out,
    );
  }

  late final _ASN1_TIME_to_generalizedtimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
                  ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>>(
      'ASN1_TIME_to_generalizedtime');
  late final _ASN1_TIME_to_generalizedtime =
      _ASN1_TIME_to_generalizedtimePtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>();

  int ASN1_TIME_set_string(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string');
  late final _ASN1_TIME_set_string = _ASN1_TIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_set_string_X509(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string_X509(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_string_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string_X509');
  late final _ASN1_TIME_set_string_X509 =
      _ASN1_TIME_set_string_X509Ptr.asFunction<
          int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_to_tm(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<tm> tm,
  ) {
    return _ASN1_TIME_to_tm(
      s,
      tm,
    );
  }

  late final _ASN1_TIME_to_tmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>>('ASN1_TIME_to_tm');
  late final _ASN1_TIME_to_tm = _ASN1_TIME_to_tmPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>();

  int ASN1_TIME_normalize(
    ffi.Pointer<ASN1_TIME> s,
  ) {
    return _ASN1_TIME_normalize(
      s,
    );
  }

  late final _ASN1_TIME_normalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_normalize');
  late final _ASN1_TIME_normalize = _ASN1_TIME_normalizePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>)>();

  int ASN1_TIME_cmp_time_t(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_TIME_cmp_time_tPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>, time_t)>>(
      'ASN1_TIME_cmp_time_t');
  late final _ASN1_TIME_cmp_time_t = _ASN1_TIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, int)>();

  int ASN1_TIME_compare(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ASN1_TIME> b,
  ) {
    return _ASN1_TIME_compare(
      a,
      b,
    );
  }

  late final _ASN1_TIME_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_compare');
  late final _ASN1_TIME_compare = _ASN1_TIME_comparePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  int i2a_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _i2a_ASN1_INTEGER(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_INTEGER>)>>('i2a_ASN1_INTEGER');
  late final _i2a_ASN1_INTEGER = _i2a_ASN1_INTEGERPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>)>();

  int a2i_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_INTEGER> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_INTEGER(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_INTEGER');
  late final _a2i_ASN1_INTEGER = _a2i_ASN1_INTEGERPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _i2a_ASN1_ENUMERATED(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('i2a_ASN1_ENUMERATED');
  late final _i2a_ASN1_ENUMERATED = _i2a_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int a2i_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_ENUMERATED(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_ENUMERATED');
  late final _a2i_ASN1_ENUMERATED = _a2i_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_OBJECT(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2a_ASN1_OBJECT(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>>('i2a_ASN1_OBJECT');
  late final _i2a_ASN1_OBJECT = _i2a_ASN1_OBJECTPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>();

  int a2i_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_STRING(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_STRING');
  late final _a2i_ASN1_STRING = _a2i_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> a,
    int type,
  ) {
    return _i2a_ASN1_STRING(
      bp,
      a,
      type,
    );
  }

  late final _i2a_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Int)>>('i2a_ASN1_STRING');
  late final _i2a_ASN1_STRING = _i2a_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int i2t_ASN1_OBJECT(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2t_ASN1_OBJECT(
      buf,
      buf_len,
      a,
    );
  }

  late final _i2t_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>)>>('i2t_ASN1_OBJECT');
  late final _i2t_ASN1_OBJECT = _i2t_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>)>();

  int a2d_ASN1_OBJECT(
    ffi.Pointer<ffi.UnsignedChar> out,
    int olen,
    ffi.Pointer<ffi.Char> buf,
    int num,
  ) {
    return _a2d_ASN1_OBJECT(
      out,
      olen,
      buf,
      num,
    );
  }

  late final _a2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2d_ASN1_OBJECT');
  late final _a2d_ASN1_OBJECT = _a2d_ASN1_OBJECTPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_create(
    int nid,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _ASN1_OBJECT_create(
      nid,
      data,
      len,
      sn,
      ln,
    );
  }

  late final _ASN1_OBJECT_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ASN1_OBJECT_create');
  late final _ASN1_OBJECT_create = _ASN1_OBJECT_createPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int ASN1_INTEGER_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_get_int64');
  late final _ASN1_INTEGER_get_int64 = _ASN1_INTEGER_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_set_int64(
    ffi.Pointer<ASN1_INTEGER> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_INTEGER>, ffi.Int64)>>('ASN1_INTEGER_set_int64');
  late final _ASN1_INTEGER_set_int64 = _ASN1_INTEGER_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_get_uint64(
    ffi.Pointer<ffi.Uint64> pr,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get_uint64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_get_uint64');
  late final _ASN1_INTEGER_get_uint64 = _ASN1_INTEGER_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_set_uint64(
    ffi.Pointer<ASN1_INTEGER> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_uint64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Uint64)>>('ASN1_INTEGER_set_uint64');
  late final _ASN1_INTEGER_set_uint64 = _ASN1_INTEGER_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_set(
    ffi.Pointer<ASN1_INTEGER> a,
    int v,
  ) {
    return _ASN1_INTEGER_set(
      a,
      v,
    );
  }

  late final _ASN1_INTEGER_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_INTEGER>, ffi.Long)>>('ASN1_INTEGER_set');
  late final _ASN1_INTEGER_set = _ASN1_INTEGER_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_get(
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get(
      a,
    );
  }

  late final _ASN1_INTEGER_getPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ASN1_INTEGER>)>>(
          'ASN1_INTEGER_get');
  late final _ASN1_INTEGER_get = _ASN1_INTEGER_getPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_INTEGER> BN_to_ASN1_INTEGER(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_INTEGER> ai,
  ) {
    return _BN_to_ASN1_INTEGER(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ASN1_INTEGER>)>>('BN_to_ASN1_INTEGER');
  late final _BN_to_ASN1_INTEGER = _BN_to_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<BIGNUM> ASN1_INTEGER_to_BN(
    ffi.Pointer<ASN1_INTEGER> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_INTEGER_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_INTEGER_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<BIGNUM>)>>('ASN1_INTEGER_to_BN');
  late final _ASN1_INTEGER_to_BN = _ASN1_INTEGER_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ASN1_INTEGER>, ffi.Pointer<BIGNUM>)>();

  int ASN1_ENUMERATED_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_ENUMERATED_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('ASN1_ENUMERATED_get_int64');
  late final _ASN1_ENUMERATED_get_int64 =
      _ASN1_ENUMERATED_get_int64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int ASN1_ENUMERATED_set_int64(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int r,
  ) {
    return _ASN1_ENUMERATED_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_ENUMERATED_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Int64)>>('ASN1_ENUMERATED_set_int64');
  late final _ASN1_ENUMERATED_set_int64 = _ASN1_ENUMERATED_set_int64Ptr
      .asFunction<int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_set(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int v,
  ) {
    return _ASN1_ENUMERATED_set(
      a,
      v,
    );
  }

  late final _ASN1_ENUMERATED_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ENUMERATED>, ffi.Long)>>('ASN1_ENUMERATED_set');
  late final _ASN1_ENUMERATED_set = _ASN1_ENUMERATED_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_get(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get(
      a,
    );
  }

  late final _ASN1_ENUMERATED_getPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_get');
  late final _ASN1_ENUMERATED_get = _ASN1_ENUMERATED_getPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> BN_to_ASN1_ENUMERATED(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_ENUMERATED> ai,
  ) {
    return _BN_to_ASN1_ENUMERATED(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('BN_to_ASN1_ENUMERATED');
  late final _BN_to_ASN1_ENUMERATED = _BN_to_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<BIGNUM> ASN1_ENUMERATED_to_BN(
    ffi.Pointer<ASN1_ENUMERATED> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_ENUMERATED_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_ENUMERATED_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<BIGNUM>)>>('ASN1_ENUMERATED_to_BN');
  late final _ASN1_ENUMERATED_to_BN = _ASN1_ENUMERATED_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ASN1_ENUMERATED>, ffi.Pointer<BIGNUM>)>();

  int ASN1_PRINTABLE_type(
    ffi.Pointer<ffi.UnsignedChar> s,
    int max,
  ) {
    return _ASN1_PRINTABLE_type(
      s,
      max,
    );
  }

  late final _ASN1_PRINTABLE_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_PRINTABLE_type');
  late final _ASN1_PRINTABLE_type = _ASN1_PRINTABLE_typePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_tag2bit(
    int tag,
  ) {
    return _ASN1_tag2bit(
      tag,
    );
  }

  late final _ASN1_tag2bitPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Int)>>(
          'ASN1_tag2bit');
  late final _ASN1_tag2bit = _ASN1_tag2bitPtr.asFunction<int Function(int)>();

  int ASN1_get_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    ffi.Pointer<ffi.Long> plength,
    ffi.Pointer<ffi.Int> ptag,
    ffi.Pointer<ffi.Int> pclass,
    int omax,
  ) {
    return _ASN1_get_object(
      pp,
      plength,
      ptag,
      pclass,
      omax,
    );
  }

  late final _ASN1_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Long)>>('ASN1_get_object');
  late final _ASN1_get_object = _ASN1_get_objectPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int ASN1_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_check_infinite_end');
  late final _ASN1_check_infinite_end = _ASN1_check_infinite_endPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int ASN1_const_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_const_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_const_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_const_check_infinite_end');
  late final _ASN1_const_check_infinite_end =
      _ASN1_const_check_infinite_endPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  void ASN1_put_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int constructed,
    int length,
    int tag,
    int xclass,
  ) {
    return _ASN1_put_object(
      pp,
      constructed,
      length,
      tag,
      xclass,
    );
  }

  late final _ASN1_put_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ASN1_put_object');
  late final _ASN1_put_object = _ASN1_put_objectPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int, int, int, int)>();

  int ASN1_put_eoc(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _ASN1_put_eoc(
      pp,
    );
  }

  late final _ASN1_put_eocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('ASN1_put_eoc');
  late final _ASN1_put_eoc = _ASN1_put_eocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ASN1_object_size(
    int constructed,
    int length,
    int tag,
  ) {
    return _ASN1_object_size(
      constructed,
      length,
      tag,
    );
  }

  late final _ASN1_object_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'ASN1_object_size');
  late final _ASN1_object_size =
      _ASN1_object_sizePtr.asFunction<int Function(int, int, int)>();

  ffi.Pointer<ffi.Void> ASN1_dup(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_dup(
      i2d,
      d2i,
      x,
    );
  }

  late final _ASN1_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
              ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>>('ASN1_dup');
  late final _ASN1_dup = _ASN1_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
          ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_item_dup(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_dup(
      it,
      x,
    );
  }

  late final _ASN1_item_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>>('ASN1_item_dup');
  late final _ASN1_item_dup = _ASN1_item_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>();

  int ASN1_item_sign_ex(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<X509_ALGOR> algor2,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ASN1_OCTET_STRING> id,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_sign_ex(
      it,
      algor1,
      algor2,
      signature,
      data,
      id,
      pkey,
      md,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_sign_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_sign_ex');
  late final _ASN1_item_sign_ex = _ASN1_item_sign_exPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int ASN1_item_verify_ex(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<X509_ALGOR> alg,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ASN1_OCTET_STRING> id,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_verify_ex(
      it,
      alg,
      signature,
      data,
      id,
      pkey,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_verify_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_verify_ex');
  late final _ASN1_item_verify_ex = _ASN1_item_verify_exPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_fp(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_fp(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_fp');
  late final _ASN1_d2i_fp = _ASN1_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_fp_ex(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Void> x,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_d2i_fp_ex(
      it,
      in1,
      x,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_d2i_fp_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_d2i_fp_ex');
  late final _ASN1_item_d2i_fp_ex = _ASN1_item_d2i_fp_exPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_d2i_fp(
      it,
      in1,
      x,
    );
  }

  late final _ASN1_item_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_fp');
  late final _ASN1_item_d2i_fp = _ASN1_item_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_fp(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_i2d_fp(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_i2d_fp');
  late final _ASN1_i2d_fp = _ASN1_i2d_fpPtr.asFunction<
      int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Void>)>();

  int ASN1_item_i2d_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_fp(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_fp');
  late final _ASN1_item_i2d_fp = _ASN1_item_i2d_fpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_STRING_print_ex_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex_fp(
      fp,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_ex_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex_fp');
  late final _ASN1_STRING_print_ex_fp = _ASN1_STRING_print_ex_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_to_UTF8(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_STRING> in1,
  ) {
    return _ASN1_STRING_to_UTF8(
      out,
      in1,
    );
  }

  late final _ASN1_STRING_to_UTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_to_UTF8');
  late final _ASN1_STRING_to_UTF8 = _ASN1_STRING_to_UTF8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_bio(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_bio(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_bio');
  late final _ASN1_d2i_bio = _ASN1_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_bio_ex(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Void> pval,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_d2i_bio_ex(
      it,
      in1,
      pval,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_d2i_bio_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_d2i_bio_ex');
  late final _ASN1_item_d2i_bio_ex = _ASN1_item_d2i_bio_exPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Void> pval,
  ) {
    return _ASN1_item_d2i_bio(
      it,
      in1,
      pval,
    );
  }

  late final _ASN1_item_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_bio');
  late final _ASN1_item_d2i_bio = _ASN1_item_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_bio(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_i2d_bio(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>)>>('ASN1_i2d_bio');
  late final _ASN1_i2d_bio = _ASN1_i2d_bioPtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_item_i2d_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_bio(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_bio');
  late final _ASN1_item_i2d_bio = _ASN1_item_i2d_bioPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<BIO> ASN1_item_i2d_mem_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_VALUE> val,
  ) {
    return _ASN1_item_i2d_mem_bio(
      it,
      val,
    );
  }

  late final _ASN1_item_i2d_mem_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_VALUE>)>>('ASN1_item_i2d_mem_bio');
  late final _ASN1_item_i2d_mem_bio = _ASN1_item_i2d_mem_bioPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_VALUE>)>();

  int ASN1_UTCTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_UTCTIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_UTCTIME>)>>('ASN1_UTCTIME_print');
  late final _ASN1_UTCTIME_print = _ASN1_UTCTIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_UTCTIME>)>();

  int ASN1_GENERALIZEDTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_printPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_print');
  late final _ASN1_GENERALIZEDTIME_print =
      _ASN1_GENERALIZEDTIME_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  int ASN1_TIME_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _ASN1_TIME_print(
      bp,
      tm,
    );
  }

  late final _ASN1_TIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_print');
  late final _ASN1_TIME_print = _ASN1_TIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>();

  int ASN1_TIME_print_ex(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_TIME> tm,
    int flags,
  ) {
    return _ASN1_TIME_print_ex(
      bp,
      tm,
      flags,
    );
  }

  late final _ASN1_TIME_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>,
              ffi.UnsignedLong)>>('ASN1_TIME_print_ex');
  late final _ASN1_TIME_print_ex = _ASN1_TIME_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>, int)>();

  int ASN1_STRING_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> v,
  ) {
    return _ASN1_STRING_print(
      bp,
      v,
    );
  }

  late final _ASN1_STRING_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_print');
  late final _ASN1_STRING_print = _ASN1_STRING_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_print_ex(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex(
      out,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex');
  late final _ASN1_STRING_print_ex = _ASN1_STRING_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_buf_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
    int off,
  ) {
    return _ASN1_buf_print(
      bp,
      buf,
      buflen,
      off,
    );
  }

  late final _ASN1_buf_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Int)>>('ASN1_buf_print');
  late final _ASN1_buf_print = _ASN1_buf_printPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_bn_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> number,
    ffi.Pointer<BIGNUM> num,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int off,
  ) {
    return _ASN1_bn_print(
      bp,
      number,
      num,
      buf,
      off,
    );
  }

  late final _ASN1_bn_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_bn_print');
  late final _ASN1_bn_print = _ASN1_bn_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_parse(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
  ) {
    return _ASN1_parse(
      bp,
      pp,
      len,
      indent,
    );
  }

  late final _ASN1_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int)>>('ASN1_parse');
  late final _ASN1_parse = _ASN1_parsePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_parse_dump(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
    int dump,
  ) {
    return _ASN1_parse_dump(
      bp,
      pp,
      len,
      indent,
      dump,
    );
  }

  late final _ASN1_parse_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int, ffi.Int)>>('ASN1_parse_dump');
  late final _ASN1_parse_dump = _ASN1_parse_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ffi.Char> ASN1_tag2str(
    int tag,
  ) {
    return _ASN1_tag2str(
      tag,
    );
  }

  late final _ASN1_tag2strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ASN1_tag2str');
  late final _ASN1_tag2str =
      _ASN1_tag2strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ASN1_UNIVERSALSTRING_to_string(
    ffi.Pointer<ASN1_UNIVERSALSTRING> s,
  ) {
    return _ASN1_UNIVERSALSTRING_to_string(
      s,
    );
  }

  late final _ASN1_UNIVERSALSTRING_to_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>>(
      'ASN1_UNIVERSALSTRING_to_string');
  late final _ASN1_UNIVERSALSTRING_to_string =
      _ASN1_UNIVERSALSTRING_to_stringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  int ASN1_TYPE_set_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_octetstring(
      a,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_octetstring');
  late final _ASN1_TYPE_set_octetstring =
      _ASN1_TYPE_set_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_octetstring(
      a,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_octetstring');
  late final _ASN1_TYPE_get_octetstring =
      _ASN1_TYPE_get_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_set_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    int num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_int_octetstring(
      a,
      num,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Long,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_int_octetstring');
  late final _ASN1_TYPE_set_int_octetstring =
      _ASN1_TYPE_set_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Long> num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_int_octetstring(
      a,
      num,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_int_octetstring');
  late final _ASN1_TYPE_get_int_octetstring =
      _ASN1_TYPE_get_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Void> ASN1_item_unpack(
    ffi.Pointer<ASN1_STRING> oct,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_unpack(
      oct,
      it,
    );
  }

  late final _ASN1_item_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_unpack');
  late final _ASN1_item_unpack = _ASN1_item_unpackPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ffi.Void> ASN1_item_unpack_ex(
    ffi.Pointer<ASN1_STRING> oct,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_unpack_ex(
      oct,
      it,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_unpack_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_unpack_ex');
  late final _ASN1_item_unpack_ex = _ASN1_item_unpack_exPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_STRING> ASN1_item_pack(
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> oct,
  ) {
    return _ASN1_item_pack(
      obj,
      it,
      oct,
    );
  }

  late final _ASN1_item_packPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>>('ASN1_item_pack');
  late final _ASN1_item_pack = _ASN1_item_packPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>();

  void ASN1_STRING_set_default_mask(
    int mask,
  ) {
    return _ASN1_STRING_set_default_mask(
      mask,
    );
  }

  late final _ASN1_STRING_set_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'ASN1_STRING_set_default_mask');
  late final _ASN1_STRING_set_default_mask =
      _ASN1_STRING_set_default_maskPtr.asFunction<void Function(int)>();

  int ASN1_STRING_set_default_mask_asc(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _ASN1_STRING_set_default_mask_asc(
      p,
    );
  }

  late final _ASN1_STRING_set_default_mask_ascPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ASN1_STRING_set_default_mask_asc');
  late final _ASN1_STRING_set_default_mask_asc =
      _ASN1_STRING_set_default_mask_ascPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  int ASN1_STRING_get_default_mask() {
    return _ASN1_STRING_get_default_mask();
  }

  late final _ASN1_STRING_get_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'ASN1_STRING_get_default_mask');
  late final _ASN1_STRING_get_default_mask =
      _ASN1_STRING_get_default_maskPtr.asFunction<int Function()>();

  int ASN1_mbstring_copy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
  ) {
    return _ASN1_mbstring_copy(
      out,
      in1,
      len,
      inform,
      mask,
    );
  }

  late final _ASN1_mbstring_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong)>>('ASN1_mbstring_copy');
  late final _ASN1_mbstring_copy = _ASN1_mbstring_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int ASN1_mbstring_ncopy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
    int minsize,
    int maxsize,
  ) {
    return _ASN1_mbstring_ncopy(
      out,
      in1,
      len,
      inform,
      mask,
      minsize,
      maxsize,
    );
  }

  late final _ASN1_mbstring_ncopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong,
              ffi.Long,
              ffi.Long)>>('ASN1_mbstring_ncopy');
  late final _ASN1_mbstring_ncopy = _ASN1_mbstring_ncopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_set_by_NID(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
    int inform,
    int nid,
  ) {
    return _ASN1_STRING_set_by_NID(
      out,
      in1,
      inlen,
      inform,
      nid,
    );
  }

  late final _ASN1_STRING_set_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ASN1_STRING_set_by_NID');
  late final _ASN1_STRING_set_by_NID = _ASN1_STRING_set_by_NIDPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ASN1_STRING_TABLE> ASN1_STRING_TABLE_get(
    int nid,
  ) {
    return _ASN1_STRING_TABLE_get(
      nid,
    );
  }

  late final _ASN1_STRING_TABLE_getPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ASN1_STRING_TABLE> Function(ffi.Int)>>(
      'ASN1_STRING_TABLE_get');
  late final _ASN1_STRING_TABLE_get = _ASN1_STRING_TABLE_getPtr.asFunction<
      ffi.Pointer<ASN1_STRING_TABLE> Function(int)>();

  int ASN1_STRING_TABLE_add(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _ASN1_STRING_TABLE_add(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ASN1_STRING_TABLE_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Long, ffi.Long, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('ASN1_STRING_TABLE_add');
  late final _ASN1_STRING_TABLE_add = _ASN1_STRING_TABLE_addPtr.asFunction<
      int Function(int, int, int, int, int)>();

  void ASN1_STRING_TABLE_cleanup() {
    return _ASN1_STRING_TABLE_cleanup();
  }

  late final _ASN1_STRING_TABLE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_STRING_TABLE_cleanup');
  late final _ASN1_STRING_TABLE_cleanup =
      _ASN1_STRING_TABLE_cleanupPtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_new(
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_new(
      it,
    );
  }

  late final _ASN1_item_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_new');
  late final _ASN1_item_new = _ASN1_item_newPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_new_ex(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_new_ex(
      it,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_new_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_new_ex');
  late final _ASN1_item_new_ex = _ASN1_item_new_exPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>)>();

  void ASN1_item_free(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_free(
      val,
      it,
    );
  }

  late final _ASN1_item_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_free');
  late final _ASN1_item_free = _ASN1_item_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_d2i_ex(
    ffi.Pointer<ffi.Pointer<ASN1_VALUE>> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _ASN1_item_d2i_ex(
      val,
      in1,
      len,
      it,
      libctx,
      propq,
    );
  }

  late final _ASN1_item_d2i_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('ASN1_item_d2i_ex');
  late final _ASN1_item_d2i_ex = _ASN1_item_d2i_exPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_d2i(
    ffi.Pointer<ffi.Pointer<ASN1_VALUE>> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_d2i(
      val,
      in1,
      len,
      it,
    );
  }

  late final _ASN1_item_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_d2i');
  late final _ASN1_item_d2i = _ASN1_item_d2iPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_i2d');
  late final _ASN1_item_i2d = _ASN1_item_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_ndef_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_ndef_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_ndef_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_ndef_i2d');
  late final _ASN1_item_ndef_i2d = _ASN1_item_ndef_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  void ASN1_add_oid_module() {
    return _ASN1_add_oid_module();
  }

  late final _ASN1_add_oid_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ASN1_add_oid_module');
  late final _ASN1_add_oid_module =
      _ASN1_add_oid_modulePtr.asFunction<void Function()>();

  void ASN1_add_stable_module() {
    return _ASN1_add_stable_module();
  }

  late final _ASN1_add_stable_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_add_stable_module');
  late final _ASN1_add_stable_module =
      _ASN1_add_stable_modulePtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_nconf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<CONF> nconf,
  ) {
    return _ASN1_generate_nconf(
      str,
      nconf,
    );
  }

  late final _ASN1_generate_nconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<CONF>)>>('ASN1_generate_nconf');
  late final _ASN1_generate_nconf = _ASN1_generate_nconfPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<CONF>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_v3(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<X509V3_CTX> cnf,
  ) {
    return _ASN1_generate_v3(
      str,
      cnf,
    );
  }

  late final _ASN1_generate_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<X509V3_CTX>)>>('ASN1_generate_v3');
  late final _ASN1_generate_v3 = _ASN1_generate_v3Ptr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<X509V3_CTX>)>();

  int ASN1_str2mask(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedLong> pmask,
  ) {
    return _ASN1_str2mask(
      str,
      pmask,
    );
  }

  late final _ASN1_str2maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>)>>('ASN1_str2mask');
  late final _ASN1_str2mask = _ASN1_str2maskPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedLong>)>();

  int ASN1_item_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> ifld,
    int indent,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _ASN1_item_print(
      out,
      ifld,
      indent,
      it,
      pctx,
    );
  }

  late final _ASN1_item_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_item_print');
  late final _ASN1_item_print = _ASN1_item_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, int,
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_PCTX>)>();

  ffi.Pointer<ASN1_PCTX> ASN1_PCTX_new() {
    return _ASN1_PCTX_new();
  }

  late final _ASN1_PCTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PCTX> Function()>>(
          'ASN1_PCTX_new');
  late final _ASN1_PCTX_new =
      _ASN1_PCTX_newPtr.asFunction<ffi.Pointer<ASN1_PCTX> Function()>();

  void ASN1_PCTX_free(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_free(
      p,
    );
  }

  late final _ASN1_PCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_PCTX>)>>(
          'ASN1_PCTX_free');
  late final _ASN1_PCTX_free =
      _ASN1_PCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_PCTX>)>();

  int ASN1_PCTX_get_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_PCTX>)>>(
      'ASN1_PCTX_get_flags');
  late final _ASN1_PCTX_get_flags = _ASN1_PCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_flags');
  late final _ASN1_PCTX_set_flags = _ASN1_PCTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_nm_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_nm_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_PCTX>)>>(
      'ASN1_PCTX_get_nm_flags');
  late final _ASN1_PCTX_get_nm_flags = _ASN1_PCTX_get_nm_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_nm_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_nm_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_nm_flags');
  late final _ASN1_PCTX_set_nm_flags = _ASN1_PCTX_set_nm_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_cert_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_cert_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_PCTX>)>>(
      'ASN1_PCTX_get_cert_flags');
  late final _ASN1_PCTX_get_cert_flags = _ASN1_PCTX_get_cert_flagsPtr
      .asFunction<int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_cert_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_cert_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_cert_flags');
  late final _ASN1_PCTX_set_cert_flags = _ASN1_PCTX_set_cert_flagsPtr
      .asFunction<void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_oid_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_oid_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_PCTX>)>>(
      'ASN1_PCTX_get_oid_flags');
  late final _ASN1_PCTX_get_oid_flags = _ASN1_PCTX_get_oid_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_oid_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_oid_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_oid_flags');
  late final _ASN1_PCTX_set_oid_flags = _ASN1_PCTX_set_oid_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_str_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_str_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_PCTX>)>>(
      'ASN1_PCTX_get_str_flags');
  late final _ASN1_PCTX_get_str_flags = _ASN1_PCTX_get_str_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_str_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_str_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_str_flags');
  late final _ASN1_PCTX_set_str_flags = _ASN1_PCTX_set_str_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  ffi.Pointer<ASN1_SCTX> ASN1_SCTX_new(
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_SCTX> ctx)>>
        scan_cb,
  ) {
    return _ASN1_SCTX_new(
      scan_cb,
    );
  }

  late final _ASN1_SCTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SCTX> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ASN1_SCTX> ctx)>>)>>('ASN1_SCTX_new');
  late final _ASN1_SCTX_new = _ASN1_SCTX_newPtr.asFunction<
      ffi.Pointer<ASN1_SCTX> Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ASN1_SCTX> ctx)>>)>();

  void ASN1_SCTX_free(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_free(
      p,
    );
  }

  late final _ASN1_SCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_SCTX>)>>(
          'ASN1_SCTX_free');
  late final _ASN1_SCTX_free =
      _ASN1_SCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_SCTX_get_item(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_item(
      p,
    );
  }

  late final _ASN1_SCTX_get_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_item');
  late final _ASN1_SCTX_get_item = _ASN1_SCTX_get_itemPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_TEMPLATE> ASN1_SCTX_get_template(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_template(
      p,
    );
  }

  late final _ASN1_SCTX_get_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TEMPLATE> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_template');
  late final _ASN1_SCTX_get_template = _ASN1_SCTX_get_templatePtr.asFunction<
      ffi.Pointer<ASN1_TEMPLATE> Function(ffi.Pointer<ASN1_SCTX>)>();

  int ASN1_SCTX_get_flags(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_flags(
      p,
    );
  }

  late final _ASN1_SCTX_get_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ASN1_SCTX>)>>(
      'ASN1_SCTX_get_flags');
  late final _ASN1_SCTX_get_flags = _ASN1_SCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SCTX>)>();

  void ASN1_SCTX_set_app_data(
    ffi.Pointer<ASN1_SCTX> p,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ASN1_SCTX_set_app_data(
      p,
      data,
    );
  }

  late final _ASN1_SCTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_SCTX>,
              ffi.Pointer<ffi.Void>)>>('ASN1_SCTX_set_app_data');
  late final _ASN1_SCTX_set_app_data = _ASN1_SCTX_set_app_dataPtr.asFunction<
      void Function(ffi.Pointer<ASN1_SCTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_SCTX_get_app_data(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_app_data(
      p,
    );
  }

  late final _ASN1_SCTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_app_data');
  late final _ASN1_SCTX_get_app_data = _ASN1_SCTX_get_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<BIO_METHOD> BIO_f_asn1() {
    return _BIO_f_asn1();
  }

  late final _BIO_f_asn1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_asn1');
  late final _BIO_f_asn1 =
      _BIO_f_asn1Ptr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_NDEF(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _BIO_new_NDEF(
      out,
      val,
      it,
    );
  }

  late final _BIO_new_NDEFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('BIO_new_NDEF');
  late final _BIO_new_NDEF = _BIO_new_NDEFPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  int i2d_ASN1_bio_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _i2d_ASN1_bio_stream(
      out,
      val,
      in1,
      flags,
      it,
    );
  }

  late final _i2d_ASN1_bio_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>)>>('i2d_ASN1_bio_stream');
  late final _i2d_ASN1_bio_stream = _i2d_ASN1_bio_streamPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<BIO>,
          int, ffi.Pointer<ASN1_ITEM>)>();

  int PEM_write_bio_ASN1_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ffi.Char> hdr,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _PEM_write_bio_ASN1_stream(
      out,
      val,
      in1,
      flags,
      hdr,
      it,
    );
  }

  late final _PEM_write_bio_ASN1_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>>('PEM_write_bio_ASN1_stream');
  late final _PEM_write_bio_ASN1_stream =
      _PEM_write_bio_ASN1_streamPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_write_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> data,
    int flags,
    int ctype_nid,
    int econt_nid,
    ffi.Pointer<stack_st_X509_ALGOR> mdalgs,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_write_ASN1(
      bio,
      val,
      data,
      flags,
      ctype_nid,
      econt_nid,
      mdalgs,
      it,
    );
  }

  late final _SMIME_write_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<stack_st_X509_ALGOR>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_write_ASN1');
  late final _SMIME_write_ASN1 = _SMIME_write_ASN1Ptr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<BIO>,
          int,
          int,
          int,
          ffi.Pointer<stack_st_X509_ALGOR>,
          ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_write_ASN1_ex(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> data,
    int flags,
    int ctype_nid,
    int econt_nid,
    ffi.Pointer<stack_st_X509_ALGOR> mdalgs,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _SMIME_write_ASN1_ex(
      bio,
      val,
      data,
      flags,
      ctype_nid,
      econt_nid,
      mdalgs,
      it,
      libctx,
      propq,
    );
  }

  late final _SMIME_write_ASN1_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<stack_st_X509_ALGOR>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('SMIME_write_ASN1_ex');
  late final _SMIME_write_ASN1_ex = _SMIME_write_ASN1_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<BIO>,
          int,
          int,
          int,
          ffi.Pointer<stack_st_X509_ALGOR>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_VALUE> SMIME_read_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<BIO>> bcont,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_read_ASN1(
      bio,
      bcont,
      it,
    );
  }

  late final _SMIME_read_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_read_ASN1');
  late final _SMIME_read_ASN1 = _SMIME_read_ASN1Ptr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<BIO>>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> SMIME_read_ASN1_ex(
    ffi.Pointer<BIO> bio,
    int flags,
    ffi.Pointer<ffi.Pointer<BIO>> bcont,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Pointer<ASN1_VALUE>> x,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _SMIME_read_ASN1_ex(
      bio,
      flags,
      bcont,
      it,
      x,
      libctx,
      propq,
    );
  }

  late final _SMIME_read_ASN1_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('SMIME_read_ASN1_ex');
  late final _SMIME_read_ASN1_ex = _SMIME_read_ASN1_exPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(
          ffi.Pointer<BIO>,
          int,
          ffi.Pointer<ffi.Pointer<BIO>>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int SMIME_crlf_copy(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
    int flags,
  ) {
    return _SMIME_crlf_copy(
      in1,
      out,
      flags,
    );
  }

  late final _SMIME_crlf_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>, ffi.Int)>>('SMIME_crlf_copy');
  late final _SMIME_crlf_copy = _SMIME_crlf_copyPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>, int)>();

  int SMIME_text(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
  ) {
    return _SMIME_text(
      in1,
      out,
    );
  }

  late final _SMIME_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('SMIME_text');
  late final _SMIME_text = _SMIME_textPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_lookup(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ASN1_ITEM_lookup(
      name,
    );
  }

  late final _ASN1_ITEM_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ffi.Char>)>>('ASN1_ITEM_lookup');
  late final _ASN1_ITEM_lookup = _ASN1_ITEM_lookupPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_get(
    int i,
  ) {
    return _ASN1_ITEM_get(
      i,
    );
  }

  late final _ASN1_ITEM_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function(ffi.Size)>>(
          'ASN1_ITEM_get');
  late final _ASN1_ITEM_get =
      _ASN1_ITEM_getPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function(int)>();

  int OBJ_NAME_init() {
    return _OBJ_NAME_init();
  }

  late final _OBJ_NAME_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OBJ_NAME_init');
  late final _OBJ_NAME_init = _OBJ_NAME_initPtr.asFunction<int Function()>();

  int OBJ_NAME_new_index(
    ffi.Pointer<
            ffi
            .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>
        hash_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
        cmp_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>
        free_func,
  ) {
    return _OBJ_NAME_new_index(
      hash_func,
      cmp_func,
      free_func,
    );
  }

  late final _OBJ_NAME_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                          ffi.Pointer<ffi.Char>)>>)>>('OBJ_NAME_new_index');
  late final _OBJ_NAME_new_index = _OBJ_NAME_new_indexPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                      ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<ffi.Char> OBJ_NAME_get(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_get(
      name,
      type,
    );
  }

  late final _OBJ_NAME_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_NAME_get');
  late final _OBJ_NAME_get = _OBJ_NAME_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_NAME_add(
    ffi.Pointer<ffi.Char> name,
    int type,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _OBJ_NAME_add(
      name,
      type,
      data,
    );
  }

  late final _OBJ_NAME_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('OBJ_NAME_add');
  late final _OBJ_NAME_add = _OBJ_NAME_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int OBJ_NAME_remove(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_remove(
      name,
      type,
    );
  }

  late final _OBJ_NAME_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'OBJ_NAME_remove');
  late final _OBJ_NAME_remove = _OBJ_NAME_removePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  void OBJ_NAME_cleanup(
    int type,
  ) {
    return _OBJ_NAME_cleanup(
      type,
    );
  }

  late final _OBJ_NAME_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'OBJ_NAME_cleanup');
  late final _OBJ_NAME_cleanup =
      _OBJ_NAME_cleanupPtr.asFunction<void Function(int)>();

  void OBJ_NAME_do_all(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all');
  late final _OBJ_NAME_do_all = _OBJ_NAME_do_allPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void OBJ_NAME_do_all_sorted(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all_sorted(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all_sorted');
  late final _OBJ_NAME_do_all_sorted = _OBJ_NAME_do_all_sortedPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_dup(
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _OBJ_dup(
      a,
    );
  }

  late final _OBJ_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_dup');
  late final _OBJ_dup = _OBJ_dupPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_nid2obj(
    int n,
  ) {
    return _OBJ_nid2obj(
      n,
    );
  }

  late final _OBJ_nid2objPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function(ffi.Int)>>(
          'OBJ_nid2obj');
  late final _OBJ_nid2obj =
      _OBJ_nid2objPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2ln(
    int n,
  ) {
    return _OBJ_nid2ln(
      n,
    );
  }

  late final _OBJ_nid2lnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2ln');
  late final _OBJ_nid2ln =
      _OBJ_nid2lnPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2sn(
    int n,
  ) {
    return _OBJ_nid2sn(
      n,
    );
  }

  late final _OBJ_nid2snPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2sn');
  late final _OBJ_nid2sn =
      _OBJ_nid2snPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OBJ_obj2nid(
    ffi.Pointer<ASN1_OBJECT> o,
  ) {
    return _OBJ_obj2nid(
      o,
    );
  }

  late final _OBJ_obj2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_obj2nid');
  late final _OBJ_obj2nid =
      _OBJ_obj2nidPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_txt2obj(
    ffi.Pointer<ffi.Char> s,
    int no_name,
  ) {
    return _OBJ_txt2obj(
      s,
      no_name,
    );
  }

  late final _OBJ_txt2objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_txt2obj');
  late final _OBJ_txt2obj = _OBJ_txt2objPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_obj2txt(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
    int no_name,
  ) {
    return _OBJ_obj2txt(
      buf,
      buf_len,
      a,
      no_name,
    );
  }

  late final _OBJ_obj2txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>, ffi.Int)>>('OBJ_obj2txt');
  late final _OBJ_obj2txt = _OBJ_obj2txtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>, int)>();

  int OBJ_txt2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_txt2nid(
      s,
    );
  }

  late final _OBJ_txt2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_txt2nid');
  late final _OBJ_txt2nid =
      _OBJ_txt2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_ln2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_ln2nid(
      s,
    );
  }

  late final _OBJ_ln2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_ln2nid');
  late final _OBJ_ln2nid =
      _OBJ_ln2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_sn2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_sn2nid(
      s,
    );
  }

  late final _OBJ_sn2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_sn2nid');
  late final _OBJ_sn2nid =
      _OBJ_sn2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_cmp(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ASN1_OBJECT> b,
  ) {
    return _OBJ_cmp(
      a,
      b,
    );
  }

  late final _OBJ_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>>('OBJ_cmp');
  late final _OBJ_cmp = _OBJ_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
  ) {
    return _OBJ_bsearch_(
      key,
      base,
      num,
      size,
      cmp,
    );
  }

  late final _OBJ_bsearch_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('OBJ_bsearch_');
  late final _OBJ_bsearch_ = _OBJ_bsearch_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_ex_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
    int flags,
  ) {
    return _OBJ_bsearch_ex_(
      key,
      base,
      num,
      size,
      cmp,
      flags,
    );
  }

  late final _OBJ_bsearch_ex_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Int)>>('OBJ_bsearch_ex_');
  late final _OBJ_bsearch_ex_ = _OBJ_bsearch_ex_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
          int)>();

  int OBJ_new_nid(
    int num,
  ) {
    return _OBJ_new_nid(
      num,
    );
  }

  late final _OBJ_new_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OBJ_new_nid');
  late final _OBJ_new_nid = _OBJ_new_nidPtr.asFunction<int Function(int)>();

  int OBJ_add_object(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_add_object(
      obj,
    );
  }

  late final _OBJ_add_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_add_object');
  late final _OBJ_add_object =
      _OBJ_add_objectPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_create(
    ffi.Pointer<ffi.Char> oid,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _OBJ_create(
      oid,
      sn,
      ln,
    );
  }

  late final _OBJ_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('OBJ_create');
  late final _OBJ_create = _OBJ_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int OBJ_create_objects(
    ffi.Pointer<BIO> in1,
  ) {
    return _OBJ_create_objects(
      in1,
    );
  }

  late final _OBJ_create_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'OBJ_create_objects');
  late final _OBJ_create_objects =
      _OBJ_create_objectsPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int OBJ_length(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_length(
      obj,
    );
  }

  late final _OBJ_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_length');
  late final _OBJ_length =
      _OBJ_lengthPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.UnsignedChar> OBJ_get0_data(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_get0_data(
      obj,
    );
  }

  late final _OBJ_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_get0_data');
  late final _OBJ_get0_data = _OBJ_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_find_sigid_algs(
    int signid,
    ffi.Pointer<ffi.Int> pdig_nid,
    ffi.Pointer<ffi.Int> ppkey_nid,
  ) {
    return _OBJ_find_sigid_algs(
      signid,
      pdig_nid,
      ppkey_nid,
    );
  }

  late final _OBJ_find_sigid_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('OBJ_find_sigid_algs');
  late final _OBJ_find_sigid_algs = _OBJ_find_sigid_algsPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int OBJ_find_sigid_by_algs(
    ffi.Pointer<ffi.Int> psignid,
    int dig_nid,
    int pkey_nid,
  ) {
    return _OBJ_find_sigid_by_algs(
      psignid,
      dig_nid,
      pkey_nid,
    );
  }

  late final _OBJ_find_sigid_by_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Int)>>('OBJ_find_sigid_by_algs');
  late final _OBJ_find_sigid_by_algs = _OBJ_find_sigid_by_algsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, int)>();

  int OBJ_add_sigid(
    int signid,
    int dig_id,
    int pkey_id,
  ) {
    return _OBJ_add_sigid(
      signid,
      dig_id,
      pkey_id,
    );
  }

  late final _OBJ_add_sigidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'OBJ_add_sigid');
  late final _OBJ_add_sigid =
      _OBJ_add_sigidPtr.asFunction<int Function(int, int, int)>();

  void OBJ_sigid_free() {
    return _OBJ_sigid_free();
  }

  late final _OBJ_sigid_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OBJ_sigid_free');
  late final _OBJ_sigid_free = _OBJ_sigid_freePtr.asFunction<void Function()>();

  int EVP_set_default_properties(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_set_default_properties(
      libctx,
      propq,
    );
  }

  late final _EVP_set_default_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_set_default_properties');
  late final _EVP_set_default_properties =
      _EVP_set_default_propertiesPtr.asFunction<
          int Function(ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>)>();

  int EVP_default_properties_is_fips_enabled(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
  ) {
    return _EVP_default_properties_is_fips_enabled(
      libctx,
    );
  }

  late final _EVP_default_properties_is_fips_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_LIB_CTX>)>>(
          'EVP_default_properties_is_fips_enabled');
  late final _EVP_default_properties_is_fips_enabled =
      _EVP_default_properties_is_fips_enabledPtr.asFunction<
          int Function(ffi.Pointer<OSSL_LIB_CTX>)>();

  int EVP_default_properties_enable_fips(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    int enable,
  ) {
    return _EVP_default_properties_enable_fips(
      libctx,
      enable,
    );
  }

  late final _EVP_default_properties_enable_fipsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Int)>>('EVP_default_properties_enable_fips');
  late final _EVP_default_properties_enable_fips =
      _EVP_default_properties_enable_fipsPtr.asFunction<
          int Function(ffi.Pointer<OSSL_LIB_CTX>, int)>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_new(
    int md_type,
    int pkey_type,
  ) {
    return _EVP_MD_meth_new(
      md_type,
      pkey_type,
    );
  }

  late final _EVP_MD_meth_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Int, ffi.Int)>>(
      'EVP_MD_meth_new');
  late final _EVP_MD_meth_new =
      _EVP_MD_meth_newPtr.asFunction<ffi.Pointer<EVP_MD> Function(int, int)>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_dup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_dup(
      md,
    );
  }

  late final _EVP_MD_meth_dupPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_meth_dup');
  late final _EVP_MD_meth_dup = _EVP_MD_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD>)>();

  void EVP_MD_meth_free(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_free(
      md,
    );
  }

  late final _EVP_MD_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_free');
  late final _EVP_MD_meth_free =
      _EVP_MD_meth_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_set_input_blocksize(
    ffi.Pointer<EVP_MD> md,
    int blocksize,
  ) {
    return _EVP_MD_meth_set_input_blocksize(
      md,
      blocksize,
    );
  }

  late final _EVP_MD_meth_set_input_blocksizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_input_blocksize');
  late final _EVP_MD_meth_set_input_blocksize =
      _EVP_MD_meth_set_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_result_size(
    ffi.Pointer<EVP_MD> md,
    int resultsize,
  ) {
    return _EVP_MD_meth_set_result_size(
      md,
      resultsize,
    );
  }

  late final _EVP_MD_meth_set_result_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_result_size');
  late final _EVP_MD_meth_set_result_size = _EVP_MD_meth_set_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_app_datasize(
    ffi.Pointer<EVP_MD> md,
    int datasize,
  ) {
    return _EVP_MD_meth_set_app_datasize(
      md,
      datasize,
    );
  }

  late final _EVP_MD_meth_set_app_datasizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_app_datasize');
  late final _EVP_MD_meth_set_app_datasize = _EVP_MD_meth_set_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_flags(
    ffi.Pointer<EVP_MD> md,
    int flags,
  ) {
    return _EVP_MD_meth_set_flags(
      md,
      flags,
    );
  }

  late final _EVP_MD_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>, ffi.UnsignedLong)>>('EVP_MD_meth_set_flags');
  late final _EVP_MD_meth_set_flags = _EVP_MD_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_init(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>
        init,
  ) {
    return _EVP_MD_meth_set_init(
      md,
      init,
    );
  }

  late final _EVP_MD_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>>(
      'EVP_MD_meth_set_init');
  late final _EVP_MD_meth_set_init = _EVP_MD_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>();

  int EVP_MD_meth_set_update(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.Void> data, ffi.Size count)>>
        update,
  ) {
    return _EVP_MD_meth_set_update(
      md,
      update,
    );
  }

  late final _EVP_MD_meth_set_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data,
                          ffi.Size count)>>)>>('EVP_MD_meth_set_update');
  late final _EVP_MD_meth_set_update = _EVP_MD_meth_set_updatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ffi.Void> data, ffi.Size count)>>)>();

  int EVP_MD_meth_set_final(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> md)>>
        final1,
  ) {
    return _EVP_MD_meth_set_final(
      md,
      final1,
    );
  }

  late final _EVP_MD_meth_set_finalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> md)>>)>>(
      'EVP_MD_meth_set_final');
  late final _EVP_MD_meth_set_final = _EVP_MD_meth_set_finalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ffi.UnsignedChar> md)>>)>();

  int EVP_MD_meth_set_copy(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> to, ffi.Pointer<EVP_MD_CTX> from)>>
        copy,
  ) {
    return _EVP_MD_meth_set_copy(
      md,
      copy,
    );
  }

  late final _EVP_MD_meth_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> to,
                              ffi.Pointer<EVP_MD_CTX> from)>>)>>(
      'EVP_MD_meth_set_copy');
  late final _EVP_MD_meth_set_copy = _EVP_MD_meth_set_copyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> to,
                      ffi.Pointer<EVP_MD_CTX> from)>>)>();

  int EVP_MD_meth_set_cleanup(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>
        cleanup,
  ) {
    return _EVP_MD_meth_set_cleanup(
      md,
      cleanup,
    );
  }

  late final _EVP_MD_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>>(
      'EVP_MD_meth_set_cleanup');
  late final _EVP_MD_meth_set_cleanup = _EVP_MD_meth_set_cleanupPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>();

  int EVP_MD_meth_set_ctrl(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Int cmd,
                    ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>
        ctrl,
  ) {
    return _EVP_MD_meth_set_ctrl(
      md,
      ctrl,
    );
  }

  late final _EVP_MD_meth_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Int cmd,
                              ffi.Int p1,
                              ffi.Pointer<ffi.Void> p2)>>)>>(
      'EVP_MD_meth_set_ctrl');
  late final _EVP_MD_meth_set_ctrl = _EVP_MD_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Int cmd,
                      ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>)>();

  int EVP_MD_meth_get_input_blocksize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_input_blocksize(
      md,
    );
  }

  late final _EVP_MD_meth_get_input_blocksizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_input_blocksize');
  late final _EVP_MD_meth_get_input_blocksize =
      _EVP_MD_meth_get_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_result_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_result_size(
      md,
    );
  }

  late final _EVP_MD_meth_get_result_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_result_size');
  late final _EVP_MD_meth_get_result_size = _EVP_MD_meth_get_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_app_datasize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_app_datasize(
      md,
    );
  }

  late final _EVP_MD_meth_get_app_datasizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_app_datasize');
  late final _EVP_MD_meth_get_app_datasize = _EVP_MD_meth_get_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_flags(
      md,
    );
  }

  late final _EVP_MD_meth_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_meth_get_flags');
  late final _EVP_MD_meth_get_flags =
      _EVP_MD_meth_get_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_init(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_init(
      md,
    );
  }

  late final _EVP_MD_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_init');
  late final _EVP_MD_meth_get_init = _EVP_MD_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      EVP_MD_meth_get_update(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_update(
      md,
    );
  }

  late final _EVP_MD_meth_get_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Size)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_update');
  late final _EVP_MD_meth_get_update = _EVP_MD_meth_get_updatePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.Void>, ffi.Size)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
      EVP_MD_meth_get_final(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_final(
      md,
    );
  }

  late final _EVP_MD_meth_get_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_final');
  late final _EVP_MD_meth_get_final = _EVP_MD_meth_get_finalPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_copy(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_copy(
      md,
    );
  }

  late final _EVP_MD_meth_get_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_copy');
  late final _EVP_MD_meth_get_copy = _EVP_MD_meth_get_copyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_cleanup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_cleanup(
      md,
    );
  }

  late final _EVP_MD_meth_get_cleanupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_cleanup');
  late final _EVP_MD_meth_get_cleanup = _EVP_MD_meth_get_cleanupPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_MD_meth_get_ctrl(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_ctrl(
      md,
    );
  }

  late final _EVP_MD_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_ctrl');
  late final _EVP_MD_meth_get_ctrl = _EVP_MD_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_new(
    int cipher_type,
    int block_size,
    int key_len,
  ) {
    return _EVP_CIPHER_meth_new(
      cipher_type,
      block_size,
      key_len,
    );
  }

  late final _EVP_CIPHER_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Int, ffi.Int, ffi.Int)>>('EVP_CIPHER_meth_new');
  late final _EVP_CIPHER_meth_new = _EVP_CIPHER_meth_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(int, int, int)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_dup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_dup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_dup');
  late final _EVP_CIPHER_meth_dup = _EVP_CIPHER_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER>)>();

  void EVP_CIPHER_meth_free(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_free(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_meth_free');
  late final _EVP_CIPHER_meth_free = _EVP_CIPHER_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_meth_set_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
    int iv_len,
  ) {
    return _EVP_CIPHER_meth_set_iv_length(
      cipher,
      iv_len,
    );
  }

  late final _EVP_CIPHER_meth_set_iv_lengthPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>, ffi.Int)>>(
      'EVP_CIPHER_meth_set_iv_length');
  late final _EVP_CIPHER_meth_set_iv_length = _EVP_CIPHER_meth_set_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
    int flags,
  ) {
    return _EVP_CIPHER_meth_set_flags(
      cipher,
      flags,
    );
  }

  late final _EVP_CIPHER_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.UnsignedLong)>>('EVP_CIPHER_meth_set_flags');
  late final _EVP_CIPHER_meth_set_flags = _EVP_CIPHER_meth_set_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
    int ctx_size,
  ) {
    return _EVP_CIPHER_meth_set_impl_ctx_size(
      cipher,
      ctx_size,
    );
  }

  late final _EVP_CIPHER_meth_set_impl_ctx_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>, ffi.Int)>>(
      'EVP_CIPHER_meth_set_impl_ctx_size');
  late final _EVP_CIPHER_meth_set_impl_ctx_size =
      _EVP_CIPHER_meth_set_impl_ctx_sizePtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_init(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> key,
                    ffi.Pointer<ffi.UnsignedChar> iv,
                    ffi.Int enc)>>
        init,
  ) {
    return _EVP_CIPHER_meth_set_init(
      cipher,
      init,
    );
  }

  late final _EVP_CIPHER_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.UnsignedChar> iv,
                          ffi.Int enc)>>)>>('EVP_CIPHER_meth_set_init');
  late final _EVP_CIPHER_meth_set_init =
      _EVP_CIPHER_meth_set_initPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.UnsignedChar> iv,
                          ffi.Int enc)>>)>();

  int EVP_CIPHER_meth_set_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inl)>>
        do_cipher,
  ) {
    return _EVP_CIPHER_meth_set_do_cipher(
      cipher,
      do_cipher,
    );
  }

  late final _EVP_CIPHER_meth_set_do_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inl)>>)>>('EVP_CIPHER_meth_set_do_cipher');
  late final _EVP_CIPHER_meth_set_do_cipher =
      _EVP_CIPHER_meth_set_do_cipherPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inl)>>)>();

  int EVP_CIPHER_meth_set_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
        cleanup,
  ) {
    return _EVP_CIPHER_meth_set_cleanup(
      cipher,
      cleanup,
    );
  }

  late final _EVP_CIPHER_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>>(
      'EVP_CIPHER_meth_set_cleanup');
  late final _EVP_CIPHER_meth_set_cleanup =
      _EVP_CIPHER_meth_set_cleanupPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>();

  int EVP_CIPHER_meth_set_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        set_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_set_asn1_params(
      cipher,
      set_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_set_asn1_params');
  late final _EVP_CIPHER_meth_set_set_asn1_params =
      _EVP_CIPHER_meth_set_set_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        get_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_get_asn1_params(
      cipher,
      get_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_get_asn1_params');
  late final _EVP_CIPHER_meth_set_get_asn1_params =
      _EVP_CIPHER_meth_set_get_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _EVP_CIPHER_meth_set_ctrl(
      cipher,
      ctrl,
    );
  }

  late final _EVP_CIPHER_meth_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                              ffi.Int, ffi.Pointer<ffi.Void>)>>)>>(
      'EVP_CIPHER_meth_set_ctrl');
  late final _EVP_CIPHER_meth_set_ctrl =
      _EVP_CIPHER_meth_set_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>> EVP_CIPHER_meth_get_init(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_init(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_init');
  late final _EVP_CIPHER_meth_get_init =
      _EVP_CIPHER_meth_get_initPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>> EVP_CIPHER_meth_get_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_do_cipher(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_do_cipherPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Size)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_do_cipher');
  late final _EVP_CIPHER_meth_get_do_cipher =
      _EVP_CIPHER_meth_get_do_cipherPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Size)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
      EVP_CIPHER_meth_get_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_cleanup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_cleanup');
  late final _EVP_CIPHER_meth_get_cleanup =
      _EVP_CIPHER_meth_get_cleanupPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_set_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_set_asn1_params');
  late final _EVP_CIPHER_meth_get_set_asn1_params =
      _EVP_CIPHER_meth_get_set_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_get_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_get_asn1_params');
  late final _EVP_CIPHER_meth_get_get_asn1_params =
      _EVP_CIPHER_meth_get_get_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_CIPHER_meth_get_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_ctrl(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_ctrl');
  late final _EVP_CIPHER_meth_get_ctrl =
      _EVP_CIPHER_meth_get_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_MD_get_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get_type(
      md,
    );
  }

  late final _EVP_MD_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_get_type');
  late final _EVP_MD_get_type =
      _EVP_MD_get_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.Char> EVP_MD_get0_name(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get0_name(
      md,
    );
  }

  late final _EVP_MD_get0_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_get0_name');
  late final _EVP_MD_get0_name = _EVP_MD_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.Char> EVP_MD_get0_description(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get0_description(
      md,
    );
  }

  late final _EVP_MD_get0_descriptionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_get0_description');
  late final _EVP_MD_get0_description = _EVP_MD_get0_descriptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_is_a(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_MD_is_a(
      md,
      name,
    );
  }

  late final _EVP_MD_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>)>>('EVP_MD_is_a');
  late final _EVP_MD_is_a = _EVP_MD_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>)>();

  int EVP_MD_names_do_all(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_MD_names_do_all(
      md,
      fn,
      data,
    );
  }

  late final _EVP_MD_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_names_do_all');
  late final _EVP_MD_names_do_all = _EVP_MD_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_MD_get0_provider(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get0_provider(
      md,
    );
  }

  late final _EVP_MD_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_get0_provider');
  late final _EVP_MD_get0_provider = _EVP_MD_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_get_pkey_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get_pkey_type(
      md,
    );
  }

  late final _EVP_MD_get_pkey_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_get_pkey_type');
  late final _EVP_MD_get_pkey_type =
      _EVP_MD_get_pkey_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_get_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get_size(
      md,
    );
  }

  late final _EVP_MD_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_get_size');
  late final _EVP_MD_get_size =
      _EVP_MD_get_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_get_block_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get_block_size(
      md,
    );
  }

  late final _EVP_MD_get_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_get_block_size');
  late final _EVP_MD_get_block_size =
      _EVP_MD_get_block_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_get_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_get_flags(
      md,
    );
  }

  late final _EVP_MD_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_get_flags');
  late final _EVP_MD_get_flags =
      _EVP_MD_get_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_xof(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_xof(
      md,
    );
  }

  late final _EVP_MD_xofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_xof');
  late final _EVP_MD_xof =
      _EVP_MD_xofPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_get0_md(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_get0_md(
      ctx,
    );
  }

  late final _EVP_MD_CTX_get0_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_get0_md');
  late final _EVP_MD_CTX_get0_md = _EVP_MD_CTX_get0_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_get1_md(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_get1_md(
      ctx,
    );
  }

  late final _EVP_MD_CTX_get1_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_get1_md');
  late final _EVP_MD_CTX_get1_md = _EVP_MD_CTX_get1_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_md(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_md(
      ctx,
    );
  }

  late final _EVP_MD_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_md');
  late final _EVP_MD_CTX_md = _EVP_MD_CTX_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      EVP_MD_CTX_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_update_fn(
      ctx,
    );
  }

  late final _EVP_MD_CTX_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Size)>>
              Function(ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_update_fn');
  late final _EVP_MD_CTX_update_fn = _EVP_MD_CTX_update_fnPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.Void>, ffi.Size)>>
          Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.Void> data, ffi.Size count)>>
        update,
  ) {
    return _EVP_MD_CTX_set_update_fn(
      ctx,
      update,
    );
  }

  late final _EVP_MD_CTX_set_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data,
                          ffi.Size count)>>)>>('EVP_MD_CTX_set_update_fn');
  late final _EVP_MD_CTX_set_update_fn =
      _EVP_MD_CTX_set_update_fnPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data, ffi.Size count)>>)>();

  int EVP_MD_CTX_get_size_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_get_size_ex(
      ctx,
    );
  }

  late final _EVP_MD_CTX_get_size_exPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_get_size_ex');
  late final _EVP_MD_CTX_get_size_ex = _EVP_MD_CTX_get_size_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_MD_CTX_get_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_get_pkey_ctx(
      ctx,
    );
  }

  late final _EVP_MD_CTX_get_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_get_pkey_ctx');
  late final _EVP_MD_CTX_get_pkey_ctx = _EVP_MD_CTX_get_pkey_ctxPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_PKEY_CTX> pctx,
  ) {
    return _EVP_MD_CTX_set_pkey_ctx(
      ctx,
      pctx,
    );
  }

  late final _EVP_MD_CTX_set_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_MD_CTX_set_pkey_ctx');
  late final _EVP_MD_CTX_set_pkey_ctx = _EVP_MD_CTX_set_pkey_ctxPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_MD_CTX_get0_md_data(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_get0_md_data(
      ctx,
    );
  }

  late final _EVP_MD_CTX_get0_md_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_get0_md_data');
  late final _EVP_MD_CTX_get0_md_data = _EVP_MD_CTX_get0_md_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_CIPHER_get_nid(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_nid(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_nid');
  late final _EVP_CIPHER_get_nid = _EVP_CIPHER_get_nidPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<ffi.Char> EVP_CIPHER_get0_name(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get0_name(
      cipher,
    );
  }

  late final _EVP_CIPHER_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_get0_name');
  late final _EVP_CIPHER_get0_name = _EVP_CIPHER_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<ffi.Char> EVP_CIPHER_get0_description(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get0_description(
      cipher,
    );
  }

  late final _EVP_CIPHER_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_get0_description');
  late final _EVP_CIPHER_get0_description = _EVP_CIPHER_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_is_a(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_CIPHER_is_a(
      cipher,
      name,
    );
  }

  late final _EVP_CIPHER_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>)>>('EVP_CIPHER_is_a');
  late final _EVP_CIPHER_is_a = _EVP_CIPHER_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>, ffi.Pointer<ffi.Char>)>();

  int EVP_CIPHER_names_do_all(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_CIPHER_names_do_all(
      cipher,
      fn,
      data,
    );
  }

  late final _EVP_CIPHER_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_names_do_all');
  late final _EVP_CIPHER_names_do_all = _EVP_CIPHER_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_CIPHER_get0_provider(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get0_provider(
      cipher,
    );
  }

  late final _EVP_CIPHER_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_get0_provider');
  late final _EVP_CIPHER_get0_provider =
      _EVP_CIPHER_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_block_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_block_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_block_size');
  late final _EVP_CIPHER_get_block_size = _EVP_CIPHER_get_block_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_impl_ctx_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_impl_ctx_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_impl_ctx_size');
  late final _EVP_CIPHER_impl_ctx_size = _EVP_CIPHER_impl_ctx_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_key_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_key_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_key_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_key_length');
  late final _EVP_CIPHER_get_key_length = _EVP_CIPHER_get_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_iv_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_iv_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_iv_length');
  late final _EVP_CIPHER_get_iv_length = _EVP_CIPHER_get_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_flags(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_get_flags');
  late final _EVP_CIPHER_get_flags = _EVP_CIPHER_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_mode(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_mode(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_mode');
  late final _EVP_CIPHER_get_mode = _EVP_CIPHER_get_modePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_get_type(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_get_type(
      cipher,
    );
  }

  late final _EVP_CIPHER_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_get_type');
  late final _EVP_CIPHER_get_type = _EVP_CIPHER_get_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_CIPHER_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_CIPHER_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_CIPHER_fetch');
  late final _EVP_CIPHER_fetch = _EVP_CIPHER_fetchPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_CIPHER_up_ref(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_up_ref(
      cipher,
    );
  }

  late final _EVP_CIPHER_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_up_ref');
  late final _EVP_CIPHER_up_ref =
      _EVP_CIPHER_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  void EVP_CIPHER_free(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_free(
      cipher,
    );
  }

  late final _EVP_CIPHER_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_free');
  late final _EVP_CIPHER_free =
      _EVP_CIPHER_freePtr.asFunction<void Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_get0_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get0_cipher(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get0_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get0_cipher');
  late final _EVP_CIPHER_CTX_get0_cipher =
      _EVP_CIPHER_CTX_get0_cipherPtr.asFunction<
          ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_get1_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get1_cipher(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get1_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get1_cipher');
  late final _EVP_CIPHER_CTX_get1_cipher =
      _EVP_CIPHER_CTX_get1_cipherPtr.asFunction<
          ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_is_encrypting(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_is_encrypting(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_is_encryptingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_is_encrypting');
  late final _EVP_CIPHER_CTX_is_encrypting = _EVP_CIPHER_CTX_is_encryptingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_nid(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_nid(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_nidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_nid');
  late final _EVP_CIPHER_CTX_get_nid = _EVP_CIPHER_CTX_get_nidPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_block_size(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_block_size(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_block_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_block_size');
  late final _EVP_CIPHER_CTX_get_block_size = _EVP_CIPHER_CTX_get_block_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_key_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_key_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_key_length');
  late final _EVP_CIPHER_CTX_get_key_length = _EVP_CIPHER_CTX_get_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_iv_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_iv_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_iv_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_iv_length');
  late final _EVP_CIPHER_CTX_get_iv_length = _EVP_CIPHER_CTX_get_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_tag_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_tag_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_tag_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_tag_length');
  late final _EVP_CIPHER_CTX_get_tag_length = _EVP_CIPHER_CTX_get_tag_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_cipher(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_cipher');
  late final _EVP_CIPHER_CTX_cipher = _EVP_CIPHER_CTX_cipherPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv');
  late final _EVP_CIPHER_CTX_iv = _EVP_CIPHER_CTX_ivPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_original_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_original_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_original_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_original_iv');
  late final _EVP_CIPHER_CTX_original_iv =
      _EVP_CIPHER_CTX_original_ivPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_iv_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv_noconst');
  late final _EVP_CIPHER_CTX_iv_noconst =
      _EVP_CIPHER_CTX_iv_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_updated_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _EVP_CIPHER_CTX_get_updated_iv(
      ctx,
      buf,
      len,
    );
  }

  late final _EVP_CIPHER_CTX_get_updated_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_CIPHER_CTX_get_updated_iv');
  late final _EVP_CIPHER_CTX_get_updated_iv =
      _EVP_CIPHER_CTX_get_updated_ivPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_CIPHER_CTX_get_original_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _EVP_CIPHER_CTX_get_original_iv(
      ctx,
      buf,
      len,
    );
  }

  late final _EVP_CIPHER_CTX_get_original_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_CIPHER_CTX_get_original_iv');
  late final _EVP_CIPHER_CTX_get_original_iv =
      _EVP_CIPHER_CTX_get_original_ivPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_buf_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_buf_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_buf_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_buf_noconst');
  late final _EVP_CIPHER_CTX_buf_noconst =
      _EVP_CIPHER_CTX_buf_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_get_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_num(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_get_num');
  late final _EVP_CIPHER_CTX_get_num = _EVP_CIPHER_CTX_get_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_set_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int num,
  ) {
    return _EVP_CIPHER_CTX_set_num(
      ctx,
      num,
    );
  }

  late final _EVP_CIPHER_CTX_set_numPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int)>>('EVP_CIPHER_CTX_set_num');
  late final _EVP_CIPHER_CTX_set_num = _EVP_CIPHER_CTX_set_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  ffi.Pointer<EVP_CIPHER_CTX> EVP_CIPHER_CTX_dup(
    ffi.Pointer<EVP_CIPHER_CTX> in1,
  ) {
    return _EVP_CIPHER_CTX_dup(
      in1,
    );
  }

  late final _EVP_CIPHER_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER_CTX> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_dup');
  late final _EVP_CIPHER_CTX_dup = _EVP_CIPHER_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_CIPHER_CTX> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_copy(
    ffi.Pointer<EVP_CIPHER_CTX> out,
    ffi.Pointer<EVP_CIPHER_CTX> in1,
  ) {
    return _EVP_CIPHER_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_CIPHER_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_copy');
  late final _EVP_CIPHER_CTX_copy = _EVP_CIPHER_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_app_data');
  late final _EVP_CIPHER_CTX_get_app_data =
      _EVP_CIPHER_CTX_get_app_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_set_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_CIPHER_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_CIPHER_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_app_data');
  late final _EVP_CIPHER_CTX_set_app_data =
      _EVP_CIPHER_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_cipher_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_cipher_data');
  late final _EVP_CIPHER_CTX_get_cipher_data =
      _EVP_CIPHER_CTX_get_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_set_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> cipher_data,
  ) {
    return _EVP_CIPHER_CTX_set_cipher_data(
      ctx,
      cipher_data,
    );
  }

  late final _EVP_CIPHER_CTX_set_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_cipher_data');
  late final _EVP_CIPHER_CTX_set_cipher_data =
      _EVP_CIPHER_CTX_set_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  int EVP_Cipher(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_Cipher(
      c,
      out,
      in1,
      inl,
    );
  }

  late final _EVP_CipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('EVP_Cipher');
  late final _EVP_Cipher = _EVP_CipherPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_MD_get_params(
    ffi.Pointer<EVP_MD> digest,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MD_get_params(
      digest,
      params,
    );
  }

  late final _EVP_MD_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MD_get_params');
  late final _EVP_MD_get_params = _EVP_MD_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_MD_CTX_set_params(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MD_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_MD_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MD_CTX_set_params');
  late final _EVP_MD_CTX_set_params = _EVP_MD_CTX_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_MD_CTX_get_params(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MD_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_MD_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MD_CTX_get_params');
  late final _EVP_MD_CTX_get_params = _EVP_MD_CTX_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MD_gettable_params(
    ffi.Pointer<EVP_MD> digest,
  ) {
    return _EVP_MD_gettable_params(
      digest,
    );
  }

  late final _EVP_MD_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_gettable_params');
  late final _EVP_MD_gettable_params = _EVP_MD_gettable_paramsPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MD_settable_ctx_params(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_settable_ctx_params(
      md,
    );
  }

  late final _EVP_MD_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_settable_ctx_params');
  late final _EVP_MD_settable_ctx_params = _EVP_MD_settable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MD_gettable_ctx_params(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_gettable_ctx_params(
      md,
    );
  }

  late final _EVP_MD_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_gettable_ctx_params');
  late final _EVP_MD_gettable_ctx_params = _EVP_MD_gettable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MD_CTX_settable_params(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_MD_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_settable_params');
  late final _EVP_MD_CTX_settable_params = _EVP_MD_CTX_settable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MD_CTX_gettable_params(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_MD_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_gettable_params');
  late final _EVP_MD_CTX_gettable_params = _EVP_MD_CTX_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_ctrl(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_MD_CTX_ctrl(
      ctx,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_MD_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_CTX_ctrl');
  late final _EVP_MD_CTX_ctrl = _EVP_MD_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_new() {
    return _EVP_MD_CTX_new();
  }

  late final _EVP_MD_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD_CTX> Function()>>(
          'EVP_MD_CTX_new');
  late final _EVP_MD_CTX_new =
      _EVP_MD_CTX_newPtr.asFunction<ffi.Pointer<EVP_MD_CTX> Function()>();

  int EVP_MD_CTX_reset(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_reset(
      ctx,
    );
  }

  late final _EVP_MD_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_reset');
  late final _EVP_MD_CTX_reset =
      _EVP_MD_CTX_resetPtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_free(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_free(
      ctx,
    );
  }

  late final _EVP_MD_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_free');
  late final _EVP_MD_CTX_free =
      _EVP_MD_CTX_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_dup(
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_dup(
      in1,
    );
  }

  late final _EVP_MD_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD_CTX> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_dup');
  late final _EVP_MD_CTX_dup = _EVP_MD_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_MD_CTX> Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_copy_ex(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy_ex(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copy_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy_ex');
  late final _EVP_MD_CTX_copy_ex = _EVP_MD_CTX_copy_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_set_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>(
      'EVP_MD_CTX_set_flags');
  late final _EVP_MD_CTX_set_flags = _EVP_MD_CTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  void EVP_MD_CTX_clear_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_clear_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>(
      'EVP_MD_CTX_clear_flags');
  late final _EVP_MD_CTX_clear_flags = _EVP_MD_CTX_clear_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_MD_CTX_test_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_test_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>(
      'EVP_MD_CTX_test_flags');
  late final _EVP_MD_CTX_test_flags = _EVP_MD_CTX_test_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_DigestInit_ex2(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_DigestInit_ex2(
      ctx,
      type,
      params,
    );
  }

  late final _EVP_DigestInit_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_DigestInit_ex2');
  late final _EVP_DigestInit_ex2 = _EVP_DigestInit_ex2Ptr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_DigestInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_DigestInit_ex(
      ctx,
      type,
      impl,
    );
  }

  late final _EVP_DigestInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_DigestInit_ex');
  late final _EVP_DigestInit_ex = _EVP_DigestInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>, ffi.Pointer<ENGINE>)>();

  int EVP_DigestUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> d,
    int cnt,
  ) {
    return _EVP_DigestUpdate(
      ctx,
      d,
      cnt,
    );
  }

  late final _EVP_DigestUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_DigestUpdate');
  late final _EVP_DigestUpdate = _EVP_DigestUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_DigestFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal_ex(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal_ex');
  late final _EVP_DigestFinal_ex = _EVP_DigestFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_Digest(
    ffi.Pointer<ffi.Void> data,
    int count,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> size,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_Digest(
      data,
      count,
      md,
      size,
      type,
      impl,
    );
  }

  late final _EVP_DigestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_Digest');
  late final _EVP_Digest = _EVP_DigestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>)>();

  int EVP_Q_digest(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<ffi.Void> data,
    int datalen,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.Size> mdlen,
  ) {
    return _EVP_Q_digest(
      libctx,
      name,
      propq,
      data,
      datalen,
      md,
      mdlen,
    );
  }

  late final _EVP_Q_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_Q_digest');
  late final _EVP_Q_digest = _EVP_Q_digestPtr.asFunction<
      int Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_MD_CTX_copy(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy');
  late final _EVP_MD_CTX_copy = _EVP_MD_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_DigestInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _EVP_DigestInit(
      ctx,
      type,
    );
  }

  late final _EVP_DigestInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>>('EVP_DigestInit');
  late final _EVP_DigestInit = _EVP_DigestInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_DigestFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal');
  late final _EVP_DigestFinal = _EVP_DigestFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_DigestFinalXOF(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
  ) {
    return _EVP_DigestFinalXOF(
      ctx,
      out,
      outlen,
    );
  }

  late final _EVP_DigestFinalXOFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_DigestFinalXOF');
  late final _EVP_DigestFinalXOF = _EVP_DigestFinalXOFPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DigestSqueeze(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
  ) {
    return _EVP_DigestSqueeze(
      ctx,
      out,
      outlen,
    );
  }

  late final _EVP_DigestSqueezePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_DigestSqueeze');
  late final _EVP_DigestSqueeze = _EVP_DigestSqueezePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_MD> EVP_MD_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_MD_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_MD_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('EVP_MD_fetch');
  late final _EVP_MD_fetch = _EVP_MD_fetchPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_MD_up_ref(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_up_ref(
      md,
    );
  }

  late final _EVP_MD_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_up_ref');
  late final _EVP_MD_up_ref =
      _EVP_MD_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  void EVP_MD_free(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_free(
      md,
    );
  }

  late final _EVP_MD_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_free');
  late final _EVP_MD_free =
      _EVP_MD_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD>)>();

  int EVP_read_pw_string(
    ffi.Pointer<ffi.Char> buf,
    int length,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string(
      buf,
      length,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string');
  late final _EVP_read_pw_string = _EVP_read_pw_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int EVP_read_pw_string_min(
    ffi.Pointer<ffi.Char> buf,
    int minlen,
    int maxlen,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string_min(
      buf,
      minlen,
      maxlen,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_string_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string_min');
  late final _EVP_read_pw_string_min = _EVP_read_pw_string_minPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int)>();

  void EVP_set_pw_prompt(
    ffi.Pointer<ffi.Char> prompt,
  ) {
    return _EVP_set_pw_prompt(
      prompt,
    );
  }

  late final _EVP_set_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'EVP_set_pw_prompt');
  late final _EVP_set_pw_prompt =
      _EVP_set_pw_promptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_get_pw_prompt() {
    return _EVP_get_pw_prompt();
  }

  late final _EVP_get_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'EVP_get_pw_prompt');
  late final _EVP_get_pw_prompt =
      _EVP_get_pw_promptPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int EVP_BytesToKey(
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.UnsignedChar> salt,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datal,
    int count,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_BytesToKey(
      type,
      md,
      salt,
      data,
      datal,
      count,
      key,
      iv,
    );
  }

  late final _EVP_BytesToKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_BytesToKey');
  late final _EVP_BytesToKey = _EVP_BytesToKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void EVP_CIPHER_CTX_set_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_flags');
  late final _EVP_CIPHER_CTX_set_flags = _EVP_CIPHER_CTX_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  void EVP_CIPHER_CTX_clear_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_clear_flags');
  late final _EVP_CIPHER_CTX_clear_flags = _EVP_CIPHER_CTX_clear_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_test_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_test_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_test_flags');
  late final _EVP_CIPHER_CTX_test_flags = _EVP_CIPHER_CTX_test_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_EncryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit');
  late final _EVP_EncryptInit = _EVP_EncryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit_ex');
  late final _EVP_EncryptInit_ex = _EVP_EncryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptInit_ex2(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_EncryptInit_ex2(
      ctx,
      cipher,
      key,
      iv,
      params,
    );
  }

  late final _EVP_EncryptInit_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_EncryptInit_ex2');
  late final _EVP_EncryptInit_ex2 = _EVP_EncryptInit_ex2Ptr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_EncryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncryptUpdate');
  late final _EVP_EncryptUpdate = _EVP_EncryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_EncryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal_ex(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal_ex');
  late final _EVP_EncryptFinal_ex = _EVP_EncryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal');
  late final _EVP_EncryptFinal = _EVP_EncryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit');
  late final _EVP_DecryptInit = _EVP_DecryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit_ex');
  late final _EVP_DecryptInit_ex = _EVP_DecryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptInit_ex2(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_DecryptInit_ex2(
      ctx,
      cipher,
      key,
      iv,
      params,
    );
  }

  late final _EVP_DecryptInit_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_DecryptInit_ex2');
  late final _EVP_DecryptInit_ex2 = _EVP_DecryptInit_ex2Ptr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_DecryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecryptUpdate');
  late final _EVP_DecryptUpdate = _EVP_DecryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal');
  late final _EVP_DecryptFinal = _EVP_DecryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal_ex');
  late final _EVP_DecryptFinal_ex = _EVP_DecryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit(
      ctx,
      cipher,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit');
  late final _EVP_CipherInit = _EVP_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit_ex');
  late final _EVP_CipherInit_ex = _EVP_CipherInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int EVP_CipherInit_ex2(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_CipherInit_ex2(
      ctx,
      cipher,
      key,
      iv,
      enc,
      params,
    );
  }

  late final _EVP_CipherInit_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_CipherInit_ex2');
  late final _EVP_CipherInit_ex2 = _EVP_CipherInit_ex2Ptr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_CipherUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_CipherUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_CipherUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherUpdate');
  late final _EVP_CipherUpdate = _EVP_CipherUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal');
  late final _EVP_CipherFinal = _EVP_CipherFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal_ex');
  late final _EVP_CipherFinal_ex = _EVP_CipherFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_SignFinal(
      ctx,
      md,
      s,
      pkey,
    );
  }

  late final _EVP_SignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_SignFinal');
  late final _EVP_SignFinal = _EVP_SignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_SignFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_SignFinal_ex(
      ctx,
      md,
      s,
      pkey,
      libctx,
      propq,
    );
  }

  late final _EVP_SignFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_SignFinal_ex');
  late final _EVP_SignFinal_ex = _EVP_SignFinal_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_DigestSign(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Size> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestSign(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestSign');
  late final _EVP_DigestSign = _EVP_DigestSignPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_VerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_VerifyFinal(
      ctx,
      sigbuf,
      siglen,
      pkey,
    );
  }

  late final _EVP_VerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<EVP_PKEY>)>>('EVP_VerifyFinal');
  late final _EVP_VerifyFinal = _EVP_VerifyFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_VerifyFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_VerifyFinal_ex(
      ctx,
      sigbuf,
      siglen,
      pkey,
      libctx,
      propq,
    );
  }

  late final _EVP_VerifyFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_VerifyFinal_ex');
  late final _EVP_VerifyFinal_ex = _EVP_VerifyFinal_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_DigestVerify(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestVerify(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestVerify');
  late final _EVP_DigestVerify = _EVP_DigestVerifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DigestSignInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<ffi.Char> mdname,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> props,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_DigestSignInit_ex(
      ctx,
      pctx,
      mdname,
      libctx,
      props,
      pkey,
      params,
    );
  }

  late final _EVP_DigestSignInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_DigestSignInit_ex');
  late final _EVP_DigestSignInit_ex = _EVP_DigestSignInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_DigestSignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestSignInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestSignInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestSignInit');
  late final _EVP_DigestSignInit = _EVP_DigestSignInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestSignUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int dsize,
  ) {
    return _EVP_DigestSignUpdate(
      ctx,
      data,
      dsize,
    );
  }

  late final _EVP_DigestSignUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_DigestSignUpdate');
  late final _EVP_DigestSignUpdate = _EVP_DigestSignUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_DigestSignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Size> siglen,
  ) {
    return _EVP_DigestSignFinal(
      ctx,
      sigret,
      siglen,
    );
  }

  late final _EVP_DigestSignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_DigestSignFinal');
  late final _EVP_DigestSignFinal = _EVP_DigestSignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_DigestVerifyInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<ffi.Char> mdname,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> props,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_DigestVerifyInit_ex(
      ctx,
      pctx,
      mdname,
      libctx,
      props,
      pkey,
      params,
    );
  }

  late final _EVP_DigestVerifyInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_DigestVerifyInit_ex');
  late final _EVP_DigestVerifyInit_ex = _EVP_DigestVerifyInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_DigestVerifyInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestVerifyInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestVerifyInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestVerifyInit');
  late final _EVP_DigestVerifyInit = _EVP_DigestVerifyInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestVerifyUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int dsize,
  ) {
    return _EVP_DigestVerifyUpdate(
      ctx,
      data,
      dsize,
    );
  }

  late final _EVP_DigestVerifyUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_DigestVerifyUpdate');
  late final _EVP_DigestVerifyUpdate = _EVP_DigestVerifyUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_DigestVerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_DigestVerifyFinal(
      ctx,
      sig,
      siglen,
    );
  }

  late final _EVP_DigestVerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestVerifyFinal');
  late final _EVP_DigestVerifyFinal = _EVP_DigestVerifyFinalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_OpenInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.UnsignedChar> ek,
    int ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<EVP_PKEY> priv,
  ) {
    return _EVP_OpenInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      priv,
    );
  }

  late final _EVP_OpenInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_OpenInit');
  late final _EVP_OpenInit = _EVP_OpenInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_OpenFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_OpenFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_OpenFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_OpenFinal');
  late final _EVP_OpenFinal = _EVP_OpenFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SealInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ek,
    ffi.Pointer<ffi.Int> ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> pubk,
    int npubk,
  ) {
    return _EVP_SealInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      pubk,
      npubk,
    );
  }

  late final _EVP_SealInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Int)>>('EVP_SealInit');
  late final _EVP_SealInit = _EVP_SealInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          int)>();

  int EVP_SealFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_SealFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_SealFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_SealFinal');
  late final _EVP_SealFinal = _EVP_SealFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<EVP_ENCODE_CTX> EVP_ENCODE_CTX_new() {
    return _EVP_ENCODE_CTX_new();
  }

  late final _EVP_ENCODE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_ENCODE_CTX> Function()>>(
          'EVP_ENCODE_CTX_new');
  late final _EVP_ENCODE_CTX_new = _EVP_ENCODE_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_ENCODE_CTX> Function()>();

  void EVP_ENCODE_CTX_free(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_free(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_free');
  late final _EVP_ENCODE_CTX_free = _EVP_ENCODE_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_copy(
    ffi.Pointer<EVP_ENCODE_CTX> dctx,
    ffi.Pointer<EVP_ENCODE_CTX> sctx,
  ) {
    return _EVP_ENCODE_CTX_copy(
      dctx,
      sctx,
    );
  }

  late final _EVP_ENCODE_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<EVP_ENCODE_CTX>)>>('EVP_ENCODE_CTX_copy');
  late final _EVP_ENCODE_CTX_copy = _EVP_ENCODE_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_num(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_num(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_num');
  late final _EVP_ENCODE_CTX_num = _EVP_ENCODE_CTX_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  void EVP_EncodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_EncodeInit(
      ctx,
    );
  }

  late final _EVP_EncodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_EncodeInit');
  late final _EVP_EncodeInit = _EVP_EncodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_EncodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncodeUpdate');
  late final _EVP_EncodeUpdate = _EVP_EncodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_EncodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncodeFinal');
  late final _EVP_EncodeFinal = _EVP_EncodeFinalPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_EncodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_EncodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_EncodeBlock');
  late final _EVP_EncodeBlock = _EVP_EncodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_DecodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_DecodeInit(
      ctx,
    );
  }

  late final _EVP_DecodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_DecodeInit');
  late final _EVP_DecodeInit = _EVP_DecodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_DecodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecodeUpdate');
  late final _EVP_DecodeUpdate = _EVP_DecodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_DecodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecodeFinal');
  late final _EVP_DecodeFinal = _EVP_DecodeFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_DecodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_DecodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_DecodeBlock');
  late final _EVP_DecodeBlock = _EVP_DecodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_CIPHER_CTX> EVP_CIPHER_CTX_new() {
    return _EVP_CIPHER_CTX_new();
  }

  late final _EVP_CIPHER_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER_CTX> Function()>>(
          'EVP_CIPHER_CTX_new');
  late final _EVP_CIPHER_CTX_new = _EVP_CIPHER_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER_CTX> Function()>();

  int EVP_CIPHER_CTX_reset(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_reset(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_reset');
  late final _EVP_CIPHER_CTX_reset = _EVP_CIPHER_CTX_resetPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_free(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_free(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_free');
  late final _EVP_CIPHER_CTX_free = _EVP_CIPHER_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_set_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> x,
    int keylen,
  ) {
    return _EVP_CIPHER_CTX_set_key_length(
      x,
      keylen,
    );
  }

  late final _EVP_CIPHER_CTX_set_key_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_key_length');
  late final _EVP_CIPHER_CTX_set_key_length = _EVP_CIPHER_CTX_set_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_set_padding(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    int pad,
  ) {
    return _EVP_CIPHER_CTX_set_padding(
      c,
      pad,
    );
  }

  late final _EVP_CIPHER_CTX_set_paddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_padding');
  late final _EVP_CIPHER_CTX_set_padding = _EVP_CIPHER_CTX_set_paddingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_ctrl(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int type,
    int arg,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _EVP_CIPHER_CTX_ctrl(
      ctx,
      type,
      arg,
      ptr,
    );
  }

  late final _EVP_CIPHER_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_ctrl');
  late final _EVP_CIPHER_CTX_ctrl = _EVP_CIPHER_CTX_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  int EVP_CIPHER_CTX_rand_key(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
  ) {
    return _EVP_CIPHER_CTX_rand_key(
      ctx,
      key,
    );
  }

  late final _EVP_CIPHER_CTX_rand_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_CIPHER_CTX_rand_key');
  late final _EVP_CIPHER_CTX_rand_key = _EVP_CIPHER_CTX_rand_keyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_CIPHER_get_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_CIPHER_get_params(
      cipher,
      params,
    );
  }

  late final _EVP_CIPHER_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_CIPHER_get_params');
  late final _EVP_CIPHER_get_params = _EVP_CIPHER_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_CIPHER_CTX_set_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_CIPHER_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_CIPHER_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_CIPHER_CTX_set_params');
  late final _EVP_CIPHER_CTX_set_params =
      _EVP_CIPHER_CTX_set_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_CIPHER_CTX_get_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_CIPHER_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_CIPHER_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_CIPHER_CTX_get_params');
  late final _EVP_CIPHER_CTX_get_params =
      _EVP_CIPHER_CTX_get_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_CIPHER_gettable_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_gettable_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_gettable_params');
  late final _EVP_CIPHER_gettable_params = _EVP_CIPHER_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<OSSL_PARAM> EVP_CIPHER_settable_ctx_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_settable_ctx_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_settable_ctx_params');
  late final _EVP_CIPHER_settable_ctx_params =
      _EVP_CIPHER_settable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<OSSL_PARAM> EVP_CIPHER_gettable_ctx_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_gettable_ctx_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_gettable_ctx_params');
  late final _EVP_CIPHER_gettable_ctx_params =
      _EVP_CIPHER_gettable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<OSSL_PARAM> EVP_CIPHER_CTX_settable_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_settable_params');
  late final _EVP_CIPHER_CTX_settable_params =
      _EVP_CIPHER_CTX_settable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<OSSL_PARAM> EVP_CIPHER_CTX_gettable_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_gettable_params');
  late final _EVP_CIPHER_CTX_gettable_params =
      _EVP_CIPHER_CTX_gettable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_set_algor_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<X509_ALGOR> alg,
  ) {
    return _EVP_CIPHER_CTX_set_algor_params(
      ctx,
      alg,
    );
  }

  late final _EVP_CIPHER_CTX_set_algor_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<X509_ALGOR>)>>('EVP_CIPHER_CTX_set_algor_params');
  late final _EVP_CIPHER_CTX_set_algor_params =
      _EVP_CIPHER_CTX_set_algor_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<X509_ALGOR>)>();

  int EVP_CIPHER_CTX_get_algor_params(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<X509_ALGOR> alg,
  ) {
    return _EVP_CIPHER_CTX_get_algor_params(
      ctx,
      alg,
    );
  }

  late final _EVP_CIPHER_CTX_get_algor_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<X509_ALGOR>)>>('EVP_CIPHER_CTX_get_algor_params');
  late final _EVP_CIPHER_CTX_get_algor_params =
      _EVP_CIPHER_CTX_get_algor_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<X509_ALGOR>)>();

  int EVP_CIPHER_CTX_get_algor(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> alg,
  ) {
    return _EVP_CIPHER_CTX_get_algor(
      ctx,
      alg,
    );
  }

  late final _EVP_CIPHER_CTX_get_algorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>(
      'EVP_CIPHER_CTX_get_algor');
  late final _EVP_CIPHER_CTX_get_algor =
      _EVP_CIPHER_CTX_get_algorPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  ffi.Pointer<BIO_METHOD> BIO_f_md() {
    return _BIO_f_md();
  }

  late final _BIO_f_mdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_md');
  late final _BIO_f_md =
      _BIO_f_mdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_base64() {
    return _BIO_f_base64();
  }

  late final _BIO_f_base64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_base64');
  late final _BIO_f_base64 =
      _BIO_f_base64Ptr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_cipher() {
    return _BIO_f_cipher();
  }

  late final _BIO_f_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_cipher');
  late final _BIO_f_cipher =
      _BIO_f_cipherPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_reliable() {
    return _BIO_f_reliable();
  }

  late final _BIO_f_reliablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_reliable');
  late final _BIO_f_reliable =
      _BIO_f_reliablePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  int BIO_set_cipher(
    ffi.Pointer<BIO> b,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<ffi.UnsignedChar> k,
    ffi.Pointer<ffi.UnsignedChar> i,
    int enc,
  ) {
    return _BIO_set_cipher(
      b,
      c,
      k,
      i,
      enc,
    );
  }

  late final _BIO_set_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BIO_set_cipher');
  late final _BIO_set_cipher = _BIO_set_cipherPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_MD> EVP_md_null() {
    return _EVP_md_null();
  }

  late final _EVP_md_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md_null');
  late final _EVP_md_null =
      _EVP_md_nullPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md4() {
    return _EVP_md4();
  }

  late final _EVP_md4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md4');
  late final _EVP_md4 =
      _EVP_md4Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5() {
    return _EVP_md5();
  }

  late final _EVP_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md5');
  late final _EVP_md5 =
      _EVP_md5Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5_sha1() {
    return _EVP_md5_sha1();
  }

  late final _EVP_md5_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md5_sha1');
  late final _EVP_md5_sha1 =
      _EVP_md5_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2b512() {
    return _EVP_blake2b512();
  }

  late final _EVP_blake2b512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2b512');
  late final _EVP_blake2b512 =
      _EVP_blake2b512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2s256() {
    return _EVP_blake2s256();
  }

  late final _EVP_blake2s256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2s256');
  late final _EVP_blake2s256 =
      _EVP_blake2s256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha1() {
    return _EVP_sha1();
  }

  late final _EVP_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha1');
  late final _EVP_sha1 =
      _EVP_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha224() {
    return _EVP_sha224();
  }

  late final _EVP_sha224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha224');
  late final _EVP_sha224 =
      _EVP_sha224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha256() {
    return _EVP_sha256();
  }

  late final _EVP_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha256');
  late final _EVP_sha256 =
      _EVP_sha256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha384() {
    return _EVP_sha384();
  }

  late final _EVP_sha384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha384');
  late final _EVP_sha384 =
      _EVP_sha384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512() {
    return _EVP_sha512();
  }

  late final _EVP_sha512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha512');
  late final _EVP_sha512 =
      _EVP_sha512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_224() {
    return _EVP_sha512_224();
  }

  late final _EVP_sha512_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_224');
  late final _EVP_sha512_224 =
      _EVP_sha512_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_256() {
    return _EVP_sha512_256();
  }

  late final _EVP_sha512_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_256');
  late final _EVP_sha512_256 =
      _EVP_sha512_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_224() {
    return _EVP_sha3_224();
  }

  late final _EVP_sha3_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_224');
  late final _EVP_sha3_224 =
      _EVP_sha3_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_256() {
    return _EVP_sha3_256();
  }

  late final _EVP_sha3_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_256');
  late final _EVP_sha3_256 =
      _EVP_sha3_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_384() {
    return _EVP_sha3_384();
  }

  late final _EVP_sha3_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_384');
  late final _EVP_sha3_384 =
      _EVP_sha3_384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_512() {
    return _EVP_sha3_512();
  }

  late final _EVP_sha3_512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_512');
  late final _EVP_sha3_512 =
      _EVP_sha3_512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake128() {
    return _EVP_shake128();
  }

  late final _EVP_shake128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake128');
  late final _EVP_shake128 =
      _EVP_shake128Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake256() {
    return _EVP_shake256();
  }

  late final _EVP_shake256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake256');
  late final _EVP_shake256 =
      _EVP_shake256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_mdc2() {
    return _EVP_mdc2();
  }

  late final _EVP_mdc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_mdc2');
  late final _EVP_mdc2 =
      _EVP_mdc2Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_ripemd160() {
    return _EVP_ripemd160();
  }

  late final _EVP_ripemd160Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_ripemd160');
  late final _EVP_ripemd160 =
      _EVP_ripemd160Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_whirlpool() {
    return _EVP_whirlpool();
  }

  late final _EVP_whirlpoolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_whirlpool');
  late final _EVP_whirlpool =
      _EVP_whirlpoolPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sm3() {
    return _EVP_sm3();
  }

  late final _EVP_sm3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sm3');
  late final _EVP_sm3 =
      _EVP_sm3Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_enc_null() {
    return _EVP_enc_null();
  }

  late final _EVP_enc_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_enc_null');
  late final _EVP_enc_null =
      _EVP_enc_nullPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ecb() {
    return _EVP_des_ecb();
  }

  late final _EVP_des_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ecb');
  late final _EVP_des_ecb =
      _EVP_des_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede() {
    return _EVP_des_ede();
  }

  late final _EVP_des_edePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede');
  late final _EVP_des_ede =
      _EVP_des_edePtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3() {
    return _EVP_des_ede3();
  }

  late final _EVP_des_ede3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3');
  late final _EVP_des_ede3 =
      _EVP_des_ede3Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ecb() {
    return _EVP_des_ede_ecb();
  }

  late final _EVP_des_ede_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ecb');
  late final _EVP_des_ede_ecb =
      _EVP_des_ede_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ecb() {
    return _EVP_des_ede3_ecb();
  }

  late final _EVP_des_ede3_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ecb');
  late final _EVP_des_ede3_ecb =
      _EVP_des_ede3_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb64() {
    return _EVP_des_cfb64();
  }

  late final _EVP_des_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb64');
  late final _EVP_des_cfb64 =
      _EVP_des_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb1() {
    return _EVP_des_cfb1();
  }

  late final _EVP_des_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb1');
  late final _EVP_des_cfb1 =
      _EVP_des_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb8() {
    return _EVP_des_cfb8();
  }

  late final _EVP_des_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb8');
  late final _EVP_des_cfb8 =
      _EVP_des_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cfb64() {
    return _EVP_des_ede_cfb64();
  }

  late final _EVP_des_ede_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cfb64');
  late final _EVP_des_ede_cfb64 =
      _EVP_des_ede_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb64() {
    return _EVP_des_ede3_cfb64();
  }

  late final _EVP_des_ede3_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb64');
  late final _EVP_des_ede3_cfb64 =
      _EVP_des_ede3_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb1() {
    return _EVP_des_ede3_cfb1();
  }

  late final _EVP_des_ede3_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb1');
  late final _EVP_des_ede3_cfb1 =
      _EVP_des_ede3_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb8() {
    return _EVP_des_ede3_cfb8();
  }

  late final _EVP_des_ede3_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb8');
  late final _EVP_des_ede3_cfb8 =
      _EVP_des_ede3_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ofb() {
    return _EVP_des_ofb();
  }

  late final _EVP_des_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ofb');
  late final _EVP_des_ofb =
      _EVP_des_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ofb() {
    return _EVP_des_ede_ofb();
  }

  late final _EVP_des_ede_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ofb');
  late final _EVP_des_ede_ofb =
      _EVP_des_ede_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ofb() {
    return _EVP_des_ede3_ofb();
  }

  late final _EVP_des_ede3_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ofb');
  late final _EVP_des_ede3_ofb =
      _EVP_des_ede3_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cbc() {
    return _EVP_des_cbc();
  }

  late final _EVP_des_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cbc');
  late final _EVP_des_cbc =
      _EVP_des_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cbc() {
    return _EVP_des_ede_cbc();
  }

  late final _EVP_des_ede_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cbc');
  late final _EVP_des_ede_cbc =
      _EVP_des_ede_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cbc() {
    return _EVP_des_ede3_cbc();
  }

  late final _EVP_des_ede3_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cbc');
  late final _EVP_des_ede3_cbc =
      _EVP_des_ede3_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_desx_cbc() {
    return _EVP_desx_cbc();
  }

  late final _EVP_desx_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_desx_cbc');
  late final _EVP_desx_cbc =
      _EVP_desx_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_wrap() {
    return _EVP_des_ede3_wrap();
  }

  late final _EVP_des_ede3_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_wrap');
  late final _EVP_des_ede3_wrap =
      _EVP_des_ede3_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4() {
    return _EVP_rc4();
  }

  late final _EVP_rc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4');
  late final _EVP_rc4 =
      _EVP_rc4Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_40() {
    return _EVP_rc4_40();
  }

  late final _EVP_rc4_40Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_40');
  late final _EVP_rc4_40 =
      _EVP_rc4_40Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_hmac_md5() {
    return _EVP_rc4_hmac_md5();
  }

  late final _EVP_rc4_hmac_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_hmac_md5');
  late final _EVP_rc4_hmac_md5 =
      _EVP_rc4_hmac_md5Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_ecb() {
    return _EVP_idea_ecb();
  }

  late final _EVP_idea_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_ecb');
  late final _EVP_idea_ecb =
      _EVP_idea_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_cfb64() {
    return _EVP_idea_cfb64();
  }

  late final _EVP_idea_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_cfb64');
  late final _EVP_idea_cfb64 =
      _EVP_idea_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_ofb() {
    return _EVP_idea_ofb();
  }

  late final _EVP_idea_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_ofb');
  late final _EVP_idea_ofb =
      _EVP_idea_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_cbc() {
    return _EVP_idea_cbc();
  }

  late final _EVP_idea_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_cbc');
  late final _EVP_idea_cbc =
      _EVP_idea_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ecb() {
    return _EVP_rc2_ecb();
  }

  late final _EVP_rc2_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ecb');
  late final _EVP_rc2_ecb =
      _EVP_rc2_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cbc() {
    return _EVP_rc2_cbc();
  }

  late final _EVP_rc2_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cbc');
  late final _EVP_rc2_cbc =
      _EVP_rc2_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_40_cbc() {
    return _EVP_rc2_40_cbc();
  }

  late final _EVP_rc2_40_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_40_cbc');
  late final _EVP_rc2_40_cbc =
      _EVP_rc2_40_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_64_cbc() {
    return _EVP_rc2_64_cbc();
  }

  late final _EVP_rc2_64_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_64_cbc');
  late final _EVP_rc2_64_cbc =
      _EVP_rc2_64_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cfb64() {
    return _EVP_rc2_cfb64();
  }

  late final _EVP_rc2_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cfb64');
  late final _EVP_rc2_cfb64 =
      _EVP_rc2_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ofb() {
    return _EVP_rc2_ofb();
  }

  late final _EVP_rc2_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ofb');
  late final _EVP_rc2_ofb =
      _EVP_rc2_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ecb() {
    return _EVP_bf_ecb();
  }

  late final _EVP_bf_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ecb');
  late final _EVP_bf_ecb =
      _EVP_bf_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cbc() {
    return _EVP_bf_cbc();
  }

  late final _EVP_bf_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cbc');
  late final _EVP_bf_cbc =
      _EVP_bf_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cfb64() {
    return _EVP_bf_cfb64();
  }

  late final _EVP_bf_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cfb64');
  late final _EVP_bf_cfb64 =
      _EVP_bf_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ofb() {
    return _EVP_bf_ofb();
  }

  late final _EVP_bf_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ofb');
  late final _EVP_bf_ofb =
      _EVP_bf_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ecb() {
    return _EVP_cast5_ecb();
  }

  late final _EVP_cast5_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ecb');
  late final _EVP_cast5_ecb =
      _EVP_cast5_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cbc() {
    return _EVP_cast5_cbc();
  }

  late final _EVP_cast5_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cbc');
  late final _EVP_cast5_cbc =
      _EVP_cast5_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cfb64() {
    return _EVP_cast5_cfb64();
  }

  late final _EVP_cast5_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cfb64');
  late final _EVP_cast5_cfb64 =
      _EVP_cast5_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ofb() {
    return _EVP_cast5_ofb();
  }

  late final _EVP_cast5_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ofb');
  late final _EVP_cast5_ofb =
      _EVP_cast5_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ecb() {
    return _EVP_aes_128_ecb();
  }

  late final _EVP_aes_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ecb');
  late final _EVP_aes_128_ecb =
      _EVP_aes_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc() {
    return _EVP_aes_128_cbc();
  }

  late final _EVP_aes_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc');
  late final _EVP_aes_128_cbc =
      _EVP_aes_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb1() {
    return _EVP_aes_128_cfb1();
  }

  late final _EVP_aes_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb1');
  late final _EVP_aes_128_cfb1 =
      _EVP_aes_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb8() {
    return _EVP_aes_128_cfb8();
  }

  late final _EVP_aes_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb8');
  late final _EVP_aes_128_cfb8 =
      _EVP_aes_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb128() {
    return _EVP_aes_128_cfb128();
  }

  late final _EVP_aes_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb128');
  late final _EVP_aes_128_cfb128 =
      _EVP_aes_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ofb() {
    return _EVP_aes_128_ofb();
  }

  late final _EVP_aes_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ofb');
  late final _EVP_aes_128_ofb =
      _EVP_aes_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ctr() {
    return _EVP_aes_128_ctr();
  }

  late final _EVP_aes_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ctr');
  late final _EVP_aes_128_ctr =
      _EVP_aes_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ccm() {
    return _EVP_aes_128_ccm();
  }

  late final _EVP_aes_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ccm');
  late final _EVP_aes_128_ccm =
      _EVP_aes_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_gcm() {
    return _EVP_aes_128_gcm();
  }

  late final _EVP_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_gcm');
  late final _EVP_aes_128_gcm =
      _EVP_aes_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_xts() {
    return _EVP_aes_128_xts();
  }

  late final _EVP_aes_128_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_xts');
  late final _EVP_aes_128_xts =
      _EVP_aes_128_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap() {
    return _EVP_aes_128_wrap();
  }

  late final _EVP_aes_128_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap');
  late final _EVP_aes_128_wrap =
      _EVP_aes_128_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap_pad() {
    return _EVP_aes_128_wrap_pad();
  }

  late final _EVP_aes_128_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap_pad');
  late final _EVP_aes_128_wrap_pad =
      _EVP_aes_128_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ocb() {
    return _EVP_aes_128_ocb();
  }

  late final _EVP_aes_128_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ocb');
  late final _EVP_aes_128_ocb =
      _EVP_aes_128_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ecb() {
    return _EVP_aes_192_ecb();
  }

  late final _EVP_aes_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ecb');
  late final _EVP_aes_192_ecb =
      _EVP_aes_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cbc() {
    return _EVP_aes_192_cbc();
  }

  late final _EVP_aes_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cbc');
  late final _EVP_aes_192_cbc =
      _EVP_aes_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb1() {
    return _EVP_aes_192_cfb1();
  }

  late final _EVP_aes_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb1');
  late final _EVP_aes_192_cfb1 =
      _EVP_aes_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb8() {
    return _EVP_aes_192_cfb8();
  }

  late final _EVP_aes_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb8');
  late final _EVP_aes_192_cfb8 =
      _EVP_aes_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb128() {
    return _EVP_aes_192_cfb128();
  }

  late final _EVP_aes_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb128');
  late final _EVP_aes_192_cfb128 =
      _EVP_aes_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ofb() {
    return _EVP_aes_192_ofb();
  }

  late final _EVP_aes_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ofb');
  late final _EVP_aes_192_ofb =
      _EVP_aes_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ctr() {
    return _EVP_aes_192_ctr();
  }

  late final _EVP_aes_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ctr');
  late final _EVP_aes_192_ctr =
      _EVP_aes_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ccm() {
    return _EVP_aes_192_ccm();
  }

  late final _EVP_aes_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ccm');
  late final _EVP_aes_192_ccm =
      _EVP_aes_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_gcm() {
    return _EVP_aes_192_gcm();
  }

  late final _EVP_aes_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_gcm');
  late final _EVP_aes_192_gcm =
      _EVP_aes_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap() {
    return _EVP_aes_192_wrap();
  }

  late final _EVP_aes_192_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap');
  late final _EVP_aes_192_wrap =
      _EVP_aes_192_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap_pad() {
    return _EVP_aes_192_wrap_pad();
  }

  late final _EVP_aes_192_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap_pad');
  late final _EVP_aes_192_wrap_pad =
      _EVP_aes_192_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ocb() {
    return _EVP_aes_192_ocb();
  }

  late final _EVP_aes_192_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ocb');
  late final _EVP_aes_192_ocb =
      _EVP_aes_192_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ecb() {
    return _EVP_aes_256_ecb();
  }

  late final _EVP_aes_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ecb');
  late final _EVP_aes_256_ecb =
      _EVP_aes_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc() {
    return _EVP_aes_256_cbc();
  }

  late final _EVP_aes_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc');
  late final _EVP_aes_256_cbc =
      _EVP_aes_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb1() {
    return _EVP_aes_256_cfb1();
  }

  late final _EVP_aes_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb1');
  late final _EVP_aes_256_cfb1 =
      _EVP_aes_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb8() {
    return _EVP_aes_256_cfb8();
  }

  late final _EVP_aes_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb8');
  late final _EVP_aes_256_cfb8 =
      _EVP_aes_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb128() {
    return _EVP_aes_256_cfb128();
  }

  late final _EVP_aes_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb128');
  late final _EVP_aes_256_cfb128 =
      _EVP_aes_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ofb() {
    return _EVP_aes_256_ofb();
  }

  late final _EVP_aes_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ofb');
  late final _EVP_aes_256_ofb =
      _EVP_aes_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ctr() {
    return _EVP_aes_256_ctr();
  }

  late final _EVP_aes_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ctr');
  late final _EVP_aes_256_ctr =
      _EVP_aes_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ccm() {
    return _EVP_aes_256_ccm();
  }

  late final _EVP_aes_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ccm');
  late final _EVP_aes_256_ccm =
      _EVP_aes_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_gcm() {
    return _EVP_aes_256_gcm();
  }

  late final _EVP_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_gcm');
  late final _EVP_aes_256_gcm =
      _EVP_aes_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_xts() {
    return _EVP_aes_256_xts();
  }

  late final _EVP_aes_256_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_xts');
  late final _EVP_aes_256_xts =
      _EVP_aes_256_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap() {
    return _EVP_aes_256_wrap();
  }

  late final _EVP_aes_256_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap');
  late final _EVP_aes_256_wrap =
      _EVP_aes_256_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap_pad() {
    return _EVP_aes_256_wrap_pad();
  }

  late final _EVP_aes_256_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap_pad');
  late final _EVP_aes_256_wrap_pad =
      _EVP_aes_256_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ocb() {
    return _EVP_aes_256_ocb();
  }

  late final _EVP_aes_256_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ocb');
  late final _EVP_aes_256_ocb =
      _EVP_aes_256_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha1() {
    return _EVP_aes_128_cbc_hmac_sha1();
  }

  late final _EVP_aes_128_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha1');
  late final _EVP_aes_128_cbc_hmac_sha1 = _EVP_aes_128_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha1() {
    return _EVP_aes_256_cbc_hmac_sha1();
  }

  late final _EVP_aes_256_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha1');
  late final _EVP_aes_256_cbc_hmac_sha1 = _EVP_aes_256_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha256() {
    return _EVP_aes_128_cbc_hmac_sha256();
  }

  late final _EVP_aes_128_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha256');
  late final _EVP_aes_128_cbc_hmac_sha256 = _EVP_aes_128_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha256() {
    return _EVP_aes_256_cbc_hmac_sha256();
  }

  late final _EVP_aes_256_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha256');
  late final _EVP_aes_256_cbc_hmac_sha256 = _EVP_aes_256_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ecb() {
    return _EVP_aria_128_ecb();
  }

  late final _EVP_aria_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ecb');
  late final _EVP_aria_128_ecb =
      _EVP_aria_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cbc() {
    return _EVP_aria_128_cbc();
  }

  late final _EVP_aria_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cbc');
  late final _EVP_aria_128_cbc =
      _EVP_aria_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb1() {
    return _EVP_aria_128_cfb1();
  }

  late final _EVP_aria_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb1');
  late final _EVP_aria_128_cfb1 =
      _EVP_aria_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb8() {
    return _EVP_aria_128_cfb8();
  }

  late final _EVP_aria_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb8');
  late final _EVP_aria_128_cfb8 =
      _EVP_aria_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb128() {
    return _EVP_aria_128_cfb128();
  }

  late final _EVP_aria_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb128');
  late final _EVP_aria_128_cfb128 =
      _EVP_aria_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ctr() {
    return _EVP_aria_128_ctr();
  }

  late final _EVP_aria_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ctr');
  late final _EVP_aria_128_ctr =
      _EVP_aria_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ofb() {
    return _EVP_aria_128_ofb();
  }

  late final _EVP_aria_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ofb');
  late final _EVP_aria_128_ofb =
      _EVP_aria_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_gcm() {
    return _EVP_aria_128_gcm();
  }

  late final _EVP_aria_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_gcm');
  late final _EVP_aria_128_gcm =
      _EVP_aria_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ccm() {
    return _EVP_aria_128_ccm();
  }

  late final _EVP_aria_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ccm');
  late final _EVP_aria_128_ccm =
      _EVP_aria_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ecb() {
    return _EVP_aria_192_ecb();
  }

  late final _EVP_aria_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ecb');
  late final _EVP_aria_192_ecb =
      _EVP_aria_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cbc() {
    return _EVP_aria_192_cbc();
  }

  late final _EVP_aria_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cbc');
  late final _EVP_aria_192_cbc =
      _EVP_aria_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb1() {
    return _EVP_aria_192_cfb1();
  }

  late final _EVP_aria_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb1');
  late final _EVP_aria_192_cfb1 =
      _EVP_aria_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb8() {
    return _EVP_aria_192_cfb8();
  }

  late final _EVP_aria_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb8');
  late final _EVP_aria_192_cfb8 =
      _EVP_aria_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb128() {
    return _EVP_aria_192_cfb128();
  }

  late final _EVP_aria_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb128');
  late final _EVP_aria_192_cfb128 =
      _EVP_aria_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ctr() {
    return _EVP_aria_192_ctr();
  }

  late final _EVP_aria_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ctr');
  late final _EVP_aria_192_ctr =
      _EVP_aria_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ofb() {
    return _EVP_aria_192_ofb();
  }

  late final _EVP_aria_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ofb');
  late final _EVP_aria_192_ofb =
      _EVP_aria_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_gcm() {
    return _EVP_aria_192_gcm();
  }

  late final _EVP_aria_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_gcm');
  late final _EVP_aria_192_gcm =
      _EVP_aria_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ccm() {
    return _EVP_aria_192_ccm();
  }

  late final _EVP_aria_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ccm');
  late final _EVP_aria_192_ccm =
      _EVP_aria_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ecb() {
    return _EVP_aria_256_ecb();
  }

  late final _EVP_aria_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ecb');
  late final _EVP_aria_256_ecb =
      _EVP_aria_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cbc() {
    return _EVP_aria_256_cbc();
  }

  late final _EVP_aria_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cbc');
  late final _EVP_aria_256_cbc =
      _EVP_aria_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb1() {
    return _EVP_aria_256_cfb1();
  }

  late final _EVP_aria_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb1');
  late final _EVP_aria_256_cfb1 =
      _EVP_aria_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb8() {
    return _EVP_aria_256_cfb8();
  }

  late final _EVP_aria_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb8');
  late final _EVP_aria_256_cfb8 =
      _EVP_aria_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb128() {
    return _EVP_aria_256_cfb128();
  }

  late final _EVP_aria_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb128');
  late final _EVP_aria_256_cfb128 =
      _EVP_aria_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ctr() {
    return _EVP_aria_256_ctr();
  }

  late final _EVP_aria_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ctr');
  late final _EVP_aria_256_ctr =
      _EVP_aria_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ofb() {
    return _EVP_aria_256_ofb();
  }

  late final _EVP_aria_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ofb');
  late final _EVP_aria_256_ofb =
      _EVP_aria_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_gcm() {
    return _EVP_aria_256_gcm();
  }

  late final _EVP_aria_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_gcm');
  late final _EVP_aria_256_gcm =
      _EVP_aria_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ccm() {
    return _EVP_aria_256_ccm();
  }

  late final _EVP_aria_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ccm');
  late final _EVP_aria_256_ccm =
      _EVP_aria_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ecb() {
    return _EVP_camellia_128_ecb();
  }

  late final _EVP_camellia_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ecb');
  late final _EVP_camellia_128_ecb =
      _EVP_camellia_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cbc() {
    return _EVP_camellia_128_cbc();
  }

  late final _EVP_camellia_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cbc');
  late final _EVP_camellia_128_cbc =
      _EVP_camellia_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb1() {
    return _EVP_camellia_128_cfb1();
  }

  late final _EVP_camellia_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb1');
  late final _EVP_camellia_128_cfb1 = _EVP_camellia_128_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb8() {
    return _EVP_camellia_128_cfb8();
  }

  late final _EVP_camellia_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb8');
  late final _EVP_camellia_128_cfb8 = _EVP_camellia_128_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb128() {
    return _EVP_camellia_128_cfb128();
  }

  late final _EVP_camellia_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb128');
  late final _EVP_camellia_128_cfb128 = _EVP_camellia_128_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ofb() {
    return _EVP_camellia_128_ofb();
  }

  late final _EVP_camellia_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ofb');
  late final _EVP_camellia_128_ofb =
      _EVP_camellia_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ctr() {
    return _EVP_camellia_128_ctr();
  }

  late final _EVP_camellia_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ctr');
  late final _EVP_camellia_128_ctr =
      _EVP_camellia_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ecb() {
    return _EVP_camellia_192_ecb();
  }

  late final _EVP_camellia_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ecb');
  late final _EVP_camellia_192_ecb =
      _EVP_camellia_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cbc() {
    return _EVP_camellia_192_cbc();
  }

  late final _EVP_camellia_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cbc');
  late final _EVP_camellia_192_cbc =
      _EVP_camellia_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb1() {
    return _EVP_camellia_192_cfb1();
  }

  late final _EVP_camellia_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb1');
  late final _EVP_camellia_192_cfb1 = _EVP_camellia_192_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb8() {
    return _EVP_camellia_192_cfb8();
  }

  late final _EVP_camellia_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb8');
  late final _EVP_camellia_192_cfb8 = _EVP_camellia_192_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb128() {
    return _EVP_camellia_192_cfb128();
  }

  late final _EVP_camellia_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb128');
  late final _EVP_camellia_192_cfb128 = _EVP_camellia_192_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ofb() {
    return _EVP_camellia_192_ofb();
  }

  late final _EVP_camellia_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ofb');
  late final _EVP_camellia_192_ofb =
      _EVP_camellia_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ctr() {
    return _EVP_camellia_192_ctr();
  }

  late final _EVP_camellia_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ctr');
  late final _EVP_camellia_192_ctr =
      _EVP_camellia_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ecb() {
    return _EVP_camellia_256_ecb();
  }

  late final _EVP_camellia_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ecb');
  late final _EVP_camellia_256_ecb =
      _EVP_camellia_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cbc() {
    return _EVP_camellia_256_cbc();
  }

  late final _EVP_camellia_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cbc');
  late final _EVP_camellia_256_cbc =
      _EVP_camellia_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb1() {
    return _EVP_camellia_256_cfb1();
  }

  late final _EVP_camellia_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb1');
  late final _EVP_camellia_256_cfb1 = _EVP_camellia_256_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb8() {
    return _EVP_camellia_256_cfb8();
  }

  late final _EVP_camellia_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb8');
  late final _EVP_camellia_256_cfb8 = _EVP_camellia_256_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb128() {
    return _EVP_camellia_256_cfb128();
  }

  late final _EVP_camellia_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb128');
  late final _EVP_camellia_256_cfb128 = _EVP_camellia_256_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ofb() {
    return _EVP_camellia_256_ofb();
  }

  late final _EVP_camellia_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ofb');
  late final _EVP_camellia_256_ofb =
      _EVP_camellia_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ctr() {
    return _EVP_camellia_256_ctr();
  }

  late final _EVP_camellia_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ctr');
  late final _EVP_camellia_256_ctr =
      _EVP_camellia_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20() {
    return _EVP_chacha20();
  }

  late final _EVP_chacha20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20');
  late final _EVP_chacha20 =
      _EVP_chacha20Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20_poly1305() {
    return _EVP_chacha20_poly1305();
  }

  late final _EVP_chacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20_poly1305');
  late final _EVP_chacha20_poly1305 = _EVP_chacha20_poly1305Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ecb() {
    return _EVP_seed_ecb();
  }

  late final _EVP_seed_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ecb');
  late final _EVP_seed_ecb =
      _EVP_seed_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cbc() {
    return _EVP_seed_cbc();
  }

  late final _EVP_seed_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cbc');
  late final _EVP_seed_cbc =
      _EVP_seed_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cfb128() {
    return _EVP_seed_cfb128();
  }

  late final _EVP_seed_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cfb128');
  late final _EVP_seed_cfb128 =
      _EVP_seed_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ofb() {
    return _EVP_seed_ofb();
  }

  late final _EVP_seed_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ofb');
  late final _EVP_seed_ofb =
      _EVP_seed_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ecb() {
    return _EVP_sm4_ecb();
  }

  late final _EVP_sm4_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ecb');
  late final _EVP_sm4_ecb =
      _EVP_sm4_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cbc() {
    return _EVP_sm4_cbc();
  }

  late final _EVP_sm4_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cbc');
  late final _EVP_sm4_cbc =
      _EVP_sm4_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cfb128() {
    return _EVP_sm4_cfb128();
  }

  late final _EVP_sm4_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cfb128');
  late final _EVP_sm4_cfb128 =
      _EVP_sm4_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ofb() {
    return _EVP_sm4_ofb();
  }

  late final _EVP_sm4_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ofb');
  late final _EVP_sm4_ofb =
      _EVP_sm4_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ctr() {
    return _EVP_sm4_ctr();
  }

  late final _EVP_sm4_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ctr');
  late final _EVP_sm4_ctr =
      _EVP_sm4_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  int EVP_add_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_add_cipher(
      cipher,
    );
  }

  late final _EVP_add_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_add_cipher');
  late final _EVP_add_cipher =
      _EVP_add_cipherPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_add_digest(
    ffi.Pointer<EVP_MD> digest,
  ) {
    return _EVP_add_digest(
      digest,
    );
  }

  late final _EVP_add_digestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_add_digest');
  late final _EVP_add_digest =
      _EVP_add_digestPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_get_cipherbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_cipherbyname(
      name,
    );
  }

  late final _EVP_get_cipherbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<ffi.Char>)>>('EVP_get_cipherbyname');
  late final _EVP_get_cipherbyname = _EVP_get_cipherbynamePtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_MD> EVP_get_digestbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_digestbyname(
      name,
    );
  }

  late final _EVP_get_digestbynamePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)>>(
      'EVP_get_digestbyname');
  late final _EVP_get_digestbyname = _EVP_get_digestbynamePtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)>();

  void EVP_CIPHER_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all');
  late final _EVP_CIPHER_do_all = _EVP_CIPHER_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_CIPHER> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_CIPHER_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all_sorted');
  late final _EVP_CIPHER_do_all_sorted =
      _EVP_CIPHER_do_all_sortedPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>();

  void EVP_CIPHER_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER> cipher, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_CIPHER> cipher,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all_provided');
  late final _EVP_CIPHER_do_all_provided =
      _EVP_CIPHER_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_CIPHER> cipher,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MD> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all');
  late final _EVP_MD_do_all = _EVP_MD_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MD> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MD> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all_sorted');
  late final _EVP_MD_do_all_sorted = _EVP_MD_do_all_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MD> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MD> md, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD> md, ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all_provided');
  late final _EVP_MD_do_all_provided = _EVP_MD_do_all_providedPtr.asFunction<
      void Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MD> md, ffi.Pointer<ffi.Void> arg)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_MAC> EVP_MAC_fetch(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_MAC_fetch(
      libctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_MAC_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MAC> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('EVP_MAC_fetch');
  late final _EVP_MAC_fetch = _EVP_MAC_fetchPtr.asFunction<
      ffi.Pointer<EVP_MAC> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_MAC_up_ref(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_up_ref(
      mac,
    );
  }

  late final _EVP_MAC_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MAC>)>>(
          'EVP_MAC_up_ref');
  late final _EVP_MAC_up_ref =
      _EVP_MAC_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_MAC>)>();

  void EVP_MAC_free(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_free(
      mac,
    );
  }

  late final _EVP_MAC_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MAC>)>>(
          'EVP_MAC_free');
  late final _EVP_MAC_free =
      _EVP_MAC_freePtr.asFunction<void Function(ffi.Pointer<EVP_MAC>)>();

  ffi.Pointer<ffi.Char> EVP_MAC_get0_name(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_get0_name(
      mac,
    );
  }

  late final _EVP_MAC_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_get0_name');
  late final _EVP_MAC_get0_name = _EVP_MAC_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MAC>)>();

  ffi.Pointer<ffi.Char> EVP_MAC_get0_description(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_get0_description(
      mac,
    );
  }

  late final _EVP_MAC_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_get0_description');
  late final _EVP_MAC_get0_description = _EVP_MAC_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_MAC>)>();

  int EVP_MAC_is_a(
    ffi.Pointer<EVP_MAC> mac,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_MAC_is_a(
      mac,
      name,
    );
  }

  late final _EVP_MAC_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MAC>, ffi.Pointer<ffi.Char>)>>('EVP_MAC_is_a');
  late final _EVP_MAC_is_a = _EVP_MAC_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_MAC_get0_provider(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_get0_provider(
      mac,
    );
  }

  late final _EVP_MAC_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_get0_provider');
  late final _EVP_MAC_get0_provider = _EVP_MAC_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_MAC>)>();

  int EVP_MAC_get_params(
    ffi.Pointer<EVP_MAC> mac,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MAC_get_params(
      mac,
      params,
    );
  }

  late final _EVP_MAC_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MAC>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MAC_get_params');
  late final _EVP_MAC_get_params = _EVP_MAC_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<EVP_MAC_CTX> EVP_MAC_CTX_new(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_CTX_new(
      mac,
    );
  }

  late final _EVP_MAC_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MAC_CTX> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_CTX_new');
  late final _EVP_MAC_CTX_new = _EVP_MAC_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_MAC_CTX> Function(ffi.Pointer<EVP_MAC>)>();

  void EVP_MAC_CTX_free(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_free(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MAC_CTX>)>>(
          'EVP_MAC_CTX_free');
  late final _EVP_MAC_CTX_free = _EVP_MAC_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_MAC_CTX>)>();

  ffi.Pointer<EVP_MAC_CTX> EVP_MAC_CTX_dup(
    ffi.Pointer<EVP_MAC_CTX> src,
  ) {
    return _EVP_MAC_CTX_dup(
      src,
    );
  }

  late final _EVP_MAC_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MAC_CTX> Function(
              ffi.Pointer<EVP_MAC_CTX>)>>('EVP_MAC_CTX_dup');
  late final _EVP_MAC_CTX_dup = _EVP_MAC_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_MAC_CTX> Function(ffi.Pointer<EVP_MAC_CTX>)>();

  ffi.Pointer<EVP_MAC> EVP_MAC_CTX_get0_mac(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_get0_mac(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_get0_macPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MAC> Function(
              ffi.Pointer<EVP_MAC_CTX>)>>('EVP_MAC_CTX_get0_mac');
  late final _EVP_MAC_CTX_get0_mac = _EVP_MAC_CTX_get0_macPtr.asFunction<
      ffi.Pointer<EVP_MAC> Function(ffi.Pointer<EVP_MAC_CTX>)>();

  int EVP_MAC_CTX_get_params(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MAC_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_MAC_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MAC_CTX_get_params');
  late final _EVP_MAC_CTX_get_params = _EVP_MAC_CTX_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_MAC_CTX_set_params(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MAC_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_MAC_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MAC_CTX_set_params');
  late final _EVP_MAC_CTX_set_params = _EVP_MAC_CTX_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_MAC_CTX_get_mac_size(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_get_mac_size(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_get_mac_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MAC_CTX>)>>(
          'EVP_MAC_CTX_get_mac_size');
  late final _EVP_MAC_CTX_get_mac_size = _EVP_MAC_CTX_get_mac_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MAC_CTX>)>();

  int EVP_MAC_CTX_get_block_size(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_get_block_size(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_get_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MAC_CTX>)>>(
          'EVP_MAC_CTX_get_block_size');
  late final _EVP_MAC_CTX_get_block_size = _EVP_MAC_CTX_get_block_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MAC_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_Q_mac(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<ffi.Char> subalg,
    ffi.Pointer<OSSL_PARAM> params,
    ffi.Pointer<ffi.Void> key,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outsize,
    ffi.Pointer<ffi.Size> outlen,
  ) {
    return _EVP_Q_mac(
      libctx,
      name,
      propq,
      subalg,
      params,
      key,
      keylen,
      data,
      datalen,
      out,
      outsize,
      outlen,
    );
  }

  late final _EVP_Q_macPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('EVP_Q_mac');
  late final _EVP_Q_mac = _EVP_Q_macPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<OSSL_PARAM>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.Size>)>();

  int EVP_MAC_init(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_MAC_init(
      ctx,
      key,
      keylen,
      params,
    );
  }

  late final _EVP_MAC_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_MAC_init');
  late final _EVP_MAC_init = _EVP_MAC_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_MAC_update(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _EVP_MAC_update(
      ctx,
      data,
      datalen,
    );
  }

  late final _EVP_MAC_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_MAC_update');
  late final _EVP_MAC_update = _EVP_MAC_updatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_MAC_final(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Size> outl,
    int outsize,
  ) {
    return _EVP_MAC_final(
      ctx,
      out,
      outl,
      outsize,
    );
  }

  late final _EVP_MAC_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Size)>>('EVP_MAC_final');
  late final _EVP_MAC_final = _EVP_MAC_finalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, int)>();

  int EVP_MAC_finalXOF(
    ffi.Pointer<EVP_MAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outsize,
  ) {
    return _EVP_MAC_finalXOF(
      ctx,
      out,
      outsize,
    );
  }

  late final _EVP_MAC_finalXOFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MAC_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_MAC_finalXOF');
  late final _EVP_MAC_finalXOF = _EVP_MAC_finalXOFPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MAC_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<OSSL_PARAM> EVP_MAC_gettable_params(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_gettable_params(
      mac,
    );
  }

  late final _EVP_MAC_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_gettable_params');
  late final _EVP_MAC_gettable_params = _EVP_MAC_gettable_paramsPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MAC>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MAC_gettable_ctx_params(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_gettable_ctx_params(
      mac,
    );
  }

  late final _EVP_MAC_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_gettable_ctx_params');
  late final _EVP_MAC_gettable_ctx_params = _EVP_MAC_gettable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MAC>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MAC_settable_ctx_params(
    ffi.Pointer<EVP_MAC> mac,
  ) {
    return _EVP_MAC_settable_ctx_params(
      mac,
    );
  }

  late final _EVP_MAC_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MAC>)>>('EVP_MAC_settable_ctx_params');
  late final _EVP_MAC_settable_ctx_params = _EVP_MAC_settable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MAC>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MAC_CTX_gettable_params(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MAC_CTX>)>>('EVP_MAC_CTX_gettable_params');
  late final _EVP_MAC_CTX_gettable_params = _EVP_MAC_CTX_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MAC_CTX>)>();

  ffi.Pointer<OSSL_PARAM> EVP_MAC_CTX_settable_params(
    ffi.Pointer<EVP_MAC_CTX> ctx,
  ) {
    return _EVP_MAC_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_MAC_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_MAC_CTX>)>>('EVP_MAC_CTX_settable_params');
  late final _EVP_MAC_CTX_settable_params = _EVP_MAC_CTX_settable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_MAC_CTX>)>();

  void EVP_MAC_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MAC> mac, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MAC_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_MAC_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_MAC> mac,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MAC_do_all_provided');
  late final _EVP_MAC_do_all_provided = _EVP_MAC_do_all_providedPtr.asFunction<
      void Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MAC> mac, ffi.Pointer<ffi.Void> arg)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_MAC_names_do_all(
    ffi.Pointer<EVP_MAC> mac,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_MAC_names_do_all(
      mac,
      fn,
      data,
    );
  }

  late final _EVP_MAC_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MAC>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MAC_names_do_all');
  late final _EVP_MAC_names_do_all = _EVP_MAC_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MAC>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_RAND> EVP_RAND_fetch(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_RAND_fetch(
      libctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_RAND_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_RAND> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('EVP_RAND_fetch');
  late final _EVP_RAND_fetch = _EVP_RAND_fetchPtr.asFunction<
      ffi.Pointer<EVP_RAND> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_RAND_up_ref(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_up_ref(
      rand,
    );
  }

  late final _EVP_RAND_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND>)>>(
          'EVP_RAND_up_ref');
  late final _EVP_RAND_up_ref =
      _EVP_RAND_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_RAND>)>();

  void EVP_RAND_free(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_free(
      rand,
    );
  }

  late final _EVP_RAND_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_RAND>)>>(
          'EVP_RAND_free');
  late final _EVP_RAND_free =
      _EVP_RAND_freePtr.asFunction<void Function(ffi.Pointer<EVP_RAND>)>();

  ffi.Pointer<ffi.Char> EVP_RAND_get0_name(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_get0_name(
      rand,
    );
  }

  late final _EVP_RAND_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_get0_name');
  late final _EVP_RAND_get0_name = _EVP_RAND_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_RAND>)>();

  ffi.Pointer<ffi.Char> EVP_RAND_get0_description(
    ffi.Pointer<EVP_RAND> md,
  ) {
    return _EVP_RAND_get0_description(
      md,
    );
  }

  late final _EVP_RAND_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_get0_description');
  late final _EVP_RAND_get0_description = _EVP_RAND_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_RAND>)>();

  int EVP_RAND_is_a(
    ffi.Pointer<EVP_RAND> rand,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_RAND_is_a(
      rand,
      name,
    );
  }

  late final _EVP_RAND_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_RAND>, ffi.Pointer<ffi.Char>)>>('EVP_RAND_is_a');
  late final _EVP_RAND_is_a = _EVP_RAND_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_RAND_get0_provider(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_get0_provider(
      rand,
    );
  }

  late final _EVP_RAND_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_get0_provider');
  late final _EVP_RAND_get0_provider = _EVP_RAND_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_RAND>)>();

  int EVP_RAND_get_params(
    ffi.Pointer<EVP_RAND> rand,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_RAND_get_params(
      rand,
      params,
    );
  }

  late final _EVP_RAND_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_RAND>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_RAND_get_params');
  late final _EVP_RAND_get_params = _EVP_RAND_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<EVP_RAND_CTX> EVP_RAND_CTX_new(
    ffi.Pointer<EVP_RAND> rand,
    ffi.Pointer<EVP_RAND_CTX> parent,
  ) {
    return _EVP_RAND_CTX_new(
      rand,
      parent,
    );
  }

  late final _EVP_RAND_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_RAND_CTX> Function(ffi.Pointer<EVP_RAND>,
              ffi.Pointer<EVP_RAND_CTX>)>>('EVP_RAND_CTX_new');
  late final _EVP_RAND_CTX_new = _EVP_RAND_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_RAND_CTX> Function(
          ffi.Pointer<EVP_RAND>, ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_CTX_up_ref(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_CTX_up_ref(
      ctx,
    );
  }

  late final _EVP_RAND_CTX_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_CTX_up_ref');
  late final _EVP_RAND_CTX_up_ref = _EVP_RAND_CTX_up_refPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  void EVP_RAND_CTX_free(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_CTX_free(
      ctx,
    );
  }

  late final _EVP_RAND_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_CTX_free');
  late final _EVP_RAND_CTX_free = _EVP_RAND_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_RAND_CTX>)>();

  ffi.Pointer<EVP_RAND> EVP_RAND_CTX_get0_rand(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_CTX_get0_rand(
      ctx,
    );
  }

  late final _EVP_RAND_CTX_get0_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_RAND> Function(
              ffi.Pointer<EVP_RAND_CTX>)>>('EVP_RAND_CTX_get0_rand');
  late final _EVP_RAND_CTX_get0_rand = _EVP_RAND_CTX_get0_randPtr.asFunction<
      ffi.Pointer<EVP_RAND> Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_CTX_get_params(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_RAND_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_RAND_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_RAND_CTX_get_params');
  late final _EVP_RAND_CTX_get_params = _EVP_RAND_CTX_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_RAND_CTX_set_params(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_RAND_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_RAND_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_RAND_CTX_set_params');
  late final _EVP_RAND_CTX_set_params = _EVP_RAND_CTX_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_RAND_gettable_params(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_gettable_params(
      rand,
    );
  }

  late final _EVP_RAND_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_gettable_params');
  late final _EVP_RAND_gettable_params = _EVP_RAND_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_RAND>)>();

  ffi.Pointer<OSSL_PARAM> EVP_RAND_gettable_ctx_params(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_gettable_ctx_params(
      rand,
    );
  }

  late final _EVP_RAND_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_gettable_ctx_params');
  late final _EVP_RAND_gettable_ctx_params = _EVP_RAND_gettable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_RAND>)>();

  ffi.Pointer<OSSL_PARAM> EVP_RAND_settable_ctx_params(
    ffi.Pointer<EVP_RAND> rand,
  ) {
    return _EVP_RAND_settable_ctx_params(
      rand,
    );
  }

  late final _EVP_RAND_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_RAND>)>>('EVP_RAND_settable_ctx_params');
  late final _EVP_RAND_settable_ctx_params = _EVP_RAND_settable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_RAND>)>();

  ffi.Pointer<OSSL_PARAM> EVP_RAND_CTX_gettable_params(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_RAND_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_RAND_CTX>)>>('EVP_RAND_CTX_gettable_params');
  late final _EVP_RAND_CTX_gettable_params =
      _EVP_RAND_CTX_gettable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_RAND_CTX>)>();

  ffi.Pointer<OSSL_PARAM> EVP_RAND_CTX_settable_params(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_RAND_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_RAND_CTX>)>>('EVP_RAND_CTX_settable_params');
  late final _EVP_RAND_CTX_settable_params =
      _EVP_RAND_CTX_settable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_RAND_CTX>)>();

  void EVP_RAND_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_RAND> rand, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_RAND_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_RAND_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_RAND> rand,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_RAND_do_all_provided');
  late final _EVP_RAND_do_all_provided =
      _EVP_RAND_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_RAND> rand,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_RAND_names_do_all(
    ffi.Pointer<EVP_RAND> rand,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_RAND_names_do_all(
      rand,
      fn,
      data,
    );
  }

  late final _EVP_RAND_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_RAND>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_RAND_names_do_all');
  late final _EVP_RAND_names_do_all = _EVP_RAND_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_RAND>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_RAND_instantiate(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    int strength,
    int prediction_resistance,
    ffi.Pointer<ffi.UnsignedChar> pstr,
    int pstr_len,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_RAND_instantiate(
      ctx,
      strength,
      prediction_resistance,
      pstr,
      pstr_len,
      params,
    );
  }

  late final _EVP_RAND_instantiatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_RAND_CTX>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_RAND_instantiate');
  late final _EVP_RAND_instantiate = _EVP_RAND_instantiatePtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_RAND_uninstantiate(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_uninstantiate(
      ctx,
    );
  }

  late final _EVP_RAND_uninstantiatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_uninstantiate');
  late final _EVP_RAND_uninstantiate = _EVP_RAND_uninstantiatePtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_generate(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
    int strength,
    int prediction_resistance,
    ffi.Pointer<ffi.UnsignedChar> addin,
    int addin_len,
  ) {
    return _EVP_RAND_generate(
      ctx,
      out,
      outlen,
      strength,
      prediction_resistance,
      addin,
      addin_len,
    );
  }

  late final _EVP_RAND_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_RAND_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_RAND_generate');
  late final _EVP_RAND_generate = _EVP_RAND_generatePtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_RAND_reseed(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    int prediction_resistance,
    ffi.Pointer<ffi.UnsignedChar> ent,
    int ent_len,
    ffi.Pointer<ffi.UnsignedChar> addin,
    int addin_len,
  ) {
    return _EVP_RAND_reseed(
      ctx,
      prediction_resistance,
      ent,
      ent_len,
      addin,
      addin_len,
    );
  }

  late final _EVP_RAND_reseedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_RAND_CTX>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_RAND_reseed');
  late final _EVP_RAND_reseed = _EVP_RAND_reseedPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_RAND_CTX>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int EVP_RAND_nonce(
    ffi.Pointer<EVP_RAND_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
  ) {
    return _EVP_RAND_nonce(
      ctx,
      out,
      outlen,
    );
  }

  late final _EVP_RAND_noncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_RAND_nonce');
  late final _EVP_RAND_nonce = _EVP_RAND_noncePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_RAND_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_RAND_enable_locking(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_enable_locking(
      ctx,
    );
  }

  late final _EVP_RAND_enable_lockingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_enable_locking');
  late final _EVP_RAND_enable_locking = _EVP_RAND_enable_lockingPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_verify_zeroization(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_verify_zeroization(
      ctx,
    );
  }

  late final _EVP_RAND_verify_zeroizationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_verify_zeroization');
  late final _EVP_RAND_verify_zeroization = _EVP_RAND_verify_zeroizationPtr
      .asFunction<int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_get_strength(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_get_strength(
      ctx,
    );
  }

  late final _EVP_RAND_get_strengthPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EVP_RAND_CTX>)>>(
      'EVP_RAND_get_strength');
  late final _EVP_RAND_get_strength = _EVP_RAND_get_strengthPtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_RAND_get_state(
    ffi.Pointer<EVP_RAND_CTX> ctx,
  ) {
    return _EVP_RAND_get_state(
      ctx,
    );
  }

  late final _EVP_RAND_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_RAND_CTX>)>>(
          'EVP_RAND_get_state');
  late final _EVP_RAND_get_state = _EVP_RAND_get_statePtr.asFunction<
      int Function(ffi.Pointer<EVP_RAND_CTX>)>();

  int EVP_PKEY_decrypt_old(
    ffi.Pointer<ffi.UnsignedChar> dec_key,
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    int enc_key_len,
    ffi.Pointer<EVP_PKEY> private_key,
  ) {
    return _EVP_PKEY_decrypt_old(
      dec_key,
      enc_key,
      enc_key_len,
      private_key,
    );
  }

  late final _EVP_PKEY_decrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_decrypt_old');
  late final _EVP_PKEY_decrypt_old = _EVP_PKEY_decrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_encrypt_old(
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    ffi.Pointer<ffi.UnsignedChar> key,
    int key_len,
    ffi.Pointer<EVP_PKEY> pub_key,
  ) {
    return _EVP_PKEY_encrypt_old(
      enc_key,
      key,
      key_len,
      pub_key,
    );
  }

  late final _EVP_PKEY_encrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_encrypt_old');
  late final _EVP_PKEY_encrypt_old = _EVP_PKEY_encrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_is_a(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_PKEY_is_a(
      pkey,
      name,
    );
  }

  late final _EVP_PKEY_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>)>>('EVP_PKEY_is_a');
  late final _EVP_PKEY_is_a = _EVP_PKEY_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_type_names_do_all(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_type_names_do_all(
      pkey,
      fn,
      data,
    );
  }

  late final _EVP_PKEY_type_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_type_names_do_all');
  late final _EVP_PKEY_type_names_do_all =
      _EVP_PKEY_type_names_do_allPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_type(
    int type,
  ) {
    return _EVP_PKEY_type(
      type,
    );
  }

  late final _EVP_PKEY_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('EVP_PKEY_type');
  late final _EVP_PKEY_type = _EVP_PKEY_typePtr.asFunction<int Function(int)>();

  int EVP_PKEY_get_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_id(
      pkey,
    );
  }

  late final _EVP_PKEY_get_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_id');
  late final _EVP_PKEY_get_id =
      _EVP_PKEY_get_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_base_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_base_id(
      pkey,
    );
  }

  late final _EVP_PKEY_get_base_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_base_id');
  late final _EVP_PKEY_get_base_id = _EVP_PKEY_get_base_idPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_get_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_bits');
  late final _EVP_PKEY_get_bits =
      _EVP_PKEY_get_bitsPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_security_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_security_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_get_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_security_bits');
  late final _EVP_PKEY_get_security_bits = _EVP_PKEY_get_security_bitsPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_size(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_size(
      pkey,
    );
  }

  late final _EVP_PKEY_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_size');
  late final _EVP_PKEY_get_size =
      _EVP_PKEY_get_sizePtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_can_sign(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_can_sign(
      pkey,
    );
  }

  late final _EVP_PKEY_can_signPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_can_sign');
  late final _EVP_PKEY_can_sign =
      _EVP_PKEY_can_signPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return _EVP_PKEY_set_type(
      pkey,
      type,
    );
  }

  late final _EVP_PKEY_set_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_set_type');
  late final _EVP_PKEY_set_type = _EVP_PKEY_set_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_set_type_str(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_set_type_str(
      pkey,
      str,
      len,
    );
  }

  late final _EVP_PKEY_set_type_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_set_type_str');
  late final _EVP_PKEY_set_type_str = _EVP_PKEY_set_type_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_set_type_by_keymgmt(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_PKEY_set_type_by_keymgmt(
      pkey,
      keymgmt,
    );
  }

  late final _EVP_PKEY_set_type_by_keymgmtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_PKEY_set_type_by_keymgmt');
  late final _EVP_PKEY_set_type_by_keymgmt =
      _EVP_PKEY_set_type_by_keymgmtPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_KEYMGMT>)>();

  int EVP_PKEY_set1_engine(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_set1_engine(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_set1_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ENGINE>)>>('EVP_PKEY_set1_engine');
  late final _EVP_PKEY_set1_engine = _EVP_PKEY_set1_enginePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<ENGINE> EVP_PKEY_get0_engine(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_engine(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_enginePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get0_engine');
  late final _EVP_PKEY_get0_engine = _EVP_PKEY_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_assign(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _EVP_PKEY_assign(
      pkey,
      type,
      key,
    );
  }

  late final _EVP_PKEY_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_assign');
  late final _EVP_PKEY_assign = _EVP_PKEY_assignPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_get0(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0(
      pkey,
    );
  }

  late final _EVP_PKEY_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0');
  late final _EVP_PKEY_get0 = _EVP_PKEY_get0Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_hmac(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_hmac(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_hmacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_hmac');
  late final _EVP_PKEY_get0_hmac = _EVP_PKEY_get0_hmacPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_poly1305(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_poly1305(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_poly1305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_poly1305');
  late final _EVP_PKEY_get0_poly1305 = _EVP_PKEY_get0_poly1305Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_siphash(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_siphash(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_siphashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_siphash');
  late final _EVP_PKEY_get0_siphash = _EVP_PKEY_get0_siphashPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_set1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<rsa_st> key,
  ) {
    return _EVP_PKEY_set1_RSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<rsa_st>)>>('EVP_PKEY_set1_RSA');
  late final _EVP_PKEY_set1_RSA = _EVP_PKEY_set1_RSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<rsa_st>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get0_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_RSAPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get0_RSA');
  late final _EVP_PKEY_get0_RSA = _EVP_PKEY_get0_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_RSAPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get1_RSA');
  late final _EVP_PKEY_get1_RSA = _EVP_PKEY_get1_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dsa_st> key,
  ) {
    return _EVP_PKEY_set1_DSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<dsa_st>)>>('EVP_PKEY_set1_DSA');
  late final _EVP_PKEY_set1_DSA = _EVP_PKEY_set1_DSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dsa_st>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get0_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DSAPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get0_DSA');
  late final _EVP_PKEY_get0_DSA = _EVP_PKEY_get0_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DSAPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get1_DSA');
  late final _EVP_PKEY_get1_DSA = _EVP_PKEY_get1_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dh_st> key,
  ) {
    return _EVP_PKEY_set1_DH(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>>('EVP_PKEY_set1_DH');
  late final _EVP_PKEY_set1_DH = _EVP_PKEY_set1_DHPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get0_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DHPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get0_DH');
  late final _EVP_PKEY_get0_DH = _EVP_PKEY_get0_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DHPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>>(
      'EVP_PKEY_get1_DH');
  late final _EVP_PKEY_get1_DH = _EVP_PKEY_get1_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ec_key_st> key,
  ) {
    return _EVP_PKEY_set1_EC_KEY(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ec_key_st>)>>('EVP_PKEY_set1_EC_KEY');
  late final _EVP_PKEY_set1_EC_KEY = _EVP_PKEY_set1_EC_KEYPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ec_key_st>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get0_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_EC_KEY');
  late final _EVP_PKEY_get0_EC_KEY = _EVP_PKEY_get0_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_EC_KEY');
  late final _EVP_PKEY_get1_EC_KEY = _EVP_PKEY_get1_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new() {
    return _EVP_PKEY_new();
  }

  late final _EVP_PKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function()>>(
          'EVP_PKEY_new');
  late final _EVP_PKEY_new =
      _EVP_PKEY_newPtr.asFunction<ffi.Pointer<EVP_PKEY> Function()>();

  int EVP_PKEY_up_ref(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_up_ref(
      pkey,
    );
  }

  late final _EVP_PKEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_up_ref');
  late final _EVP_PKEY_up_ref =
      _EVP_PKEY_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_dup(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_dup(
      pkey,
    );
  }

  late final _EVP_PKEY_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_dup');
  late final _EVP_PKEY_dup = _EVP_PKEY_dupPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY>)>();

  void EVP_PKEY_free(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_free(
      pkey,
    );
  }

  late final _EVP_PKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_free');
  late final _EVP_PKEY_free =
      _EVP_PKEY_freePtr.asFunction<void Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ffi.Char> EVP_PKEY_get0_description(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_description(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_description');
  late final _EVP_PKEY_get0_description = _EVP_PKEY_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_PKEY_get0_provider(
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return _EVP_PKEY_get0_provider(
      key,
    );
  }

  late final _EVP_PKEY_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_provider');
  late final _EVP_PKEY_get0_provider = _EVP_PKEY_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PublicKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PublicKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PublicKey');
  late final _d2i_PublicKey = _d2i_PublicKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PublicKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PublicKey(
      a,
      pp,
    );
  }

  late final _i2d_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PublicKey');
  late final _i2d_PublicKey = _i2d_PublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey_ex(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _d2i_PrivateKey_ex(
      type,
      a,
      pp,
      length,
      libctx,
      propq,
    );
  }

  late final _d2i_PrivateKey_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('d2i_PrivateKey_ex');
  late final _d2i_PrivateKey_ex = _d2i_PrivateKey_exPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          int,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PrivateKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PrivateKey');
  late final _d2i_PrivateKey = _d2i_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<EVP_PKEY> d2i_AutoPrivateKey_ex(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _d2i_AutoPrivateKey_ex(
      a,
      pp,
      length,
      libctx,
      propq,
    );
  }

  late final _d2i_AutoPrivateKey_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('d2i_AutoPrivateKey_ex');
  late final _d2i_AutoPrivateKey_ex = _d2i_AutoPrivateKey_exPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_PKEY> d2i_AutoPrivateKey(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_AutoPrivateKey(
      a,
      pp,
      length,
    );
  }

  late final _d2i_AutoPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_AutoPrivateKey');
  late final _d2i_AutoPrivateKey = _d2i_AutoPrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PrivateKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PrivateKey(
      a,
      pp,
    );
  }

  late final _i2d_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PrivateKey');
  late final _i2d_PrivateKey = _i2d_PrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int i2d_KeyParams(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_KeyParams(
      a,
      pp,
    );
  }

  late final _i2d_KeyParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_KeyParams');
  late final _i2d_KeyParams = _i2d_KeyParamsPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EVP_PKEY> d2i_KeyParams(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_KeyParams(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_KeyParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_KeyParams');
  late final _d2i_KeyParams = _d2i_KeyParamsPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_KeyParams_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _i2d_KeyParams_bio(
      bp,
      pkey,
    );
  }

  late final _i2d_KeyParams_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>>('i2d_KeyParams_bio');
  late final _i2d_KeyParams_bio = _i2d_KeyParams_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_KeyParams_bio(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<BIO> in1,
  ) {
    return _d2i_KeyParams_bio(
      type,
      a,
      in1,
    );
  }

  late final _d2i_KeyParams_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<BIO>)>>('d2i_KeyParams_bio');
  late final _d2i_KeyParams_bio = _d2i_KeyParams_bioPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>, ffi.Pointer<BIO>)>();

  int EVP_PKEY_copy_parameters(
    ffi.Pointer<EVP_PKEY> to,
    ffi.Pointer<EVP_PKEY> from,
  ) {
    return _EVP_PKEY_copy_parameters(
      to,
      from,
    );
  }

  late final _EVP_PKEY_copy_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_copy_parameters');
  late final _EVP_PKEY_copy_parameters = _EVP_PKEY_copy_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_missing_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_missing_parameters(
      pkey,
    );
  }

  late final _EVP_PKEY_missing_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_missing_parameters');
  late final _EVP_PKEY_missing_parameters = _EVP_PKEY_missing_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_save_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
    int mode,
  ) {
    return _EVP_PKEY_save_parameters(
      pkey,
      mode,
    );
  }

  late final _EVP_PKEY_save_parametersPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_save_parameters');
  late final _EVP_PKEY_save_parameters = _EVP_PKEY_save_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_parameters_eq(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_parameters_eq(
      a,
      b,
    );
  }

  late final _EVP_PKEY_parameters_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_parameters_eq');
  late final _EVP_PKEY_parameters_eq = _EVP_PKEY_parameters_eqPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_eq(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_eq(
      a,
      b,
    );
  }

  late final _EVP_PKEY_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_eq');
  late final _EVP_PKEY_eq = _EVP_PKEY_eqPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_cmp_parameters(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp_parameters(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmp_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp_parameters');
  late final _EVP_PKEY_cmp_parameters = _EVP_PKEY_cmp_parametersPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_cmp(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp');
  late final _EVP_PKEY_cmp = _EVP_PKEY_cmpPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_print_public(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_public(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_public');
  late final _EVP_PKEY_print_public = _EVP_PKEY_print_publicPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_private(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_private(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_private');
  late final _EVP_PKEY_print_private = _EVP_PKEY_print_privatePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_params(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_params(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_params');
  late final _EVP_PKEY_print_params = _EVP_PKEY_print_paramsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_public_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_public_fp(
      fp,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_public_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_public_fp');
  late final _EVP_PKEY_print_public_fp =
      _EVP_PKEY_print_public_fpPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, int,
              ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_private_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_private_fp(
      fp,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_private_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_private_fp');
  late final _EVP_PKEY_print_private_fp =
      _EVP_PKEY_print_private_fpPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, int,
              ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_params_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_params_fp(
      fp,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_params_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_params_fp');
  late final _EVP_PKEY_print_params_fp =
      _EVP_PKEY_print_params_fpPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>, int,
              ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_get_default_digest_nid(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> pnid,
  ) {
    return _EVP_PKEY_get_default_digest_nid(
      pkey,
      pnid,
    );
  }

  late final _EVP_PKEY_get_default_digest_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_default_digest_nid');
  late final _EVP_PKEY_get_default_digest_nid =
      _EVP_PKEY_get_default_digest_nidPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_get_default_digest_name(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> mdname,
    int mdname_sz,
  ) {
    return _EVP_PKEY_get_default_digest_name(
      pkey,
      mdname,
      mdname_sz,
    );
  }

  late final _EVP_PKEY_get_default_digest_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('EVP_PKEY_get_default_digest_name');
  late final _EVP_PKEY_get_default_digest_name =
      _EVP_PKEY_get_default_digest_namePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_digestsign_supports_digest(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_PKEY_digestsign_supports_digest(
      pkey,
      libctx,
      name,
      propq,
    );
  }

  late final _EVP_PKEY_digestsign_supports_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_digestsign_supports_digest');
  late final _EVP_PKEY_digestsign_supports_digest =
      _EVP_PKEY_digestsign_supports_digestPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_set1_encoded_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pub,
    int publen,
  ) {
    return _EVP_PKEY_set1_encoded_public_key(
      pkey,
      pub,
      publen,
    );
  }

  late final _EVP_PKEY_set1_encoded_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_set1_encoded_public_key');
  late final _EVP_PKEY_set1_encoded_public_key =
      _EVP_PKEY_set1_encoded_public_keyPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get1_encoded_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ppub,
  ) {
    return _EVP_PKEY_get1_encoded_public_key(
      pkey,
      ppub,
    );
  }

  late final _EVP_PKEY_get1_encoded_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<EVP_PKEY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'EVP_PKEY_get1_encoded_public_key');
  late final _EVP_PKEY_get1_encoded_public_key =
      _EVP_PKEY_get1_encoded_public_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int EVP_CIPHER_param_to_asn1(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_param_to_asn1(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_param_to_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_param_to_asn1');
  late final _EVP_CIPHER_param_to_asn1 =
      _EVP_CIPHER_param_to_asn1Ptr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_asn1_to_param(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_asn1_to_param(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_asn1_to_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_asn1_to_param');
  late final _EVP_CIPHER_asn1_to_param =
      _EVP_CIPHER_asn1_to_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_set_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_set_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_set_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_set_asn1_iv');
  late final _EVP_CIPHER_set_asn1_iv = _EVP_CIPHER_set_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_get_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_get_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_get_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_get_asn1_iv');
  late final _EVP_CIPHER_get_asn1_iv = _EVP_CIPHER_get_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int PKCS5_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_PBE_keyivgen');
  late final _PKCS5_PBE_keyivgen = _PKCS5_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int PKCS5_PBE_keyivgen_ex(
    ffi.Pointer<EVP_CIPHER_CTX> cctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _PKCS5_PBE_keyivgen_ex(
      cctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
      libctx,
      propq,
    );
  }

  late final _PKCS5_PBE_keyivgen_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('PKCS5_PBE_keyivgen_ex');
  late final _PKCS5_PBE_keyivgen_ex = _PKCS5_PBE_keyivgen_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int PKCS5_PBKDF2_HMAC_SHA1(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC_SHA1(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMAC_SHA1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC_SHA1');
  late final _PKCS5_PBKDF2_HMAC_SHA1 = _PKCS5_PBKDF2_HMAC_SHA1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_PBKDF2_HMAC(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    ffi.Pointer<EVP_MD> digest,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      digest,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMACPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC');
  late final _PKCS5_PBKDF2_HMAC = _PKCS5_PBKDF2_HMACPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, ffi.Pointer<EVP_MD>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_v2_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_PBE_keyivgen');
  late final _PKCS5_v2_PBE_keyivgen = _PKCS5_v2_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int PKCS5_v2_PBE_keyivgen_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _PKCS5_v2_PBE_keyivgen_ex(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
      libctx,
      propq,
    );
  }

  late final _PKCS5_v2_PBE_keyivgen_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('PKCS5_v2_PBE_keyivgen_ex');
  late final _PKCS5_v2_PBE_keyivgen_ex =
      _PKCS5_v2_PBE_keyivgen_exPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>();

  int EVP_PBE_scrypt(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int N,
    int r,
    int p,
    int maxmem,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PBE_scrypt(
      pass,
      passlen,
      salt,
      saltlen,
      N,
      r,
      p,
      maxmem,
      key,
      keylen,
    );
  }

  late final _EVP_PBE_scryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PBE_scrypt');
  late final _EVP_PBE_scrypt = _EVP_PBE_scryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PBE_scrypt_ex(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int N,
    int r,
    int p,
    int maxmem,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_PBE_scrypt_ex(
      pass,
      passlen,
      salt,
      saltlen,
      N,
      r,
      p,
      maxmem,
      key,
      keylen,
      ctx,
      propq,
    );
  }

  late final _EVP_PBE_scrypt_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_PBE_scrypt_ex');
  late final _EVP_PBE_scrypt_ex = _EVP_PBE_scrypt_exPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int PKCS5_v2_scrypt_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_scrypt_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      c,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_scrypt_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_scrypt_keyivgen');
  late final _PKCS5_v2_scrypt_keyivgen =
      _PKCS5_v2_scrypt_keyivgenPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              int)>();

  int PKCS5_v2_scrypt_keyivgen_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<EVP_MD> md,
    int en_de,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _PKCS5_v2_scrypt_keyivgen_ex(
      ctx,
      pass,
      passlen,
      param,
      c,
      md,
      en_de,
      libctx,
      propq,
    );
  }

  late final _PKCS5_v2_scrypt_keyivgen_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('PKCS5_v2_scrypt_keyivgen_ex');
  late final _PKCS5_v2_scrypt_keyivgen_ex =
      _PKCS5_v2_scrypt_keyivgen_exPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>();

  void PKCS5_PBE_add() {
    return _PKCS5_PBE_add();
  }

  late final _PKCS5_PBE_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PKCS5_PBE_add');
  late final _PKCS5_PBE_add = _PKCS5_PBE_addPtr.asFunction<void Function()>();

  int EVP_PBE_CipherInit(
    ffi.Pointer<ASN1_OBJECT> pbe_obj,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int en_de,
  ) {
    return _EVP_PBE_CipherInit(
      pbe_obj,
      pass,
      passlen,
      param,
      ctx,
      en_de,
    );
  }

  late final _EVP_PBE_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_PBE_CipherInit');
  late final _EVP_PBE_CipherInit = _EVP_PBE_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ASN1_TYPE>, ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_PBE_CipherInit_ex(
    ffi.Pointer<ASN1_OBJECT> pbe_obj,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int en_de,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EVP_PBE_CipherInit_ex(
      pbe_obj,
      pass,
      passlen,
      param,
      ctx,
      en_de,
      libctx,
      propq,
    );
  }

  late final _EVP_PBE_CipherInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_PBE_CipherInit_ex');
  late final _EVP_PBE_CipherInit_ex = _EVP_PBE_CipherInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_OBJECT>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER_CTX>,
          int,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_PBE_alg_add_type(
    int pbe_type,
    int pbe_nid,
    int cipher_nid,
    int md_nid,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add_type(
      pbe_type,
      pbe_nid,
      cipher_nid,
      md_nid,
      keygen,
    );
  }

  late final _EVP_PBE_alg_add_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add_type');
  late final _EVP_PBE_alg_add_type = _EVP_PBE_alg_add_typePtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_alg_add(
    int nid,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add(
      nid,
      cipher,
      md,
      keygen,
    );
  }

  late final _EVP_PBE_alg_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add');
  late final _EVP_PBE_alg_add = _EVP_PBE_alg_addPtr.asFunction<
      int Function(int, ffi.Pointer<EVP_CIPHER>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_find(
    int type,
    int pbe_nid,
    ffi.Pointer<ffi.Int> pcnid,
    ffi.Pointer<ffi.Int> pmnid,
    ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>> pkeygen,
  ) {
    return _EVP_PBE_find(
      type,
      pbe_nid,
      pcnid,
      pmnid,
      pkeygen,
    );
  }

  late final _EVP_PBE_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>>('EVP_PBE_find');
  late final _EVP_PBE_find = _EVP_PBE_findPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>();

  int EVP_PBE_find_ex(
    int type,
    int pbe_nid,
    ffi.Pointer<ffi.Int> pcnid,
    ffi.Pointer<ffi.Int> pmnid,
    ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>> pkeygen,
    ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN_EX>> pkeygen_ex,
  ) {
    return _EVP_PBE_find_ex(
      type,
      pbe_nid,
      pcnid,
      pmnid,
      pkeygen,
      pkeygen_ex,
    );
  }

  late final _EVP_PBE_find_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>,
              ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN_EX>>)>>('EVP_PBE_find_ex');
  late final _EVP_PBE_find_ex = _EVP_PBE_find_exPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>,
          ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN_EX>>)>();

  void EVP_PBE_cleanup() {
    return _EVP_PBE_cleanup();
  }

  late final _EVP_PBE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_PBE_cleanup');
  late final _EVP_PBE_cleanup =
      _EVP_PBE_cleanupPtr.asFunction<void Function()>();

  int EVP_PBE_get(
    ffi.Pointer<ffi.Int> ptype,
    ffi.Pointer<ffi.Int> ppbe_nid,
    int num,
  ) {
    return _EVP_PBE_get(
      ptype,
      ppbe_nid,
      num,
    );
  }

  late final _EVP_PBE_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Size)>>('EVP_PBE_get');
  late final _EVP_PBE_get = _EVP_PBE_getPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  int EVP_PKEY_asn1_get_count() {
    return _EVP_PKEY_asn1_get_count();
  }

  late final _EVP_PKEY_asn1_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'EVP_PKEY_asn1_get_count');
  late final _EVP_PKEY_asn1_get_count =
      _EVP_PKEY_asn1_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_get0(
    int idx,
  ) {
    return _EVP_PKEY_asn1_get0(
      idx,
    );
  }

  late final _EVP_PKEY_asn1_get0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(ffi.Int)>>(
      'EVP_PKEY_asn1_get0');
  late final _EVP_PKEY_asn1_get0 = _EVP_PKEY_asn1_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    int type,
  ) {
    return _EVP_PKEY_asn1_find(
      pe,
      type,
    );
  }

  late final _EVP_PKEY_asn1_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Int)>>('EVP_PKEY_asn1_find');
  late final _EVP_PKEY_asn1_find = _EVP_PKEY_asn1_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find_str(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_asn1_find_str(
      pe,
      str,
      len,
    );
  }

  late final _EVP_PKEY_asn1_find_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_asn1_find_str');
  late final _EVP_PKEY_asn1_find_str = _EVP_PKEY_asn1_find_strPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_asn1_add0(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_add0(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_add0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>(
      'EVP_PKEY_asn1_add0');
  late final _EVP_PKEY_asn1_add0 = _EVP_PKEY_asn1_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  int EVP_PKEY_asn1_add_alias(
    int to,
    int from,
  ) {
    return _EVP_PKEY_asn1_add_alias(
      to,
      from,
    );
  }

  late final _EVP_PKEY_asn1_add_aliasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'EVP_PKEY_asn1_add_alias');
  late final _EVP_PKEY_asn1_add_alias =
      _EVP_PKEY_asn1_add_aliasPtr.asFunction<int Function(int, int)>();

  int EVP_PKEY_asn1_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pkey_base_id,
    ffi.Pointer<ffi.Int> ppkey_flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pinfo,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ppem_str,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_get0_info(
      ppkey_id,
      pkey_base_id,
      ppkey_flags,
      pinfo,
      ppem_str,
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_get0_info');
  late final _EVP_PKEY_asn1_get0_info = _EVP_PKEY_asn1_get0_infoPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_get0_asn1(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_asn1(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_asn1');
  late final _EVP_PKEY_get0_asn1 = _EVP_PKEY_get0_asn1Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_new(
    int id,
    int flags,
    ffi.Pointer<ffi.Char> pem_str,
    ffi.Pointer<ffi.Char> info,
  ) {
    return _EVP_PKEY_asn1_new(
      id,
      flags,
      pem_str,
      info,
    );
  }

  late final _EVP_PKEY_asn1_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_asn1_new');
  late final _EVP_PKEY_asn1_new = _EVP_PKEY_asn1_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void EVP_PKEY_asn1_copy(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> dst,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> src,
  ) {
    return _EVP_PKEY_asn1_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_asn1_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_copy');
  late final _EVP_PKEY_asn1_copy = _EVP_PKEY_asn1_copyPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_free(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_free');
  late final _EVP_PKEY_asn1_free = _EVP_PKEY_asn1_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_set_public(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk, ffi.Pointer<X509_PUBKEY> pub)>>
        pub_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<X509_PUBKEY> pub, ffi.Pointer<EVP_PKEY> pk)>>
        pub_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>
        pub_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        pub_print,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_size,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_bits,
  ) {
    return _EVP_PKEY_asn1_set_public(
      ameth,
      pub_decode,
      pub_encode,
      pub_cmp,
      pub_print,
      pkey_size,
      pkey_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<X509_PUBKEY> pub)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_PUBKEY> pub,
                              ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> a,
                              ffi.Pointer<EVP_PKEY> b)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIO> out,
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int indent,
                              ffi.Pointer<ASN1_PCTX> pctx)>>,
                  ffi.Pointer<
                      ffi
                      .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_public');
  late final _EVP_PKEY_asn1_set_public = _EVP_PKEY_asn1_set_publicPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> pk, ffi.Pointer<X509_PUBKEY> pub)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_PUBKEY> pub, ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO> out,
                      ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Int indent,
                      ffi.Pointer<ASN1_PCTX> pctx)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_private(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>
        priv_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                    ffi.Pointer<EVP_PKEY> pk)>>
        priv_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        priv_print,
  ) {
    return _EVP_PKEY_asn1_set_private(
      ameth,
      priv_decode,
      priv_encode,
      priv_print,
    );
  }

  late final _EVP_PKEY_asn1_set_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                              ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIO> out,
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int indent,
                              ffi.Pointer<ASN1_PCTX> pctx)>>)>>(
      'EVP_PKEY_asn1_set_private');
  late final _EVP_PKEY_asn1_set_private =
      _EVP_PKEY_asn1_set_privatePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                          ffi.Pointer<EVP_PKEY> pk)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO> out,
                          ffi.Pointer<EVP_PKEY> pkey,
                          ffi.Int indent,
                          ffi.Pointer<ASN1_PCTX> pctx)>>)>();

  void EVP_PKEY_asn1_set_param(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                    ffi.Int derlen)>>
        param_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>
        param_encode,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        param_missing,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> to, ffi.Pointer<EVP_PKEY> from)>>
        param_copy,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>
        param_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        param_print,
  ) {
    return _EVP_PKEY_asn1_set_param(
      ameth,
      param_decode,
      param_encode,
      param_missing,
      param_copy,
      param_cmp,
      param_print,
    );
  }

  late final _EVP_PKEY_asn1_set_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                              ffi.Int derlen)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> to,
                              ffi.Pointer<EVP_PKEY> from)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> a,
                              ffi.Pointer<EVP_PKEY> b)>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO> out, ffi.Pointer<EVP_PKEY> pkey, ffi.Int indent, ffi.Pointer<ASN1_PCTX> pctx)>>)>>(
      'EVP_PKEY_asn1_set_param');
  late final _EVP_PKEY_asn1_set_param = _EVP_PKEY_asn1_set_paramPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                      ffi.Int derlen)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> to, ffi.Pointer<EVP_PKEY> from)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO> out, ffi.Pointer<EVP_PKEY> pkey, ffi.Int indent, ffi.Pointer<ASN1_PCTX> pctx)>>)>();

  void EVP_PKEY_asn1_set_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>
        pkey_free,
  ) {
    return _EVP_PKEY_asn1_set_free(
      ameth,
      pkey_free,
    );
  }

  late final _EVP_PKEY_asn1_set_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_asn1_set_free');
  late final _EVP_PKEY_asn1_set_free = _EVP_PKEY_asn1_set_freePtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_asn1_set_ctrl(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey, ffi.Int op,
                    ffi.Long arg1, ffi.Pointer<ffi.Void> arg2)>>
        pkey_ctrl,
  ) {
    return _EVP_PKEY_asn1_set_ctrl(
      ameth,
      pkey_ctrl,
    );
  }

  late final _EVP_PKEY_asn1_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int op,
                              ffi.Long arg1,
                              ffi.Pointer<ffi.Void> arg2)>>)>>(
      'EVP_PKEY_asn1_set_ctrl');
  late final _EVP_PKEY_asn1_set_ctrl = _EVP_PKEY_asn1_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey, ffi.Int op,
                      ffi.Long arg1, ffi.Pointer<ffi.Void> arg2)>>)>();

  void EVP_PKEY_asn1_set_item(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ASN1_ITEM> it,
                    ffi.Pointer<ffi.Void> data,
                    ffi.Pointer<X509_ALGOR> a,
                    ffi.Pointer<ASN1_BIT_STRING> sig,
                    ffi.Pointer<EVP_PKEY> pkey)>>
        item_verify,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ASN1_ITEM> it,
                    ffi.Pointer<ffi.Void> data,
                    ffi.Pointer<X509_ALGOR> alg1,
                    ffi.Pointer<X509_ALGOR> alg2,
                    ffi.Pointer<ASN1_BIT_STRING> sig)>>
        item_sign,
  ) {
    return _EVP_PKEY_asn1_set_item(
      ameth,
      item_verify,
      item_sign,
    );
  }

  late final _EVP_PKEY_asn1_set_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ASN1_ITEM> it,
                              ffi.Pointer<ffi.Void> data,
                              ffi.Pointer<X509_ALGOR> a,
                              ffi.Pointer<ASN1_BIT_STRING> sig,
                              ffi.Pointer<EVP_PKEY> pkey)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ASN1_ITEM> it,
                              ffi.Pointer<ffi.Void> data,
                              ffi.Pointer<X509_ALGOR> alg1,
                              ffi.Pointer<X509_ALGOR> alg2,
                              ffi.Pointer<ASN1_BIT_STRING> sig)>>)>>(
      'EVP_PKEY_asn1_set_item');
  late final _EVP_PKEY_asn1_set_item = _EVP_PKEY_asn1_set_itemPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ASN1_ITEM> it,
                      ffi.Pointer<ffi.Void> data,
                      ffi.Pointer<X509_ALGOR> a,
                      ffi.Pointer<ASN1_BIT_STRING> sig,
                      ffi.Pointer<EVP_PKEY> pkey)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ASN1_ITEM> it,
                      ffi.Pointer<ffi.Void> data,
                      ffi.Pointer<X509_ALGOR> alg1,
                      ffi.Pointer<X509_ALGOR> alg2,
                      ffi.Pointer<ASN1_BIT_STRING> sig)>>)>();

  void EVP_PKEY_asn1_set_siginf(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<X509_SIG_INFO> siginf,
                    ffi.Pointer<X509_ALGOR> alg, ffi.Pointer<ASN1_STRING> sig)>>
        siginf_set,
  ) {
    return _EVP_PKEY_asn1_set_siginf(
      ameth,
      siginf_set,
    );
  }

  late final _EVP_PKEY_asn1_set_siginfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<X509_SIG_INFO> siginf,
                              ffi.Pointer<X509_ALGOR> alg,
                              ffi.Pointer<ASN1_STRING> sig)>>)>>(
      'EVP_PKEY_asn1_set_siginf');
  late final _EVP_PKEY_asn1_set_siginf =
      _EVP_PKEY_asn1_set_siginfPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<X509_SIG_INFO> siginf,
                          ffi.Pointer<X509_ALGOR> alg,
                          ffi.Pointer<ASN1_STRING> sig)>>)>();

  void EVP_PKEY_asn1_set_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_check,
  ) {
    return _EVP_PKEY_asn1_set_check(
      ameth,
      pkey_check,
    );
  }

  late final _EVP_PKEY_asn1_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_check');
  late final _EVP_PKEY_asn1_set_check = _EVP_PKEY_asn1_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi
              .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_public_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_pub_check,
  ) {
    return _EVP_PKEY_asn1_set_public_check(
      ameth,
      pkey_pub_check,
    );
  }

  late final _EVP_PKEY_asn1_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_public_check');
  late final _EVP_PKEY_asn1_set_public_check =
      _EVP_PKEY_asn1_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_param_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_param_check,
  ) {
    return _EVP_PKEY_asn1_set_param_check(
      ameth,
      pkey_param_check,
    );
  }

  late final _EVP_PKEY_asn1_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_param_check');
  late final _EVP_PKEY_asn1_set_param_check =
      _EVP_PKEY_asn1_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_set_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> priv, ffi.Size len)>>
        set_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_set_priv_key(
      ameth,
      set_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_priv_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Size len)>>)>>('EVP_PKEY_asn1_set_set_priv_key');
  late final _EVP_PKEY_asn1_set_set_priv_key =
      _EVP_PKEY_asn1_set_set_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Size len)>>)>();

  void EVP_PKEY_asn1_set_set_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> pub, ffi.Size len)>>
        set_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_set_pub_key(
      ameth,
      set_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_pub_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Size len)>>)>>('EVP_PKEY_asn1_set_set_pub_key');
  late final _EVP_PKEY_asn1_set_set_pub_key =
      _EVP_PKEY_asn1_set_set_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Size len)>>)>();

  void EVP_PKEY_asn1_set_get_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> priv,
                    ffi.Pointer<ffi.Size> len)>>
        get_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_get_priv_key(
      ameth,
      get_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_priv_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<ffi.UnsignedChar> priv,
                              ffi.Pointer<ffi.Size> len)>>)>>(
      'EVP_PKEY_asn1_set_get_priv_key');
  late final _EVP_PKEY_asn1_set_get_priv_key =
      _EVP_PKEY_asn1_set_get_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Pointer<ffi.Size> len)>>)>();

  void EVP_PKEY_asn1_set_get_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> pub,
                    ffi.Pointer<ffi.Size> len)>>
        get_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_get_pub_key(
      ameth,
      get_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_pub_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<ffi.UnsignedChar> pub,
                              ffi.Pointer<ffi.Size> len)>>)>>(
      'EVP_PKEY_asn1_set_get_pub_key');
  late final _EVP_PKEY_asn1_set_get_pub_key =
      _EVP_PKEY_asn1_set_get_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Pointer<ffi.Size> len)>>)>();

  void EVP_PKEY_asn1_set_security_bits(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_security_bits,
  ) {
    return _EVP_PKEY_asn1_set_security_bits(
      ameth,
      pkey_security_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_security_bitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_security_bits');
  late final _EVP_PKEY_asn1_set_security_bits =
      _EVP_PKEY_asn1_set_security_bitsPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  int EVP_PKEY_CTX_get_signature_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_MD>> md,
  ) {
    return _EVP_PKEY_CTX_get_signature_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_get_signature_mdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                  ffi.Pointer<ffi.Pointer<EVP_MD>>)>>(
      'EVP_PKEY_CTX_get_signature_md');
  late final _EVP_PKEY_CTX_get_signature_md =
      _EVP_PKEY_CTX_get_signature_mdPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_MD>>)>();

  int EVP_PKEY_CTX_set_signature_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_signature_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_set_signature_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_MD>)>>('EVP_PKEY_CTX_set_signature_md');
  late final _EVP_PKEY_CTX_set_signature_md =
      _EVP_PKEY_CTX_set_signature_mdPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_PKEY_CTX_set1_id(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> id,
    int len,
  ) {
    return _EVP_PKEY_CTX_set1_id(
      ctx,
      id,
      len,
    );
  }

  late final _EVP_PKEY_CTX_set1_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_id');
  late final _EVP_PKEY_CTX_set1_id = _EVP_PKEY_CTX_set1_idPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_PKEY_CTX_get1_id(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> id,
  ) {
    return _EVP_PKEY_CTX_get1_id(
      ctx,
      id,
    );
  }

  late final _EVP_PKEY_CTX_get1_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_get1_id');
  late final _EVP_PKEY_CTX_get1_id = _EVP_PKEY_CTX_get1_idPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_CTX_get1_id_len(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Size> id_len,
  ) {
    return _EVP_PKEY_CTX_get1_id_len(
      ctx,
      id_len,
    );
  }

  late final _EVP_PKEY_CTX_get1_id_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_CTX_get1_id_len');
  late final _EVP_PKEY_CTX_get1_id_len =
      _EVP_PKEY_CTX_get1_id_lenPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_CTX_set_kem_op(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> op,
  ) {
    return _EVP_PKEY_CTX_set_kem_op(
      ctx,
      op,
    );
  }

  late final _EVP_PKEY_CTX_set_kem_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_set_kem_op');
  late final _EVP_PKEY_CTX_set_kem_op = _EVP_PKEY_CTX_set_kem_opPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_PKEY_get0_type_name(
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return _EVP_PKEY_get0_type_name(
      key,
    );
  }

  late final _EVP_PKEY_get0_type_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_type_name');
  late final _EVP_PKEY_get0_type_name = _EVP_PKEY_get0_type_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_CTX_set_mac_key(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PKEY_CTX_set_mac_key(
      ctx,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_CTX_set_mac_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set_mac_key');
  late final _EVP_PKEY_CTX_set_mac_key =
      _EVP_PKEY_CTX_set_mac_keyPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_find(
    int type,
  ) {
    return _EVP_PKEY_meth_find(
      type,
    );
  }

  late final _EVP_PKEY_meth_findPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Int)>>(
      'EVP_PKEY_meth_find');
  late final _EVP_PKEY_meth_find = _EVP_PKEY_meth_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_new(
    int id,
    int flags,
  ) {
    return _EVP_PKEY_meth_new(
      id,
      flags,
    );
  }

  late final _EVP_PKEY_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_METHOD> Function(
              ffi.Int, ffi.Int)>>('EVP_PKEY_meth_new');
  late final _EVP_PKEY_meth_new = _EVP_PKEY_meth_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int, int)>();

  void EVP_PKEY_meth_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pflags,
    ffi.Pointer<EVP_PKEY_METHOD> meth,
  ) {
    return _EVP_PKEY_meth_get0_info(
      ppkey_id,
      pflags,
      meth,
    );
  }

  late final _EVP_PKEY_meth_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_get0_info');
  late final _EVP_PKEY_meth_get0_info = _EVP_PKEY_meth_get0_infoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_copy(
    ffi.Pointer<EVP_PKEY_METHOD> dst,
    ffi.Pointer<EVP_PKEY_METHOD> src,
  ) {
    return _EVP_PKEY_meth_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_meth_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_copy');
  late final _EVP_PKEY_meth_copy = _EVP_PKEY_meth_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>, ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_free(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_free(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_free');
  late final _EVP_PKEY_meth_free = _EVP_PKEY_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_add0(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_add0(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_add0Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_add0');
  late final _EVP_PKEY_meth_add0 = _EVP_PKEY_meth_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_remove(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_remove(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_remove');
  late final _EVP_PKEY_meth_remove = _EVP_PKEY_meth_removePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_get_count() {
    return _EVP_PKEY_meth_get_count();
  }

  late final _EVP_PKEY_meth_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'EVP_PKEY_meth_get_count');
  late final _EVP_PKEY_meth_get_count =
      _EVP_PKEY_meth_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_get0(
    int idx,
  ) {
    return _EVP_PKEY_meth_get0(
      idx,
    );
  }

  late final _EVP_PKEY_meth_get0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Size)>>(
      'EVP_PKEY_meth_get0');
  late final _EVP_PKEY_meth_get0 = _EVP_PKEY_meth_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_KEYMGMT> EVP_KEYMGMT_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_KEYMGMT_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_KEYMGMT_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KEYMGMT> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_KEYMGMT_fetch');
  late final _EVP_KEYMGMT_fetch = _EVP_KEYMGMT_fetchPtr.asFunction<
      ffi.Pointer<EVP_KEYMGMT> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_KEYMGMT_up_ref(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_up_ref(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_KEYMGMT>)>>(
          'EVP_KEYMGMT_up_ref');
  late final _EVP_KEYMGMT_up_ref = _EVP_KEYMGMT_up_refPtr.asFunction<
      int Function(ffi.Pointer<EVP_KEYMGMT>)>();

  void EVP_KEYMGMT_free(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_free(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KEYMGMT>)>>(
          'EVP_KEYMGMT_free');
  late final _EVP_KEYMGMT_free = _EVP_KEYMGMT_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_KEYMGMT_get0_provider(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_get0_provider(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_get0_provider');
  late final _EVP_KEYMGMT_get0_provider =
      _EVP_KEYMGMT_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<ffi.Char> EVP_KEYMGMT_get0_name(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_get0_name(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_get0_name');
  late final _EVP_KEYMGMT_get0_name = _EVP_KEYMGMT_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<ffi.Char> EVP_KEYMGMT_get0_description(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_get0_description(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_get0_description');
  late final _EVP_KEYMGMT_get0_description = _EVP_KEYMGMT_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  int EVP_KEYMGMT_is_a(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_KEYMGMT_is_a(
      keymgmt,
      name,
    );
  }

  late final _EVP_KEYMGMT_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_KEYMGMT>,
              ffi.Pointer<ffi.Char>)>>('EVP_KEYMGMT_is_a');
  late final _EVP_KEYMGMT_is_a = _EVP_KEYMGMT_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_KEYMGMT>, ffi.Pointer<ffi.Char>)>();

  void EVP_KEYMGMT_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_KEYMGMT> keymgmt,
                    ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_KEYMGMT_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_KEYMGMT_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KEYMGMT> keymgmt,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEYMGMT_do_all_provided');
  late final _EVP_KEYMGMT_do_all_provided =
      _EVP_KEYMGMT_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KEYMGMT> keymgmt,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_KEYMGMT_names_do_all(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_KEYMGMT_names_do_all(
      keymgmt,
      fn,
      data,
    );
  }

  late final _EVP_KEYMGMT_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KEYMGMT>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEYMGMT_names_do_all');
  late final _EVP_KEYMGMT_names_do_all =
      _EVP_KEYMGMT_names_do_allPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_KEYMGMT>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYMGMT_gettable_params(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_gettable_params(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_gettable_params');
  late final _EVP_KEYMGMT_gettable_params = _EVP_KEYMGMT_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYMGMT_settable_params(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_settable_params(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_settable_params');
  late final _EVP_KEYMGMT_settable_params = _EVP_KEYMGMT_settable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYMGMT_gen_settable_params(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_gen_settable_params(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_gen_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_gen_settable_params');
  late final _EVP_KEYMGMT_gen_settable_params =
      _EVP_KEYMGMT_gen_settable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYMGMT_gen_gettable_params(
    ffi.Pointer<EVP_KEYMGMT> keymgmt,
  ) {
    return _EVP_KEYMGMT_gen_gettable_params(
      keymgmt,
    );
  }

  late final _EVP_KEYMGMT_gen_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYMGMT>)>>('EVP_KEYMGMT_gen_gettable_params');
  late final _EVP_KEYMGMT_gen_gettable_params =
      _EVP_KEYMGMT_gen_gettable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYMGMT>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new');
  late final _EVP_PKEY_CTX_new = _EVP_PKEY_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_id(
    int id,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new_id(
      id,
      e,
    );
  }

  late final _EVP_PKEY_CTX_new_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Int, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new_id');
  late final _EVP_PKEY_CTX_new_id = _EVP_PKEY_CTX_new_idPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(int, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_from_name(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> propquery,
  ) {
    return _EVP_PKEY_CTX_new_from_name(
      libctx,
      name,
      propquery,
    );
  }

  late final _EVP_PKEY_CTX_new_from_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_new_from_name');
  late final _EVP_PKEY_CTX_new_from_name =
      _EVP_PKEY_CTX_new_from_namePtr.asFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_from_pkey(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> propquery,
  ) {
    return _EVP_PKEY_CTX_new_from_pkey(
      libctx,
      pkey,
      propquery,
    );
  }

  late final _EVP_PKEY_CTX_new_from_pkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_new_from_pkey');
  late final _EVP_PKEY_CTX_new_from_pkey =
      _EVP_PKEY_CTX_new_from_pkeyPtr.asFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_dup(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_dup(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_dup');
  late final _EVP_PKEY_CTX_dup = _EVP_PKEY_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_free(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_free(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_free');
  late final _EVP_PKEY_CTX_free = _EVP_PKEY_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_is_a(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> keytype,
  ) {
    return _EVP_PKEY_CTX_is_a(
      ctx,
      keytype,
    );
  }

  late final _EVP_PKEY_CTX_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_is_a');
  late final _EVP_PKEY_CTX_is_a = _EVP_PKEY_CTX_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_get_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_CTX_get_params');
  late final _EVP_PKEY_CTX_get_params = _EVP_PKEY_CTX_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_PKEY_CTX_gettable_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_gettable_params');
  late final _EVP_PKEY_CTX_gettable_params =
      _EVP_PKEY_CTX_gettable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_set_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_CTX_set_params');
  late final _EVP_PKEY_CTX_set_params = _EVP_PKEY_CTX_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_PKEY_CTX_settable_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_settable_params');
  late final _EVP_PKEY_CTX_settable_params =
      _EVP_PKEY_CTX_settable_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_set_algor_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<X509_ALGOR> alg,
  ) {
    return _EVP_PKEY_CTX_set_algor_params(
      ctx,
      alg,
    );
  }

  late final _EVP_PKEY_CTX_set_algor_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<X509_ALGOR>)>>('EVP_PKEY_CTX_set_algor_params');
  late final _EVP_PKEY_CTX_set_algor_params =
      _EVP_PKEY_CTX_set_algor_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<X509_ALGOR>)>();

  int EVP_PKEY_CTX_get_algor_params(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<X509_ALGOR> alg,
  ) {
    return _EVP_PKEY_CTX_get_algor_params(
      ctx,
      alg,
    );
  }

  late final _EVP_PKEY_CTX_get_algor_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<X509_ALGOR>)>>('EVP_PKEY_CTX_get_algor_params');
  late final _EVP_PKEY_CTX_get_algor_params =
      _EVP_PKEY_CTX_get_algor_paramsPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<X509_ALGOR>)>();

  int EVP_PKEY_CTX_get_algor(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> alg,
  ) {
    return _EVP_PKEY_CTX_get_algor(
      ctx,
      alg,
    );
  }

  late final _EVP_PKEY_CTX_get_algorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>('EVP_PKEY_CTX_get_algor');
  late final _EVP_PKEY_CTX_get_algor = _EVP_PKEY_CTX_get_algorPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  int EVP_PKEY_CTX_ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_PKEY_CTX_ctrl(
      ctx,
      keytype,
      optype,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_PKEY_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_ctrl');
  late final _EVP_PKEY_CTX_ctrl = _EVP_PKEY_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_CTX_ctrl_str(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _EVP_PKEY_CTX_ctrl_str(
      ctx,
      type,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_ctrl_str');
  late final _EVP_PKEY_CTX_ctrl_str = _EVP_PKEY_CTX_ctrl_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_ctrl_uint64(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int value,
  ) {
    return _EVP_PKEY_CTX_ctrl_uint64(
      ctx,
      keytype,
      optype,
      cmd,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Uint64)>>('EVP_PKEY_CTX_ctrl_uint64');
  late final _EVP_PKEY_CTX_ctrl_uint64 =
      _EVP_PKEY_CTX_ctrl_uint64Ptr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int)>();

  int EVP_PKEY_CTX_str2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _EVP_PKEY_CTX_str2ctrl(
      ctx,
      cmd,
      str,
    );
  }

  late final _EVP_PKEY_CTX_str2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_str2ctrl');
  late final _EVP_PKEY_CTX_str2ctrl = _EVP_PKEY_CTX_str2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_hex2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> hex,
  ) {
    return _EVP_PKEY_CTX_hex2ctrl(
      ctx,
      cmd,
      hex,
    );
  }

  late final _EVP_PKEY_CTX_hex2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_hex2ctrl');
  late final _EVP_PKEY_CTX_hex2ctrl = _EVP_PKEY_CTX_hex2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int optype,
    int cmd,
    ffi.Pointer<ffi.Char> md,
  ) {
    return _EVP_PKEY_CTX_md(
      ctx,
      optype,
      cmd,
      md,
    );
  }

  late final _EVP_PKEY_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_md');
  late final _EVP_PKEY_CTX_md = _EVP_PKEY_CTX_mdPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, int, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_get_operation(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_operation(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_operationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_get_operation');
  late final _EVP_PKEY_CTX_get_operation = _EVP_PKEY_CTX_get_operationPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set0_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> dat,
    int datlen,
  ) {
    return _EVP_PKEY_CTX_set0_keygen_info(
      ctx,
      dat,
      datlen,
    );
  }

  late final _EVP_PKEY_CTX_set0_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('EVP_PKEY_CTX_set0_keygen_info');
  late final _EVP_PKEY_CTX_set0_keygen_info =
      _EVP_PKEY_CTX_set0_keygen_infoPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_mac_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PKEY_new_mac_key(
      type,
      e,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_new_mac_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Int, ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_PKEY_new_mac_key');
  late final _EVP_PKEY_new_mac_key = _EVP_PKEY_new_mac_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_private_key_ex(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> keytype,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
  ) {
    return _EVP_PKEY_new_raw_private_key_ex(
      libctx,
      keytype,
      propq,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_private_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_private_key_ex');
  late final _EVP_PKEY_new_raw_private_key_ex =
      _EVP_PKEY_new_raw_private_key_exPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_private_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
  ) {
    return _EVP_PKEY_new_raw_private_key(
      type,
      e,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_private_key');
  late final _EVP_PKEY_new_raw_private_key =
      _EVP_PKEY_new_raw_private_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_public_key_ex(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> keytype,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<ffi.UnsignedChar> pub,
    int len,
  ) {
    return _EVP_PKEY_new_raw_public_key_ex(
      libctx,
      keytype,
      propq,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_public_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_public_key_ex');
  late final _EVP_PKEY_new_raw_public_key_ex =
      _EVP_PKEY_new_raw_public_key_exPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_public_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> pub,
    int len,
  ) {
    return _EVP_PKEY_new_raw_public_key(
      type,
      e,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_public_key');
  late final _EVP_PKEY_new_raw_public_key =
      _EVP_PKEY_new_raw_public_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get_raw_private_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> priv,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get_raw_private_key(
      pkey,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_raw_private_key');
  late final _EVP_PKEY_get_raw_private_key =
      _EVP_PKEY_get_raw_private_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_get_raw_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pub,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get_raw_public_key(
      pkey,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_raw_public_key');
  late final _EVP_PKEY_get_raw_public_key =
      _EVP_PKEY_get_raw_public_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_CMAC_key(
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_PKEY_new_CMAC_key(
      e,
      priv,
      len,
      cipher,
    );
  }

  late final _EVP_PKEY_new_CMAC_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<EVP_CIPHER>)>>('EVP_PKEY_new_CMAC_key');
  late final _EVP_PKEY_new_CMAC_key = _EVP_PKEY_new_CMAC_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EVP_CIPHER>)>();

  void EVP_PKEY_CTX_set_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_data');
  late final _EVP_PKEY_CTX_set_data = _EVP_PKEY_CTX_set_dataPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_data');
  late final _EVP_PKEY_CTX_get_data = _EVP_PKEY_CTX_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_pkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_pkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_pkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_pkey');
  late final _EVP_PKEY_CTX_get0_pkey = _EVP_PKEY_CTX_get0_pkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_peerkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_peerkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_peerkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_peerkey');
  late final _EVP_PKEY_CTX_get0_peerkey = _EVP_PKEY_CTX_get0_peerkeyPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_app_data');
  late final _EVP_PKEY_CTX_set_app_data =
      _EVP_PKEY_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_app_data');
  late final _EVP_PKEY_CTX_get_app_data = _EVP_PKEY_CTX_get_app_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_set_signature(
    ffi.Pointer<EVP_PKEY_CTX> pctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_PKEY_CTX_set_signature(
      pctx,
      sig,
      siglen,
    );
  }

  late final _EVP_PKEY_CTX_set_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_CTX_set_signature');
  late final _EVP_PKEY_CTX_set_signature =
      _EVP_PKEY_CTX_set_signaturePtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_SIGNATURE_free(
    ffi.Pointer<EVP_SIGNATURE> signature,
  ) {
    return _EVP_SIGNATURE_free(
      signature,
    );
  }

  late final _EVP_SIGNATURE_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_SIGNATURE>)>>(
      'EVP_SIGNATURE_free');
  late final _EVP_SIGNATURE_free = _EVP_SIGNATURE_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_SIGNATURE>)>();

  int EVP_SIGNATURE_up_ref(
    ffi.Pointer<EVP_SIGNATURE> signature,
  ) {
    return _EVP_SIGNATURE_up_ref(
      signature,
    );
  }

  late final _EVP_SIGNATURE_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_SIGNATURE>)>>(
          'EVP_SIGNATURE_up_ref');
  late final _EVP_SIGNATURE_up_ref = _EVP_SIGNATURE_up_refPtr.asFunction<
      int Function(ffi.Pointer<EVP_SIGNATURE>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_SIGNATURE_get0_provider(
    ffi.Pointer<EVP_SIGNATURE> signature,
  ) {
    return _EVP_SIGNATURE_get0_provider(
      signature,
    );
  }

  late final _EVP_SIGNATURE_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_SIGNATURE>)>>('EVP_SIGNATURE_get0_provider');
  late final _EVP_SIGNATURE_get0_provider =
      _EVP_SIGNATURE_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_SIGNATURE>)>();

  ffi.Pointer<EVP_SIGNATURE> EVP_SIGNATURE_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_SIGNATURE_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_SIGNATURE_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_SIGNATURE> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_SIGNATURE_fetch');
  late final _EVP_SIGNATURE_fetch = _EVP_SIGNATURE_fetchPtr.asFunction<
      ffi.Pointer<EVP_SIGNATURE> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_SIGNATURE_is_a(
    ffi.Pointer<EVP_SIGNATURE> signature,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_SIGNATURE_is_a(
      signature,
      name,
    );
  }

  late final _EVP_SIGNATURE_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<ffi.Char>)>>('EVP_SIGNATURE_is_a');
  late final _EVP_SIGNATURE_is_a = _EVP_SIGNATURE_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_SIGNATURE>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_SIGNATURE_get0_name(
    ffi.Pointer<EVP_SIGNATURE> signature,
  ) {
    return _EVP_SIGNATURE_get0_name(
      signature,
    );
  }

  late final _EVP_SIGNATURE_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_SIGNATURE>)>>('EVP_SIGNATURE_get0_name');
  late final _EVP_SIGNATURE_get0_name = _EVP_SIGNATURE_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_SIGNATURE>)>();

  ffi.Pointer<ffi.Char> EVP_SIGNATURE_get0_description(
    ffi.Pointer<EVP_SIGNATURE> signature,
  ) {
    return _EVP_SIGNATURE_get0_description(
      signature,
    );
  }

  late final _EVP_SIGNATURE_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_SIGNATURE>)>>('EVP_SIGNATURE_get0_description');
  late final _EVP_SIGNATURE_get0_description =
      _EVP_SIGNATURE_get0_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_SIGNATURE>)>();

  void EVP_SIGNATURE_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_SIGNATURE> signature,
                    ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_SIGNATURE_do_all_provided(
      libctx,
      fn,
      data,
    );
  }

  late final _EVP_SIGNATURE_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_SIGNATURE> signature,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_SIGNATURE_do_all_provided');
  late final _EVP_SIGNATURE_do_all_provided =
      _EVP_SIGNATURE_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_SIGNATURE> signature,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_SIGNATURE_names_do_all(
    ffi.Pointer<EVP_SIGNATURE> signature,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_SIGNATURE_names_do_all(
      signature,
      fn,
      data,
    );
  }

  late final _EVP_SIGNATURE_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_SIGNATURE_names_do_all');
  late final _EVP_SIGNATURE_names_do_all =
      _EVP_SIGNATURE_names_do_allPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_SIGNATURE_gettable_ctx_params(
    ffi.Pointer<EVP_SIGNATURE> sig,
  ) {
    return _EVP_SIGNATURE_gettable_ctx_params(
      sig,
    );
  }

  late final _EVP_SIGNATURE_gettable_ctx_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_SIGNATURE>)>>(
      'EVP_SIGNATURE_gettable_ctx_params');
  late final _EVP_SIGNATURE_gettable_ctx_params =
      _EVP_SIGNATURE_gettable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_SIGNATURE>)>();

  ffi.Pointer<OSSL_PARAM> EVP_SIGNATURE_settable_ctx_params(
    ffi.Pointer<EVP_SIGNATURE> sig,
  ) {
    return _EVP_SIGNATURE_settable_ctx_params(
      sig,
    );
  }

  late final _EVP_SIGNATURE_settable_ctx_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_SIGNATURE>)>>(
      'EVP_SIGNATURE_settable_ctx_params');
  late final _EVP_SIGNATURE_settable_ctx_params =
      _EVP_SIGNATURE_settable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_SIGNATURE>)>();

  void EVP_ASYM_CIPHER_free(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
  ) {
    return _EVP_ASYM_CIPHER_free(
      cipher,
    );
  }

  late final _EVP_ASYM_CIPHER_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ASYM_CIPHER>)>>(
      'EVP_ASYM_CIPHER_free');
  late final _EVP_ASYM_CIPHER_free = _EVP_ASYM_CIPHER_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  int EVP_ASYM_CIPHER_up_ref(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
  ) {
    return _EVP_ASYM_CIPHER_up_ref(
      cipher,
    );
  }

  late final _EVP_ASYM_CIPHER_up_refPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_ASYM_CIPHER>)>>(
      'EVP_ASYM_CIPHER_up_ref');
  late final _EVP_ASYM_CIPHER_up_ref = _EVP_ASYM_CIPHER_up_refPtr.asFunction<
      int Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_ASYM_CIPHER_get0_provider(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
  ) {
    return _EVP_ASYM_CIPHER_get0_provider(
      cipher,
    );
  }

  late final _EVP_ASYM_CIPHER_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_ASYM_CIPHER>)>>('EVP_ASYM_CIPHER_get0_provider');
  late final _EVP_ASYM_CIPHER_get0_provider =
      _EVP_ASYM_CIPHER_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  ffi.Pointer<EVP_ASYM_CIPHER> EVP_ASYM_CIPHER_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_ASYM_CIPHER_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_ASYM_CIPHER_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_ASYM_CIPHER> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_ASYM_CIPHER_fetch');
  late final _EVP_ASYM_CIPHER_fetch = _EVP_ASYM_CIPHER_fetchPtr.asFunction<
      ffi.Pointer<EVP_ASYM_CIPHER> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_ASYM_CIPHER_is_a(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_ASYM_CIPHER_is_a(
      cipher,
      name,
    );
  }

  late final _EVP_ASYM_CIPHER_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_ASYM_CIPHER>,
              ffi.Pointer<ffi.Char>)>>('EVP_ASYM_CIPHER_is_a');
  late final _EVP_ASYM_CIPHER_is_a = _EVP_ASYM_CIPHER_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_ASYM_CIPHER>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_ASYM_CIPHER_get0_name(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
  ) {
    return _EVP_ASYM_CIPHER_get0_name(
      cipher,
    );
  }

  late final _EVP_ASYM_CIPHER_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_ASYM_CIPHER>)>>('EVP_ASYM_CIPHER_get0_name');
  late final _EVP_ASYM_CIPHER_get0_name =
      _EVP_ASYM_CIPHER_get0_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  ffi.Pointer<ffi.Char> EVP_ASYM_CIPHER_get0_description(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
  ) {
    return _EVP_ASYM_CIPHER_get0_description(
      cipher,
    );
  }

  late final _EVP_ASYM_CIPHER_get0_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>>(
      'EVP_ASYM_CIPHER_get0_description');
  late final _EVP_ASYM_CIPHER_get0_description =
      _EVP_ASYM_CIPHER_get0_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  void EVP_ASYM_CIPHER_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_ASYM_CIPHER> cipher,
                    ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_ASYM_CIPHER_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_ASYM_CIPHER_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_ASYM_CIPHER> cipher,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_ASYM_CIPHER_do_all_provided');
  late final _EVP_ASYM_CIPHER_do_all_provided =
      _EVP_ASYM_CIPHER_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_ASYM_CIPHER> cipher,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_ASYM_CIPHER_names_do_all(
    ffi.Pointer<EVP_ASYM_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_ASYM_CIPHER_names_do_all(
      cipher,
      fn,
      data,
    );
  }

  late final _EVP_ASYM_CIPHER_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ASYM_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_ASYM_CIPHER_names_do_all');
  late final _EVP_ASYM_CIPHER_names_do_all =
      _EVP_ASYM_CIPHER_names_do_allPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_ASYM_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_ASYM_CIPHER_gettable_ctx_params(
    ffi.Pointer<EVP_ASYM_CIPHER> ciph,
  ) {
    return _EVP_ASYM_CIPHER_gettable_ctx_params(
      ciph,
    );
  }

  late final _EVP_ASYM_CIPHER_gettable_ctx_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>>(
      'EVP_ASYM_CIPHER_gettable_ctx_params');
  late final _EVP_ASYM_CIPHER_gettable_ctx_params =
      _EVP_ASYM_CIPHER_gettable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  ffi.Pointer<OSSL_PARAM> EVP_ASYM_CIPHER_settable_ctx_params(
    ffi.Pointer<EVP_ASYM_CIPHER> ciph,
  ) {
    return _EVP_ASYM_CIPHER_settable_ctx_params(
      ciph,
    );
  }

  late final _EVP_ASYM_CIPHER_settable_ctx_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>>(
      'EVP_ASYM_CIPHER_settable_ctx_params');
  late final _EVP_ASYM_CIPHER_settable_ctx_params =
      _EVP_ASYM_CIPHER_settable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_ASYM_CIPHER>)>();

  void EVP_KEM_free(
    ffi.Pointer<EVP_KEM> wrap,
  ) {
    return _EVP_KEM_free(
      wrap,
    );
  }

  late final _EVP_KEM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KEM>)>>(
          'EVP_KEM_free');
  late final _EVP_KEM_free =
      _EVP_KEM_freePtr.asFunction<void Function(ffi.Pointer<EVP_KEM>)>();

  int EVP_KEM_up_ref(
    ffi.Pointer<EVP_KEM> wrap,
  ) {
    return _EVP_KEM_up_ref(
      wrap,
    );
  }

  late final _EVP_KEM_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_KEM>)>>(
          'EVP_KEM_up_ref');
  late final _EVP_KEM_up_ref =
      _EVP_KEM_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_KEM>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_KEM_get0_provider(
    ffi.Pointer<EVP_KEM> wrap,
  ) {
    return _EVP_KEM_get0_provider(
      wrap,
    );
  }

  late final _EVP_KEM_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_KEM>)>>('EVP_KEM_get0_provider');
  late final _EVP_KEM_get0_provider = _EVP_KEM_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_KEM>)>();

  ffi.Pointer<EVP_KEM> EVP_KEM_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_KEM_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_KEM_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KEM> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('EVP_KEM_fetch');
  late final _EVP_KEM_fetch = _EVP_KEM_fetchPtr.asFunction<
      ffi.Pointer<EVP_KEM> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_KEM_is_a(
    ffi.Pointer<EVP_KEM> wrap,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_KEM_is_a(
      wrap,
      name,
    );
  }

  late final _EVP_KEM_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KEM>, ffi.Pointer<ffi.Char>)>>('EVP_KEM_is_a');
  late final _EVP_KEM_is_a = _EVP_KEM_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_KEM>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_KEM_get0_name(
    ffi.Pointer<EVP_KEM> wrap,
  ) {
    return _EVP_KEM_get0_name(
      wrap,
    );
  }

  late final _EVP_KEM_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEM>)>>('EVP_KEM_get0_name');
  late final _EVP_KEM_get0_name = _EVP_KEM_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEM>)>();

  ffi.Pointer<ffi.Char> EVP_KEM_get0_description(
    ffi.Pointer<EVP_KEM> wrap,
  ) {
    return _EVP_KEM_get0_description(
      wrap,
    );
  }

  late final _EVP_KEM_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEM>)>>('EVP_KEM_get0_description');
  late final _EVP_KEM_get0_description = _EVP_KEM_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEM>)>();

  void EVP_KEM_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_KEM> wrap, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_KEM_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_KEM_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KEM> wrap,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEM_do_all_provided');
  late final _EVP_KEM_do_all_provided = _EVP_KEM_do_all_providedPtr.asFunction<
      void Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_KEM> wrap, ffi.Pointer<ffi.Void> arg)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_KEM_names_do_all(
    ffi.Pointer<EVP_KEM> wrap,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_KEM_names_do_all(
      wrap,
      fn,
      data,
    );
  }

  late final _EVP_KEM_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KEM>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEM_names_do_all');
  late final _EVP_KEM_names_do_all = _EVP_KEM_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_KEM>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEM_gettable_ctx_params(
    ffi.Pointer<EVP_KEM> kem,
  ) {
    return _EVP_KEM_gettable_ctx_params(
      kem,
    );
  }

  late final _EVP_KEM_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEM>)>>('EVP_KEM_gettable_ctx_params');
  late final _EVP_KEM_gettable_ctx_params = _EVP_KEM_gettable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEM_settable_ctx_params(
    ffi.Pointer<EVP_KEM> kem,
  ) {
    return _EVP_KEM_settable_ctx_params(
      kem,
    );
  }

  late final _EVP_KEM_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEM>)>>('EVP_KEM_settable_ctx_params');
  late final _EVP_KEM_settable_ctx_params = _EVP_KEM_settable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEM>)>();

  int EVP_PKEY_sign_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_sign_init(
      ctx,
    );
  }

  late final _EVP_PKEY_sign_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_sign_init');
  late final _EVP_PKEY_sign_init = _EVP_PKEY_sign_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_sign_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_sign_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_sign_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_sign_init_ex');
  late final _EVP_PKEY_sign_init_ex = _EVP_PKEY_sign_init_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_sign_init_ex2(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_SIGNATURE> algo,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_sign_init_ex2(
      ctx,
      algo,
      params,
    );
  }

  late final _EVP_PKEY_sign_init_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_sign_init_ex2');
  late final _EVP_PKEY_sign_init_ex2 = _EVP_PKEY_sign_init_ex2Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_SIGNATURE>,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_sign(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Size> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_sign(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_sign');
  late final _EVP_PKEY_sign = _EVP_PKEY_signPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_sign_message_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_SIGNATURE> algo,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_sign_message_init(
      ctx,
      algo,
      params,
    );
  }

  late final _EVP_PKEY_sign_message_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_sign_message_init');
  late final _EVP_PKEY_sign_message_init =
      _EVP_PKEY_sign_message_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_sign_message_update(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_sign_message_update(
      ctx,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_sign_message_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_sign_message_update');
  late final _EVP_PKEY_sign_message_update =
      _EVP_PKEY_sign_message_updatePtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_sign_message_final(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Size> siglen,
  ) {
    return _EVP_PKEY_sign_message_final(
      ctx,
      sig,
      siglen,
    );
  }

  late final _EVP_PKEY_sign_message_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_sign_message_final');
  late final _EVP_PKEY_sign_message_final =
      _EVP_PKEY_sign_message_finalPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_verify_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_init');
  late final _EVP_PKEY_verify_init = _EVP_PKEY_verify_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_verify_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_verify_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_verify_init_ex');
  late final _EVP_PKEY_verify_init_ex = _EVP_PKEY_verify_init_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_verify_init_ex2(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_SIGNATURE> algo,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_verify_init_ex2(
      ctx,
      algo,
      params,
    );
  }

  late final _EVP_PKEY_verify_init_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_verify_init_ex2');
  late final _EVP_PKEY_verify_init_ex2 =
      _EVP_PKEY_verify_init_ex2Ptr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_verify(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_verify(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_verify');
  late final _EVP_PKEY_verify = _EVP_PKEY_verifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_message_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_SIGNATURE> algo,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_verify_message_init(
      ctx,
      algo,
      params,
    );
  }

  late final _EVP_PKEY_verify_message_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_verify_message_init');
  late final _EVP_PKEY_verify_message_init =
      _EVP_PKEY_verify_message_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_verify_message_update(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_verify_message_update(
      ctx,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_verify_message_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_verify_message_update');
  late final _EVP_PKEY_verify_message_update =
      _EVP_PKEY_verify_message_updatePtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_message_final(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_message_final(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_message_finalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_message_final');
  late final _EVP_PKEY_verify_message_final = _EVP_PKEY_verify_message_finalPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify_recover_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_recover_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_recover_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_recover_init');
  late final _EVP_PKEY_verify_recover_init = _EVP_PKEY_verify_recover_initPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify_recover_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_verify_recover_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_verify_recover_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_verify_recover_init_ex');
  late final _EVP_PKEY_verify_recover_init_ex =
      _EVP_PKEY_verify_recover_init_exPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_verify_recover_init_ex2(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_SIGNATURE> algo,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_verify_recover_init_ex2(
      ctx,
      algo,
      params,
    );
  }

  late final _EVP_PKEY_verify_recover_init_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_verify_recover_init_ex2');
  late final _EVP_PKEY_verify_recover_init_ex2 =
      _EVP_PKEY_verify_recover_init_ex2Ptr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_SIGNATURE>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_verify_recover(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> rout,
    ffi.Pointer<ffi.Size> routlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_PKEY_verify_recover(
      ctx,
      rout,
      routlen,
      sig,
      siglen,
    );
  }

  late final _EVP_PKEY_verify_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_verify_recover');
  late final _EVP_PKEY_verify_recover = _EVP_PKEY_verify_recoverPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_encrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_encrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_encrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_encrypt_init');
  late final _EVP_PKEY_encrypt_init = _EVP_PKEY_encrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_encrypt_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_encrypt_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_encrypt_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_encrypt_init_ex');
  late final _EVP_PKEY_encrypt_init_ex =
      _EVP_PKEY_encrypt_init_exPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_encrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Size> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_encrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_encrypt');
  late final _EVP_PKEY_encrypt = _EVP_PKEY_encryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_decrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_decrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_decrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_decrypt_init');
  late final _EVP_PKEY_decrypt_init = _EVP_PKEY_decrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_decrypt_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_decrypt_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_decrypt_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_decrypt_init_ex');
  late final _EVP_PKEY_decrypt_init_ex =
      _EVP_PKEY_decrypt_init_exPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_decrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Size> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_decrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_decrypt');
  late final _EVP_PKEY_decrypt = _EVP_PKEY_decryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_derive_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_derive_init(
      ctx,
    );
  }

  late final _EVP_PKEY_derive_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_derive_init');
  late final _EVP_PKEY_derive_init = _EVP_PKEY_derive_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_derive_init_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_derive_init_ex(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_derive_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_derive_init_ex');
  late final _EVP_PKEY_derive_init_ex = _EVP_PKEY_derive_init_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_derive_set_peer_ex(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> peer,
    int validate_peer,
  ) {
    return _EVP_PKEY_derive_set_peer_ex(
      ctx,
      peer,
      validate_peer,
    );
  }

  late final _EVP_PKEY_derive_set_peer_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>,
              ffi.Int)>>('EVP_PKEY_derive_set_peer_ex');
  late final _EVP_PKEY_derive_set_peer_ex =
      _EVP_PKEY_derive_set_peer_exPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_derive_set_peer(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> peer,
  ) {
    return _EVP_PKEY_derive_set_peer(
      ctx,
      peer,
    );
  }

  late final _EVP_PKEY_derive_set_peerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_derive_set_peer');
  late final _EVP_PKEY_derive_set_peer =
      _EVP_PKEY_derive_set_peerPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_derive(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.Size> keylen,
  ) {
    return _EVP_PKEY_derive(
      ctx,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_derive');
  late final _EVP_PKEY_derive = _EVP_PKEY_derivePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_encapsulate_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_encapsulate_init(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_encapsulate_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_encapsulate_init');
  late final _EVP_PKEY_encapsulate_init =
      _EVP_PKEY_encapsulate_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_auth_encapsulate_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> authpriv,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_auth_encapsulate_init(
      ctx,
      authpriv,
      params,
    );
  }

  late final _EVP_PKEY_auth_encapsulate_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_auth_encapsulate_init');
  late final _EVP_PKEY_auth_encapsulate_init =
      _EVP_PKEY_auth_encapsulate_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_encapsulate(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> wrappedkey,
    ffi.Pointer<ffi.Size> wrappedkeylen,
    ffi.Pointer<ffi.UnsignedChar> genkey,
    ffi.Pointer<ffi.Size> genkeylen,
  ) {
    return _EVP_PKEY_encapsulate(
      ctx,
      wrappedkey,
      wrappedkeylen,
      genkey,
      genkeylen,
    );
  }

  late final _EVP_PKEY_encapsulatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_encapsulate');
  late final _EVP_PKEY_encapsulate = _EVP_PKEY_encapsulatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_decapsulate_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_decapsulate_init(
      ctx,
      params,
    );
  }

  late final _EVP_PKEY_decapsulate_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_decapsulate_init');
  late final _EVP_PKEY_decapsulate_init =
      _EVP_PKEY_decapsulate_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_auth_decapsulate_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> authpub,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_auth_decapsulate_init(
      ctx,
      authpub,
      params,
    );
  }

  late final _EVP_PKEY_auth_decapsulate_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_auth_decapsulate_init');
  late final _EVP_PKEY_auth_decapsulate_init =
      _EVP_PKEY_auth_decapsulate_initPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_decapsulate(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> unwrapped,
    ffi.Pointer<ffi.Size> unwrappedlen,
    ffi.Pointer<ffi.UnsignedChar> wrapped,
    int wrappedlen,
  ) {
    return _EVP_PKEY_decapsulate(
      ctx,
      unwrapped,
      unwrappedlen,
      wrapped,
      wrappedlen,
    );
  }

  late final _EVP_PKEY_decapsulatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_decapsulate');
  late final _EVP_PKEY_decapsulate = _EVP_PKEY_decapsulatePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_fromdata_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_fromdata_init(
      ctx,
    );
  }

  late final _EVP_PKEY_fromdata_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_fromdata_init');
  late final _EVP_PKEY_fromdata_init = _EVP_PKEY_fromdata_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_fromdata(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
    int selection,
    ffi.Pointer<OSSL_PARAM> param,
  ) {
    return _EVP_PKEY_fromdata(
      ctx,
      ppkey,
      selection,
      param,
    );
  }

  late final _EVP_PKEY_fromdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Int,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_fromdata');
  late final _EVP_PKEY_fromdata = _EVP_PKEY_fromdataPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>, int, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_PKEY_fromdata_settable(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int selection,
  ) {
    return _EVP_PKEY_fromdata_settable(
      ctx,
      selection,
    );
  }

  late final _EVP_PKEY_fromdata_settablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_fromdata_settable');
  late final _EVP_PKEY_fromdata_settable =
      _EVP_PKEY_fromdata_settablePtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_todata(
    ffi.Pointer<EVP_PKEY> pkey,
    int selection,
    ffi.Pointer<ffi.Pointer<OSSL_PARAM>> params,
  ) {
    return _EVP_PKEY_todata(
      pkey,
      selection,
      params,
    );
  }

  late final _EVP_PKEY_todataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ffi.Pointer<OSSL_PARAM>>)>>('EVP_PKEY_todata');
  late final _EVP_PKEY_todata = _EVP_PKEY_todataPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Pointer<OSSL_PARAM>>)>();

  int EVP_PKEY_export(
    ffi.Pointer<EVP_PKEY> pkey,
    int selection,
    ffi.Pointer<OSSL_CALLBACK> export_cb,
    ffi.Pointer<ffi.Void> export_cbarg,
  ) {
    return _EVP_PKEY_export(
      pkey,
      selection,
      export_cb,
      export_cbarg,
    );
  }

  late final _EVP_PKEY_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<OSSL_CALLBACK>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_export');
  late final _EVP_PKEY_export = _EVP_PKEY_exportPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<OSSL_CALLBACK>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_PKEY_gettable_params(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_gettable_params(
      pkey,
    );
  }

  late final _EVP_PKEY_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_gettable_params');
  late final _EVP_PKEY_gettable_params = _EVP_PKEY_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_params(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_get_params(
      pkey,
      params,
    );
  }

  late final _EVP_PKEY_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_get_params');
  late final _EVP_PKEY_get_params = _EVP_PKEY_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_get_int_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.Int> out,
  ) {
    return _EVP_PKEY_get_int_param(
      pkey,
      key_name,
      out,
    );
  }

  late final _EVP_PKEY_get_int_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_int_param');
  late final _EVP_PKEY_get_int_param = _EVP_PKEY_get_int_paramPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_get_size_t_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.Size> out,
  ) {
    return _EVP_PKEY_get_size_t_param(
      pkey,
      key_name,
      out,
    );
  }

  late final _EVP_PKEY_get_size_t_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_size_t_param');
  late final _EVP_PKEY_get_size_t_param =
      _EVP_PKEY_get_size_t_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_get_bn_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.Pointer<BIGNUM>> bn,
  ) {
    return _EVP_PKEY_get_bn_param(
      pkey,
      key_name,
      bn,
    );
  }

  late final _EVP_PKEY_get_bn_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('EVP_PKEY_get_bn_param');
  late final _EVP_PKEY_get_bn_param = _EVP_PKEY_get_bn_paramPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int EVP_PKEY_get_utf8_string_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.Char> str,
    int max_buf_sz,
    ffi.Pointer<ffi.Size> out_sz,
  ) {
    return _EVP_PKEY_get_utf8_string_param(
      pkey,
      key_name,
      str,
      max_buf_sz,
      out_sz,
    );
  }

  late final _EVP_PKEY_get_utf8_string_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_utf8_string_param');
  late final _EVP_PKEY_get_utf8_string_param =
      _EVP_PKEY_get_utf8_string_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_get_octet_string_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int max_buf_sz,
    ffi.Pointer<ffi.Size> out_sz,
  ) {
    return _EVP_PKEY_get_octet_string_param(
      pkey,
      key_name,
      buf,
      max_buf_sz,
      out_sz,
    );
  }

  late final _EVP_PKEY_get_octet_string_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_octet_string_param');
  late final _EVP_PKEY_get_octet_string_param =
      _EVP_PKEY_get_octet_string_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<OSSL_PARAM> EVP_PKEY_settable_params(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_settable_params(
      pkey,
    );
  }

  late final _EVP_PKEY_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_settable_params');
  late final _EVP_PKEY_settable_params = _EVP_PKEY_settable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set_params(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_PKEY_set_params(
      pkey,
      params,
    );
  }

  late final _EVP_PKEY_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_PKEY_set_params');
  late final _EVP_PKEY_set_params = _EVP_PKEY_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_PKEY_set_int_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    int in1,
  ) {
    return _EVP_PKEY_set_int_param(
      pkey,
      key_name,
      in1,
    );
  }

  late final _EVP_PKEY_set_int_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_set_int_param');
  late final _EVP_PKEY_set_int_param = _EVP_PKEY_set_int_paramPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_set_size_t_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    int in1,
  ) {
    return _EVP_PKEY_set_size_t_param(
      pkey,
      key_name,
      in1,
    );
  }

  late final _EVP_PKEY_set_size_t_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('EVP_PKEY_set_size_t_param');
  late final _EVP_PKEY_set_size_t_param =
      _EVP_PKEY_set_size_t_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_set_bn_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _EVP_PKEY_set_bn_param(
      pkey,
      key_name,
      bn,
    );
  }

  late final _EVP_PKEY_set_bn_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIGNUM>)>>('EVP_PKEY_set_bn_param');
  late final _EVP_PKEY_set_bn_param = _EVP_PKEY_set_bn_paramPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, ffi.Pointer<BIGNUM>)>();

  int EVP_PKEY_set_utf8_string_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _EVP_PKEY_set_utf8_string_param(
      pkey,
      key_name,
      str,
    );
  }

  late final _EVP_PKEY_set_utf8_string_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_set_utf8_string_param');
  late final _EVP_PKEY_set_utf8_string_param =
      _EVP_PKEY_set_utf8_string_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_set_octet_string_param(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> key_name,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int bsize,
  ) {
    return _EVP_PKEY_set_octet_string_param(
      pkey,
      key_name,
      buf,
      bsize,
    );
  }

  late final _EVP_PKEY_set_octet_string_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_set_octet_string_param');
  late final _EVP_PKEY_set_octet_string_param =
      _EVP_PKEY_set_octet_string_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get_ec_point_conv_form(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_ec_point_conv_form(
      pkey,
    );
  }

  late final _EVP_PKEY_get_ec_point_conv_formPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_ec_point_conv_form');
  late final _EVP_PKEY_get_ec_point_conv_form =
      _EVP_PKEY_get_ec_point_conv_formPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_field_type(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get_field_type(
      pkey,
    );
  }

  late final _EVP_PKEY_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_field_type');
  late final _EVP_PKEY_get_field_type = _EVP_PKEY_get_field_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_Q_keygen(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _EVP_PKEY_Q_keygen(
      libctx,
      propq,
      type,
    );
  }

  late final _EVP_PKEY_Q_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_Q_keygen');
  late final _EVP_PKEY_Q_keygen = _EVP_PKEY_Q_keygenPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_paramgen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_paramgen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_paramgen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_paramgen_init');
  late final _EVP_PKEY_paramgen_init = _EVP_PKEY_paramgen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_paramgen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_paramgen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_paramgen');
  late final _EVP_PKEY_paramgen = _EVP_PKEY_paramgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_keygen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_keygen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_keygen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_keygen_init');
  late final _EVP_PKEY_keygen_init = _EVP_PKEY_keygen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_keygen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_keygen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_keygen');
  late final _EVP_PKEY_keygen = _EVP_PKEY_keygenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_generate(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_generate(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_generate');
  late final _EVP_PKEY_generate = _EVP_PKEY_generatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_check(
      ctx,
    );
  }

  late final _EVP_PKEY_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_check');
  late final _EVP_PKEY_check =
      _EVP_PKEY_checkPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_public_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_public_check(
      ctx,
    );
  }

  late final _EVP_PKEY_public_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_public_check');
  late final _EVP_PKEY_public_check = _EVP_PKEY_public_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_public_check_quick(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_public_check_quick(
      ctx,
    );
  }

  late final _EVP_PKEY_public_check_quickPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_public_check_quick');
  late final _EVP_PKEY_public_check_quick = _EVP_PKEY_public_check_quickPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_param_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_param_check(
      ctx,
    );
  }

  late final _EVP_PKEY_param_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_param_check');
  late final _EVP_PKEY_param_check = _EVP_PKEY_param_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_param_check_quick(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_param_check_quick(
      ctx,
    );
  }

  late final _EVP_PKEY_param_check_quickPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_param_check_quick');
  late final _EVP_PKEY_param_check_quick = _EVP_PKEY_param_check_quickPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_private_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_private_check(
      ctx,
    );
  }

  late final _EVP_PKEY_private_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_private_check');
  late final _EVP_PKEY_private_check = _EVP_PKEY_private_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_pairwise_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_pairwise_check(
      ctx,
    );
  }

  late final _EVP_PKEY_pairwise_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_pairwise_check');
  late final _EVP_PKEY_pairwise_check = _EVP_PKEY_pairwise_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_set_ex_data(
    ffi.Pointer<EVP_PKEY> key,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_PKEY_set_ex_data(
      key,
      idx,
      arg,
    );
  }

  late final _EVP_PKEY_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_set_ex_data');
  late final _EVP_PKEY_set_ex_data = _EVP_PKEY_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_get_ex_data(
    ffi.Pointer<EVP_PKEY> key,
    int idx,
  ) {
    return _EVP_PKEY_get_ex_data(
      key,
      idx,
    );
  }

  late final _EVP_PKEY_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Int)>>('EVP_PKEY_get_ex_data');
  late final _EVP_PKEY_get_ex_data = _EVP_PKEY_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>, int)>();

  void EVP_PKEY_CTX_set_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY_gen_cb> cb,
  ) {
    return _EVP_PKEY_CTX_set_cb(
      ctx,
      cb,
    );
  }

  late final _EVP_PKEY_CTX_set_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY_gen_cb>)>>('EVP_PKEY_CTX_set_cb');
  late final _EVP_PKEY_CTX_set_cb = _EVP_PKEY_CTX_set_cbPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY_gen_cb>)>();

  ffi.Pointer<EVP_PKEY_gen_cb> EVP_PKEY_CTX_get_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_cb(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_gen_cb> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_cb');
  late final _EVP_PKEY_CTX_get_cb = _EVP_PKEY_CTX_get_cbPtr.asFunction<
      ffi.Pointer<EVP_PKEY_gen_cb> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_get_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int idx,
  ) {
    return _EVP_PKEY_CTX_get_keygen_info(
      ctx,
      idx,
    );
  }

  late final _EVP_PKEY_CTX_get_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_get_keygen_info');
  late final _EVP_PKEY_CTX_get_keygen_info = _EVP_PKEY_CTX_get_keygen_infoPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  void EVP_PKEY_meth_set_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        init,
  ) {
    return _EVP_PKEY_meth_set_init(
      pmeth,
      init,
    );
  }

  late final _EVP_PKEY_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>>(
      'EVP_PKEY_meth_set_init');
  late final _EVP_PKEY_meth_set_init = _EVP_PKEY_meth_set_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>();

  void EVP_PKEY_meth_set_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                    ffi.Pointer<EVP_PKEY_CTX> src)>>
        copy,
  ) {
    return _EVP_PKEY_meth_set_copy(
      pmeth,
      copy,
    );
  }

  late final _EVP_PKEY_meth_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                              ffi.Pointer<EVP_PKEY_CTX> src)>>)>>(
      'EVP_PKEY_meth_set_copy');
  late final _EVP_PKEY_meth_set_copy = _EVP_PKEY_meth_set_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                      ffi.Pointer<EVP_PKEY_CTX> src)>>)>();

  void EVP_PKEY_meth_set_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        cleanup,
  ) {
    return _EVP_PKEY_meth_set_cleanup(
      pmeth,
      cleanup,
    );
  }

  late final _EVP_PKEY_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>>(
      'EVP_PKEY_meth_set_cleanup');
  late final _EVP_PKEY_meth_set_cleanup =
      _EVP_PKEY_meth_set_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>();

  void EVP_PKEY_meth_set_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        paramgen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Pointer<EVP_PKEY> pkey)>>
        paramgen,
  ) {
    return _EVP_PKEY_meth_set_paramgen(
      pmeth,
      paramgen_init,
      paramgen,
    );
  }

  late final _EVP_PKEY_meth_set_paramgenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_paramgen');
  late final _EVP_PKEY_meth_set_paramgen =
      _EVP_PKEY_meth_set_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        keygen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Pointer<EVP_PKEY> pkey)>>
        keygen,
  ) {
    return _EVP_PKEY_meth_set_keygen(
      pmeth,
      keygen_init,
      keygen,
    );
  }

  late final _EVP_PKEY_meth_set_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_keygen');
  late final _EVP_PKEY_meth_set_keygen =
      _EVP_PKEY_meth_set_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        sign_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        sign,
  ) {
    return _EVP_PKEY_meth_set_sign(
      pmeth,
      sign_init,
      sign,
    );
  }

  late final _EVP_PKEY_meth_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_sign');
  late final _EVP_PKEY_meth_set_sign = _EVP_PKEY_meth_set_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi
              .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY_CTX> ctx,
                      ffi.Pointer<ffi.UnsignedChar> sig,
                      ffi.Pointer<ffi.Size> siglen,
                      ffi.Pointer<ffi.UnsignedChar> tbs,
                      ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        verify_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Size siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        verify,
  ) {
    return _EVP_PKEY_meth_set_verify(
      pmeth,
      verify_init,
      verify,
    );
  }

  late final _EVP_PKEY_meth_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_verify');
  late final _EVP_PKEY_meth_set_verify =
      _EVP_PKEY_meth_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        verify_recover_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        verify_recover,
  ) {
    return _EVP_PKEY_meth_set_verify_recover(
      pmeth,
      verify_recover_init,
      verify_recover,
    );
  }

  late final _EVP_PKEY_meth_set_verify_recoverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>)>>(
      'EVP_PKEY_meth_set_verify_recover');
  late final _EVP_PKEY_meth_set_verify_recover =
      _EVP_PKEY_meth_set_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        signctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        signctx,
  ) {
    return _EVP_PKEY_meth_set_signctx(
      pmeth,
      signctx_init,
      signctx,
    );
  }

  late final _EVP_PKEY_meth_set_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_signctx');
  late final _EVP_PKEY_meth_set_signctx =
      _EVP_PKEY_meth_set_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_set_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        verifyctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Int siglen,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        verifyctx,
  ) {
    return _EVP_PKEY_meth_set_verifyctx(
      pmeth,
      verifyctx_init,
      verifyctx,
    );
  }

  late final _EVP_PKEY_meth_set_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Int siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_verifyctx');
  late final _EVP_PKEY_meth_set_verifyctx =
      _EVP_PKEY_meth_set_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Int siglen,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_set_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        encrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.Size> outlen,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inlen)>>
        encryptfn,
  ) {
    return _EVP_PKEY_meth_set_encrypt(
      pmeth,
      encrypt_init,
      encryptfn,
    );
  }

  late final _EVP_PKEY_meth_set_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>>('EVP_PKEY_meth_set_encrypt');
  late final _EVP_PKEY_meth_set_encrypt =
      _EVP_PKEY_meth_set_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>();

  void EVP_PKEY_meth_set_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        decrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.Size> outlen,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inlen)>>
        decrypt,
  ) {
    return _EVP_PKEY_meth_set_decrypt(
      pmeth,
      decrypt_init,
      decrypt,
    );
  }

  late final _EVP_PKEY_meth_set_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>>('EVP_PKEY_meth_set_decrypt');
  late final _EVP_PKEY_meth_set_decrypt =
      _EVP_PKEY_meth_set_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>();

  void EVP_PKEY_meth_set_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        derive_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> key,
                    ffi.Pointer<ffi.Size> keylen)>>
        derive,
  ) {
    return _EVP_PKEY_meth_set_derive(
      pmeth,
      derive_init,
      derive,
    );
  }

  late final _EVP_PKEY_meth_set_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size> keylen)>>)>>(
      'EVP_PKEY_meth_set_derive');
  late final _EVP_PKEY_meth_set_derive =
      _EVP_PKEY_meth_set_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.Size> keylen)>>)>();

  void EVP_PKEY_meth_set_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Int type,
                    ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>
        ctrl,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Char> value)>>
        ctrl_str,
  ) {
    return _EVP_PKEY_meth_set_ctrl(
      pmeth,
      ctrl,
      ctrl_str,
    );
  }

  late final _EVP_PKEY_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Int type, ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.Char> type,
                          ffi.Pointer<ffi.Char>
                              value)>>)>>('EVP_PKEY_meth_set_ctrl');
  late final _EVP_PKEY_meth_set_ctrl = _EVP_PKEY_meth_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Int type,
                      ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY_CTX> ctx,
                      ffi.Pointer<ffi.Char> type,
                      ffi.Pointer<ffi.Char> value)>>)>();

  void EVP_PKEY_meth_set_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_set_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_set_digestsignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_digestsign');
  late final _EVP_PKEY_meth_set_digestsign =
      _EVP_PKEY_meth_set_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Size siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_set_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_set_digestverifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>)>>(
      'EVP_PKEY_meth_set_digestverify');
  late final _EVP_PKEY_meth_set_digestverify =
      _EVP_PKEY_meth_set_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_check');
  late final _EVP_PKEY_meth_set_check = _EVP_PKEY_meth_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_public_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_public_check');
  late final _EVP_PKEY_meth_set_public_check =
      _EVP_PKEY_meth_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_param_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_param_check');
  late final _EVP_PKEY_meth_set_param_check =
      _EVP_PKEY_meth_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        digest_custom,
  ) {
    return _EVP_PKEY_meth_set_digest_custom(
      pmeth,
      digest_custom,
    );
  }

  late final _EVP_PKEY_meth_set_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_digest_custom');
  late final _EVP_PKEY_meth_set_digest_custom =
      _EVP_PKEY_meth_set_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_get_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pinit,
  ) {
    return _EVP_PKEY_meth_get_init(
      pmeth,
      pinit,
    );
  }

  late final _EVP_PKEY_meth_get_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>>(
      'EVP_PKEY_meth_get_init');
  late final _EVP_PKEY_meth_get_init = _EVP_PKEY_meth_get_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>();

  void EVP_PKEY_meth_get_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                        ffi.Pointer<EVP_PKEY_CTX> src)>>>
        pcopy,
  ) {
    return _EVP_PKEY_meth_get_copy(
      pmeth,
      pcopy,
    );
  }

  late final _EVP_PKEY_meth_get_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                                  ffi.Pointer<EVP_PKEY_CTX> src)>>>)>>(
      'EVP_PKEY_meth_get_copy');
  late final _EVP_PKEY_meth_get_copy = _EVP_PKEY_meth_get_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                          ffi.Pointer<EVP_PKEY_CTX> src)>>>)>();

  void EVP_PKEY_meth_get_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pcleanup,
  ) {
    return _EVP_PKEY_meth_get_cleanup(
      pmeth,
      pcleanup,
    );
  }

  late final _EVP_PKEY_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>>(
      'EVP_PKEY_meth_get_cleanup');
  late final _EVP_PKEY_meth_get_cleanup =
      _EVP_PKEY_meth_get_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>();

  void EVP_PKEY_meth_get_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pparamgen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_PKEY> pkey)>>>
        pparamgen,
  ) {
    return _EVP_PKEY_meth_get_paramgen(
      pmeth,
      pparamgen_init,
      pparamgen,
    );
  }

  late final _EVP_PKEY_meth_get_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY>
                                  pkey)>>>)>>('EVP_PKEY_meth_get_paramgen');
  late final _EVP_PKEY_meth_get_paramgen =
      _EVP_PKEY_meth_get_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pkeygen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_PKEY> pkey)>>>
        pkeygen,
  ) {
    return _EVP_PKEY_meth_get_keygen(
      pmeth,
      pkeygen_init,
      pkeygen,
    );
  }

  late final _EVP_PKEY_meth_get_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY>
                                  pkey)>>>)>>('EVP_PKEY_meth_get_keygen');
  late final _EVP_PKEY_meth_get_keygen =
      _EVP_PKEY_meth_get_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        psign_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        psign,
  ) {
    return _EVP_PKEY_meth_get_sign(
      pmeth,
      psign_init,
      psign,
    );
  }

  late final _EVP_PKEY_meth_get_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>>('EVP_PKEY_meth_get_sign');
  late final _EVP_PKEY_meth_get_sign = _EVP_PKEY_meth_get_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pverify_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Size siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        pverify,
  ) {
    return _EVP_PKEY_meth_get_verify(
      pmeth,
      pverify_init,
      pverify,
    );
  }

  late final _EVP_PKEY_meth_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size
                                  tbslen)>>>)>>('EVP_PKEY_meth_get_verify');
  late final _EVP_PKEY_meth_get_verify =
      _EVP_PKEY_meth_get_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pverify_recover_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        pverify_recover,
  ) {
    return _EVP_PKEY_meth_get_verify_recover(
      pmeth,
      pverify_recover_init,
      pverify_recover,
    );
  }

  late final _EVP_PKEY_meth_get_verify_recoverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi
                      .Pointer<
                          ffi.Pointer<
                              ffi.NativeFunction<
                                  ffi.Int Function(
                                      ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.Size> siglen,
                                  ffi.Pointer<ffi.UnsignedChar> tbs,
                                  ffi.Size tbslen)>>>)>>(
      'EVP_PKEY_meth_get_verify_recover');
  late final _EVP_PKEY_meth_get_verify_recover =
      _EVP_PKEY_meth_get_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        psignctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        psignctx,
  ) {
    return _EVP_PKEY_meth_get_signctx(
      pmeth,
      psignctx_init,
      psignctx,
    );
  }

  late final _EVP_PKEY_meth_get_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.Size> siglen,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_signctx');
  late final _EVP_PKEY_meth_get_signctx =
      _EVP_PKEY_meth_get_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_PKEY_meth_get_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pverifyctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Int siglen,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pverifyctx,
  ) {
    return _EVP_PKEY_meth_get_verifyctx(
      pmeth,
      pverifyctx_init,
      pverifyctx,
    );
  }

  late final _EVP_PKEY_meth_get_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Int siglen,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_verifyctx');
  late final _EVP_PKEY_meth_get_verifyctx =
      _EVP_PKEY_meth_get_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Int siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_PKEY_meth_get_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pencrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> out,
                        ffi.Pointer<ffi.Size> outlen,
                        ffi.Pointer<ffi.UnsignedChar> in1,
                        ffi.Size inlen)>>>
        pencryptfn,
  ) {
    return _EVP_PKEY_meth_get_encrypt(
      pmeth,
      pencrypt_init,
      pencryptfn,
    );
  }

  late final _EVP_PKEY_meth_get_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size
                                  inlen)>>>)>>('EVP_PKEY_meth_get_encrypt');
  late final _EVP_PKEY_meth_get_encrypt =
      _EVP_PKEY_meth_get_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size inlen)>>>)>();

  void EVP_PKEY_meth_get_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pdecrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> out,
                        ffi.Pointer<ffi.Size> outlen,
                        ffi.Pointer<ffi.UnsignedChar> in1,
                        ffi.Size inlen)>>>
        pdecrypt,
  ) {
    return _EVP_PKEY_meth_get_decrypt(
      pmeth,
      pdecrypt_init,
      pdecrypt,
    );
  }

  late final _EVP_PKEY_meth_get_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size
                                  inlen)>>>)>>('EVP_PKEY_meth_get_decrypt');
  late final _EVP_PKEY_meth_get_decrypt =
      _EVP_PKEY_meth_get_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size inlen)>>>)>();

  void EVP_PKEY_meth_get_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pderive_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> key,
                        ffi.Pointer<ffi.Size> keylen)>>>
        pderive,
  ) {
    return _EVP_PKEY_meth_get_derive(
      pmeth,
      pderive_init,
      pderive,
    );
  }

  late final _EVP_PKEY_meth_get_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size>
                                  keylen)>>>)>>('EVP_PKEY_meth_get_derive');
  late final _EVP_PKEY_meth_get_derive =
      _EVP_PKEY_meth_get_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size> keylen)>>>)>();

  void EVP_PKEY_meth_get_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Int type, ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>>
        pctrl,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.Char> type,
                        ffi.Pointer<ffi.Char> value)>>>
        pctrl_str,
  ) {
    return _EVP_PKEY_meth_get_ctrl(
      pmeth,
      pctrl,
      pctrl_str,
    );
  }

  late final _EVP_PKEY_meth_get_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Int type,
                                  ffi.Int p1,
                                  ffi.Pointer<ffi.Void> p2)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.Char> type,
                                  ffi.Pointer<ffi.Char> value)>>>)>>(
      'EVP_PKEY_meth_get_ctrl');
  late final _EVP_PKEY_meth_get_ctrl = _EVP_PKEY_meth_get_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Int type,
                          ffi.Int p1,
                          ffi.Pointer<ffi.Void> p2)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.Char> type,
                          ffi.Pointer<ffi.Char> value)>>>)>();

  void EVP_PKEY_meth_get_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_get_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_get_digestsignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_MD_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.Size> siglen,
                                  ffi.Pointer<ffi.UnsignedChar> tbs,
                                  ffi.Size tbslen)>>>)>>(
      'EVP_PKEY_meth_get_digestsign');
  late final _EVP_PKEY_meth_get_digestsign =
      _EVP_PKEY_meth_get_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Size siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_get_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_get_digestverifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_MD_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Size siglen,
                                  ffi.Pointer<ffi.UnsignedChar> tbs,
                                  ffi.Size tbslen)>>>)>>(
      'EVP_PKEY_meth_get_digestverify');
  late final _EVP_PKEY_meth_get_digestverify =
      _EVP_PKEY_meth_get_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi
                .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_check');
  late final _EVP_PKEY_meth_get_check = _EVP_PKEY_meth_get_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi
                .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_public_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_public_check');
  late final _EVP_PKEY_meth_get_public_check =
      _EVP_PKEY_meth_get_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi
                .NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_param_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_param_check');
  late final _EVP_PKEY_meth_get_param_check =
      _EVP_PKEY_meth_get_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pdigest_custom,
  ) {
    return _EVP_PKEY_meth_get_digest_custom(
      pmeth,
      pdigest_custom,
    );
  }

  late final _EVP_PKEY_meth_get_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_digest_custom');
  late final _EVP_PKEY_meth_get_digest_custom =
      _EVP_PKEY_meth_get_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_KEYEXCH_free(
    ffi.Pointer<EVP_KEYEXCH> exchange,
  ) {
    return _EVP_KEYEXCH_free(
      exchange,
    );
  }

  late final _EVP_KEYEXCH_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KEYEXCH>)>>(
          'EVP_KEYEXCH_free');
  late final _EVP_KEYEXCH_free = _EVP_KEYEXCH_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_KEYEXCH>)>();

  int EVP_KEYEXCH_up_ref(
    ffi.Pointer<EVP_KEYEXCH> exchange,
  ) {
    return _EVP_KEYEXCH_up_ref(
      exchange,
    );
  }

  late final _EVP_KEYEXCH_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_KEYEXCH>)>>(
          'EVP_KEYEXCH_up_ref');
  late final _EVP_KEYEXCH_up_ref = _EVP_KEYEXCH_up_refPtr.asFunction<
      int Function(ffi.Pointer<EVP_KEYEXCH>)>();

  ffi.Pointer<EVP_KEYEXCH> EVP_KEYEXCH_fetch(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_KEYEXCH_fetch(
      ctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_KEYEXCH_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KEYEXCH> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_KEYEXCH_fetch');
  late final _EVP_KEYEXCH_fetch = _EVP_KEYEXCH_fetchPtr.asFunction<
      ffi.Pointer<EVP_KEYEXCH> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_KEYEXCH_get0_provider(
    ffi.Pointer<EVP_KEYEXCH> exchange,
  ) {
    return _EVP_KEYEXCH_get0_provider(
      exchange,
    );
  }

  late final _EVP_KEYEXCH_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_KEYEXCH>)>>('EVP_KEYEXCH_get0_provider');
  late final _EVP_KEYEXCH_get0_provider =
      _EVP_KEYEXCH_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_KEYEXCH>)>();

  int EVP_KEYEXCH_is_a(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_KEYEXCH_is_a(
      keyexch,
      name,
    );
  }

  late final _EVP_KEYEXCH_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_KEYEXCH>,
              ffi.Pointer<ffi.Char>)>>('EVP_KEYEXCH_is_a');
  late final _EVP_KEYEXCH_is_a = _EVP_KEYEXCH_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_KEYEXCH>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_KEYEXCH_get0_name(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
  ) {
    return _EVP_KEYEXCH_get0_name(
      keyexch,
    );
  }

  late final _EVP_KEYEXCH_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEYEXCH>)>>('EVP_KEYEXCH_get0_name');
  late final _EVP_KEYEXCH_get0_name = _EVP_KEYEXCH_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEYEXCH>)>();

  ffi.Pointer<ffi.Char> EVP_KEYEXCH_get0_description(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
  ) {
    return _EVP_KEYEXCH_get0_description(
      keyexch,
    );
  }

  late final _EVP_KEYEXCH_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KEYEXCH>)>>('EVP_KEYEXCH_get0_description');
  late final _EVP_KEYEXCH_get0_description = _EVP_KEYEXCH_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KEYEXCH>)>();

  void EVP_KEYEXCH_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_KEYEXCH> keyexch,
                    ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_KEYEXCH_do_all_provided(
      libctx,
      fn,
      data,
    );
  }

  late final _EVP_KEYEXCH_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KEYEXCH> keyexch,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEYEXCH_do_all_provided');
  late final _EVP_KEYEXCH_do_all_provided =
      _EVP_KEYEXCH_do_all_providedPtr.asFunction<
          void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KEYEXCH> keyexch,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  int EVP_KEYEXCH_names_do_all(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_KEYEXCH_names_do_all(
      keyexch,
      fn,
      data,
    );
  }

  late final _EVP_KEYEXCH_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KEYEXCH>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KEYEXCH_names_do_all');
  late final _EVP_KEYEXCH_names_do_all =
      _EVP_KEYEXCH_names_do_allPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_KEYEXCH>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYEXCH_gettable_ctx_params(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
  ) {
    return _EVP_KEYEXCH_gettable_ctx_params(
      keyexch,
    );
  }

  late final _EVP_KEYEXCH_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYEXCH>)>>('EVP_KEYEXCH_gettable_ctx_params');
  late final _EVP_KEYEXCH_gettable_ctx_params =
      _EVP_KEYEXCH_gettable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYEXCH>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KEYEXCH_settable_ctx_params(
    ffi.Pointer<EVP_KEYEXCH> keyexch,
  ) {
    return _EVP_KEYEXCH_settable_ctx_params(
      keyexch,
    );
  }

  late final _EVP_KEYEXCH_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KEYEXCH>)>>('EVP_KEYEXCH_settable_ctx_params');
  late final _EVP_KEYEXCH_settable_ctx_params =
      _EVP_KEYEXCH_settable_ctx_paramsPtr.asFunction<
          ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KEYEXCH>)>();

  void EVP_add_alg_module() {
    return _EVP_add_alg_module();
  }

  late final _EVP_add_alg_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_add_alg_module');
  late final _EVP_add_alg_module =
      _EVP_add_alg_modulePtr.asFunction<void Function()>();

  int EVP_PKEY_CTX_set_group_name(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_PKEY_CTX_set_group_name(
      ctx,
      name,
    );
  }

  late final _EVP_PKEY_CTX_set_group_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_set_group_name');
  late final _EVP_PKEY_CTX_set_group_name =
      _EVP_PKEY_CTX_set_group_namePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_get_group_name(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> name,
    int namelen,
  ) {
    return _EVP_PKEY_CTX_get_group_name(
      ctx,
      name,
      namelen,
    );
  }

  late final _EVP_PKEY_CTX_get_group_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('EVP_PKEY_CTX_get_group_name');
  late final _EVP_PKEY_CTX_get_group_name =
      _EVP_PKEY_CTX_get_group_namePtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_get_group_name(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> name,
    int name_sz,
    ffi.Pointer<ffi.Size> gname_len,
  ) {
    return _EVP_PKEY_get_group_name(
      pkey,
      name,
      name_sz,
      gname_len,
    );
  }

  late final _EVP_PKEY_get_group_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_group_name');
  late final _EVP_PKEY_get_group_name = _EVP_PKEY_get_group_namePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<OSSL_LIB_CTX> EVP_PKEY_CTX_get0_libctx(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_libctx(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_libctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_libctx');
  late final _EVP_PKEY_CTX_get0_libctx =
      _EVP_PKEY_CTX_get0_libctxPtr.asFunction<
          ffi.Pointer<OSSL_LIB_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<ffi.Char> EVP_PKEY_CTX_get0_propq(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_propq(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_propqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_propq');
  late final _EVP_PKEY_CTX_get0_propq = _EVP_PKEY_CTX_get0_propqPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_PKEY_CTX_get0_provider(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_provider(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_provider');
  late final _EVP_PKEY_CTX_get0_provider =
      _EVP_PKEY_CTX_get0_providerPtr.asFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int nid,
  ) {
    return _EVP_PKEY_CTX_set_ec_paramgen_curve_nid(
      ctx,
      nid,
    );
  }

  late final _EVP_PKEY_CTX_set_ec_paramgen_curve_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_ec_paramgen_curve_nid');
  late final _EVP_PKEY_CTX_set_ec_paramgen_curve_nid =
      _EVP_PKEY_CTX_set_ec_paramgen_curve_nidPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set_ec_param_enc(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int param_enc,
  ) {
    return _EVP_PKEY_CTX_set_ec_param_enc(
      ctx,
      param_enc,
    );
  }

  late final _EVP_PKEY_CTX_set_ec_param_encPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_ec_param_enc');
  late final _EVP_PKEY_CTX_set_ec_param_enc = _EVP_PKEY_CTX_set_ec_param_encPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set_ecdh_cofactor_mode(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cofactor_mode,
  ) {
    return _EVP_PKEY_CTX_set_ecdh_cofactor_mode(
      ctx,
      cofactor_mode,
    );
  }

  late final _EVP_PKEY_CTX_set_ecdh_cofactor_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_ecdh_cofactor_mode');
  late final _EVP_PKEY_CTX_set_ecdh_cofactor_mode =
      _EVP_PKEY_CTX_set_ecdh_cofactor_modePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_get_ecdh_cofactor_mode(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_ecdh_cofactor_mode(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_ecdh_cofactor_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_get_ecdh_cofactor_mode');
  late final _EVP_PKEY_CTX_get_ecdh_cofactor_mode =
      _EVP_PKEY_CTX_get_ecdh_cofactor_modePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_set_ecdh_kdf_type(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int kdf,
  ) {
    return _EVP_PKEY_CTX_set_ecdh_kdf_type(
      ctx,
      kdf,
    );
  }

  late final _EVP_PKEY_CTX_set_ecdh_kdf_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_ecdh_kdf_type');
  late final _EVP_PKEY_CTX_set_ecdh_kdf_type =
      _EVP_PKEY_CTX_set_ecdh_kdf_typePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_get_ecdh_kdf_type(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_ecdh_kdf_type(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_ecdh_kdf_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_get_ecdh_kdf_type');
  late final _EVP_PKEY_CTX_get_ecdh_kdf_type =
      _EVP_PKEY_CTX_get_ecdh_kdf_typePtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_set_ecdh_kdf_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_ecdh_kdf_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_set_ecdh_kdf_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_MD>)>>('EVP_PKEY_CTX_set_ecdh_kdf_md');
  late final _EVP_PKEY_CTX_set_ecdh_kdf_md =
      _EVP_PKEY_CTX_set_ecdh_kdf_mdPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_PKEY_CTX_get_ecdh_kdf_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_MD>> md,
  ) {
    return _EVP_PKEY_CTX_get_ecdh_kdf_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_get_ecdh_kdf_mdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                  ffi.Pointer<ffi.Pointer<EVP_MD>>)>>(
      'EVP_PKEY_CTX_get_ecdh_kdf_md');
  late final _EVP_PKEY_CTX_get_ecdh_kdf_md =
      _EVP_PKEY_CTX_get_ecdh_kdf_mdPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_MD>>)>();

  int EVP_PKEY_CTX_set_ecdh_kdf_outlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int len,
  ) {
    return _EVP_PKEY_CTX_set_ecdh_kdf_outlen(
      ctx,
      len,
    );
  }

  late final _EVP_PKEY_CTX_set_ecdh_kdf_outlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_ecdh_kdf_outlen');
  late final _EVP_PKEY_CTX_set_ecdh_kdf_outlen =
      _EVP_PKEY_CTX_set_ecdh_kdf_outlenPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_get_ecdh_kdf_outlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_CTX_get_ecdh_kdf_outlen(
      ctx,
      len,
    );
  }

  late final _EVP_PKEY_CTX_get_ecdh_kdf_outlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_CTX_get_ecdh_kdf_outlen');
  late final _EVP_PKEY_CTX_get_ecdh_kdf_outlen =
      _EVP_PKEY_CTX_get_ecdh_kdf_outlenPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_CTX_set0_ecdh_kdf_ukm(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> ukm,
    int len,
  ) {
    return _EVP_PKEY_CTX_set0_ecdh_kdf_ukm(
      ctx,
      ukm,
      len,
    );
  }

  late final _EVP_PKEY_CTX_set0_ecdh_kdf_ukmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set0_ecdh_kdf_ukm');
  late final _EVP_PKEY_CTX_set0_ecdh_kdf_ukm =
      _EVP_PKEY_CTX_set0_ecdh_kdf_ukmPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_get0_ecdh_kdf_ukm(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ukm,
  ) {
    return _EVP_PKEY_CTX_get0_ecdh_kdf_ukm(
      ctx,
      ukm,
    );
  }

  late final _EVP_PKEY_CTX_get0_ecdh_kdf_ukmPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'EVP_PKEY_CTX_get0_ecdh_kdf_ukm');
  late final _EVP_PKEY_CTX_get0_ecdh_kdf_ukm =
      _EVP_PKEY_CTX_get0_ecdh_kdf_ukmPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ffi.Char> OSSL_EC_curve_nid2name(
    int nid,
  ) {
    return _OSSL_EC_curve_nid2name(
      nid,
    );
  }

  late final _OSSL_EC_curve_nid2namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OSSL_EC_curve_nid2name');
  late final _OSSL_EC_curve_nid2name = _OSSL_EC_curve_nid2namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  /// Returns the basic GFp ec methods which provides the basis for the
  /// optimized methods.
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_simple_method() {
    return _EC_GFp_simple_method();
  }

  late final _EC_GFp_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_simple_method');
  late final _EC_GFp_simple_method =
      _EC_GFp_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns GFp methods using montgomery multiplication.
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_mont_method() {
    return _EC_GFp_mont_method();
  }

  late final _EC_GFp_mont_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_mont_method');
  late final _EC_GFp_mont_method =
      _EC_GFp_mont_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns GFp methods using optimized methods for NIST recommended curves
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_nist_method() {
    return _EC_GFp_nist_method();
  }

  late final _EC_GFp_nist_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_nist_method');
  late final _EC_GFp_nist_method =
      _EC_GFp_nist_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns the basic GF2m ec method
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GF2m_simple_method() {
    return _EC_GF2m_simple_method();
  }

  late final _EC_GF2m_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GF2m_simple_method');
  late final _EC_GF2m_simple_method =
      _EC_GF2m_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Creates a new EC_GROUP object
  /// \param   meth   EC_METHOD to use
  /// \return  newly created EC_GROUP object or NULL in case of an error.
  ffi.Pointer<EC_GROUP> EC_GROUP_new(
    ffi.Pointer<EC_METHOD> meth,
  ) {
    return _EC_GROUP_new(
      meth,
    );
  }

  late final _EC_GROUP_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<EC_METHOD>)>>('EC_GROUP_new');
  late final _EC_GROUP_new = _EC_GROUP_newPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_METHOD>)>();

  /// Clears and frees a EC_GROUP object
  /// \param  group  EC_GROUP object to be cleared and freed.
  void EC_GROUP_clear_free(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_clear_free(
      group,
    );
  }

  late final _EC_GROUP_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_clear_free');
  late final _EC_GROUP_clear_free = _EC_GROUP_clear_freePtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>)>();

  /// Returns the EC_METHOD of the EC_GROUP object.
  /// \param  group  EC_GROUP object
  /// \return EC_METHOD used in this EC_GROUP object.
  ffi.Pointer<EC_METHOD> EC_GROUP_method_of(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_method_of(
      group,
    );
  }

  late final _EC_GROUP_method_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_method_of');
  late final _EC_GROUP_method_of = _EC_GROUP_method_ofPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_GROUP>)>();

  /// Returns the field type of the EC_METHOD.
  /// \param  meth  EC_METHOD object
  /// \return NID of the underlying field type OID.
  int EC_METHOD_get_field_type(
    ffi.Pointer<EC_METHOD> meth,
  ) {
    return _EC_METHOD_get_field_type(
      meth,
    );
  }

  late final _EC_METHOD_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_METHOD>)>>(
          'EC_METHOD_get_field_type');
  late final _EC_METHOD_get_field_type = _EC_METHOD_get_field_typePtr
      .asFunction<int Function(ffi.Pointer<EC_METHOD>)>();

  /// Frees a EC_GROUP object
  /// \param  group  EC_GROUP object to be freed.
  void EC_GROUP_free(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_free(
      group,
    );
  }

  late final _EC_GROUP_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_free');
  late final _EC_GROUP_free =
      _EC_GROUP_freePtr.asFunction<void Function(ffi.Pointer<EC_GROUP>)>();

  /// Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD.
  /// \param  dst  destination EC_GROUP object
  /// \param  src  source EC_GROUP object
  /// \return 1 on success and 0 if an error occurred.
  int EC_GROUP_copy(
    ffi.Pointer<EC_GROUP> dst,
    ffi.Pointer<EC_GROUP> src,
  ) {
    return _EC_GROUP_copy(
      dst,
      src,
    );
  }

  late final _EC_GROUP_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)>>('EC_GROUP_copy');
  late final _EC_GROUP_copy = _EC_GROUP_copyPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)>();

  /// Creates a new EC_GROUP object and copies the content
  /// form src to the newly created EC_KEY object
  /// \param  src  source EC_GROUP object
  /// \return newly created EC_GROUP object or NULL in case of an error.
  ffi.Pointer<EC_GROUP> EC_GROUP_dup(
    ffi.Pointer<EC_GROUP> src,
  ) {
    return _EC_GROUP_dup(
      src,
    );
  }

  late final _EC_GROUP_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_dup');
  late final _EC_GROUP_dup = _EC_GROUP_dupPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_GROUP>)>();

  /// Sets the generator and its order/cofactor of a EC_GROUP object.
  /// \param  group      EC_GROUP object
  /// \param  generator  EC_POINT object with the generator.
  /// \param  order      the order of the group generated by the generator.
  /// \param  cofactor   the index of the sub-group generated by the generator
  /// in the group of all points on the elliptic curve.
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_generator(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> generator,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BIGNUM> cofactor,
  ) {
    return _EC_GROUP_set_generator(
      group,
      generator,
      order,
      cofactor,
    );
  }

  late final _EC_GROUP_set_generatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('EC_GROUP_set_generator');
  late final _EC_GROUP_set_generator = _EC_GROUP_set_generatorPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  /// Returns the generator of a EC_GROUP object.
  /// \param  group  EC_GROUP object
  /// \return the currently used generator (possibly NULL).
  ffi.Pointer<EC_POINT> EC_GROUP_get0_generator(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_generator(
      group,
    );
  }

  late final _EC_GROUP_get0_generatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_generator');
  late final _EC_GROUP_get0_generator = _EC_GROUP_get0_generatorPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)>();

  /// Returns the montgomery data for order(Generator)
  /// \param  group  EC_GROUP object
  /// \return the currently used montgomery data (possibly NULL).
  ffi.Pointer<BN_MONT_CTX> EC_GROUP_get_mont_data(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_mont_data(
      group,
    );
  }

  late final _EC_GROUP_get_mont_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get_mont_data');
  late final _EC_GROUP_get_mont_data = _EC_GROUP_get_mont_dataPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<EC_GROUP>)>();

  /// Gets the order of a EC_GROUP
  /// \param  group  EC_GROUP object
  /// \param  order  BIGNUM to which the order is copied
  /// \param  ctx    unused
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_order(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_order(
      group,
      order,
      ctx,
    );
  }

  late final _EC_GROUP_get_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_order');
  late final _EC_GROUP_get_order = _EC_GROUP_get_orderPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the order of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group order
  ffi.Pointer<BIGNUM> EC_GROUP_get0_order(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_order(
      group,
    );
  }

  late final _EC_GROUP_get0_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>>(
      'EC_GROUP_get0_order');
  late final _EC_GROUP_get0_order = _EC_GROUP_get0_orderPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>();

  /// Gets the number of bits of the order of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return number of bits of group order.
  int EC_GROUP_order_bits(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_order_bits(
      group,
    );
  }

  late final _EC_GROUP_order_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_order_bits');
  late final _EC_GROUP_order_bits =
      _EC_GROUP_order_bitsPtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  /// Gets the cofactor of a EC_GROUP
  /// \param  group     EC_GROUP object
  /// \param  cofactor  BIGNUM to which the cofactor is copied
  /// \param  ctx       unused
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_cofactor(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> cofactor,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_cofactor(
      group,
      cofactor,
      ctx,
    );
  }

  late final _EC_GROUP_get_cofactorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_cofactor');
  late final _EC_GROUP_get_cofactor = _EC_GROUP_get_cofactorPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the cofactor of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group cofactor
  ffi.Pointer<BIGNUM> EC_GROUP_get0_cofactor(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_cofactor(
      group,
    );
  }

  late final _EC_GROUP_get0_cofactorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>>(
      'EC_GROUP_get0_cofactor');
  late final _EC_GROUP_get0_cofactor = _EC_GROUP_get0_cofactorPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>();

  /// Sets the name of a EC_GROUP object
  /// \param  group  EC_GROUP object
  /// \param  nid    NID of the curve name OID
  void EC_GROUP_set_curve_name(
    ffi.Pointer<EC_GROUP> group,
    int nid,
  ) {
    return _EC_GROUP_set_curve_name(
      group,
      nid,
    );
  }

  late final _EC_GROUP_set_curve_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>, ffi.Int)>>(
      'EC_GROUP_set_curve_name');
  late final _EC_GROUP_set_curve_name = _EC_GROUP_set_curve_namePtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>, int)>();

  /// Returns the curve name of a EC_GROUP object
  /// \param  group  EC_GROUP object
  /// \return NID of the curve name OID or 0 if not set.
  int EC_GROUP_get_curve_name(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_curve_name(
      group,
    );
  }

  late final _EC_GROUP_get_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_curve_name');
  late final _EC_GROUP_get_curve_name = _EC_GROUP_get_curve_namePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  /// Gets the field of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group field
  ffi.Pointer<BIGNUM> EC_GROUP_get0_field(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_field(
      group,
    );
  }

  late final _EC_GROUP_get0_fieldPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>>(
      'EC_GROUP_get0_field');
  late final _EC_GROUP_get0_field = _EC_GROUP_get0_fieldPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>();

  /// Returns the field type of the EC_GROUP.
  /// \param  group  EC_GROUP object
  /// \return NID of the underlying field type OID.
  int EC_GROUP_get_field_type(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_field_type(
      group,
    );
  }

  late final _EC_GROUP_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_field_type');
  late final _EC_GROUP_get_field_type = _EC_GROUP_get_field_typePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_set_asn1_flag(
    ffi.Pointer<EC_GROUP> group,
    int flag,
  ) {
    return _EC_GROUP_set_asn1_flag(
      group,
      flag,
    );
  }

  late final _EC_GROUP_set_asn1_flagPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>, ffi.Int)>>(
      'EC_GROUP_set_asn1_flag');
  late final _EC_GROUP_set_asn1_flag = _EC_GROUP_set_asn1_flagPtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>, int)>();

  int EC_GROUP_get_asn1_flag(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_asn1_flag(
      group,
    );
  }

  late final _EC_GROUP_get_asn1_flagPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_asn1_flag');
  late final _EC_GROUP_get_asn1_flag = _EC_GROUP_get_asn1_flagPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_set_point_conversion_form(
    ffi.Pointer<EC_GROUP> group,
    point_conversion_form_t form,
  ) {
    return _EC_GROUP_set_point_conversion_form(
      group,
      form.value,
    );
  }

  late final _EC_GROUP_set_point_conversion_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EC_GROUP>,
              ffi.UnsignedInt)>>('EC_GROUP_set_point_conversion_form');
  late final _EC_GROUP_set_point_conversion_form =
      _EC_GROUP_set_point_conversion_formPtr.asFunction<
          void Function(ffi.Pointer<EC_GROUP>, int)>();

  point_conversion_form_t EC_GROUP_get_point_conversion_form(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return point_conversion_form_t
        .fromValue(_EC_GROUP_get_point_conversion_form(
      arg0,
    ));
  }

  late final _EC_GROUP_get_point_conversion_formPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_GROUP>)>>(
      'EC_GROUP_get_point_conversion_form');
  late final _EC_GROUP_get_point_conversion_form =
      _EC_GROUP_get_point_conversion_formPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<ffi.UnsignedChar> EC_GROUP_get0_seed(
    ffi.Pointer<EC_GROUP> x,
  ) {
    return _EC_GROUP_get0_seed(
      x,
    );
  }

  late final _EC_GROUP_get0_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_seed');
  late final _EC_GROUP_get0_seed = _EC_GROUP_get0_seedPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_seed_len(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return _EC_GROUP_get_seed_len(
      arg0,
    );
  }

  late final _EC_GROUP_get_seed_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_seed_len');
  late final _EC_GROUP_get_seed_len = _EC_GROUP_get_seed_lenPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_set_seed(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int len,
  ) {
    return _EC_GROUP_set_seed(
      arg0,
      arg1,
      len,
    );
  }

  late final _EC_GROUP_set_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EC_GROUP_set_seed');
  late final _EC_GROUP_set_seed = _EC_GROUP_set_seedPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Sets the parameters of an ec curve defined by y^2 = x^3 + a*x + b (for GFp)
  /// or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve');
  late final _EC_GROUP_set_curve = _EC_GROUP_set_curvePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the parameters of the ec curve defined by y^2 = x^3 + a*x + b (for GFp)
  /// or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve');
  late final _EC_GROUP_get_curve = _EC_GROUP_get_curvePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Sets the parameters of an ec curve. Synonym for EC_GROUP_set_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GFp(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve_GFp');
  late final _EC_GROUP_set_curve_GFp = _EC_GROUP_set_curve_GFpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GFp(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve_GFp');
  late final _EC_GROUP_get_curve_GFp = _EC_GROUP_get_curve_GFpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Sets the parameter of an ec curve. Synonym for EC_GROUP_set_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GF2m(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve_GF2m');
  late final _EC_GROUP_set_curve_GF2m = _EC_GROUP_set_curve_GF2mPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GF2m(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve_GF2m');
  late final _EC_GROUP_get_curve_GF2m = _EC_GROUP_get_curve_GF2mPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Returns the number of bits needed to represent a field element
  /// \param  group  EC_GROUP object
  /// \return number of bits needed to represent a field element
  int EC_GROUP_get_degree(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_degree(
      group,
    );
  }

  late final _EC_GROUP_get_degreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_degree');
  late final _EC_GROUP_get_degree =
      _EC_GROUP_get_degreePtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  /// Checks whether the parameter in the EC_GROUP define a valid ec group
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if group is a valid ec group and 0 otherwise
  int EC_GROUP_check(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>>('EC_GROUP_check');
  late final _EC_GROUP_check = _EC_GROUP_checkPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  /// Checks whether the discriminant of the elliptic curve is zero or not
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the discriminant is not zero and 0 otherwise
  int EC_GROUP_check_discriminant(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check_discriminant(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_check_discriminantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_check_discriminant');
  late final _EC_GROUP_check_discriminant = _EC_GROUP_check_discriminantPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  /// Compares two EC_GROUP objects
  /// \param  a    first EC_GROUP object
  /// \param  b    second EC_GROUP object
  /// \param  ctx  BN_CTX object (optional)
  /// \return 0 if the groups are equal, 1 if not, or -1 on error
  int EC_GROUP_cmp(
    ffi.Pointer<EC_GROUP> a,
    ffi.Pointer<EC_GROUP> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_cmp(
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_cmp');
  late final _EC_GROUP_cmp = _EC_GROUP_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  /// Creates a new EC_GROUP object with the specified parameters defined
  /// over GFp (defined by the equation y^2 = x^3 + a*x + b)
  /// \param  p    BIGNUM with the prime number
  /// \param  a    BIGNUM with the parameter a of the equation
  /// \param  b    BIGNUM with the parameter b of the equation
  /// \param  ctx  BN_CTX object (optional)
  /// \return newly created EC_GROUP object with the specified parameters
  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GFp(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GFp(
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_new_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_new_curve_GFp');
  late final _EC_GROUP_new_curve_GFp = _EC_GROUP_new_curve_GFpPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Creates a new EC_GROUP object with the specified parameters defined
  /// over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b)
  /// \param  p    BIGNUM with the polynomial defining the underlying field
  /// \param  a    BIGNUM with the parameter a of the equation
  /// \param  b    BIGNUM with the parameter b of the equation
  /// \param  ctx  BN_CTX object (optional)
  /// \return newly created EC_GROUP object with the specified parameters
  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GF2m(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GF2m(
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_new_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_new_curve_GF2m');
  late final _EC_GROUP_new_curve_GF2m = _EC_GROUP_new_curve_GF2mPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Creates a EC_GROUP object with a curve specified by parameters.
  /// The parameters may be explicit or a named curve,
  /// \param  params A list of parameters describing the group.
  /// \param  libctx The associated library context or NULL for the default
  /// context
  /// \param  propq  A property query string
  /// \return newly created EC_GROUP object with specified parameters or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_params(
    ffi.Pointer<OSSL_PARAM> params,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EC_GROUP_new_from_params(
      params,
      libctx,
      propq,
    );
  }

  late final _EC_GROUP_new_from_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EC_GROUP_new_from_params');
  late final _EC_GROUP_new_from_params =
      _EC_GROUP_new_from_paramsPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<OSSL_PARAM>,
              ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>)>();

  /// Creates an OSSL_PARAM array with the parameters describing the given
  /// EC_GROUP.
  /// The resulting parameters may contain an explicit or a named curve depending
  /// on the EC_GROUP.
  /// \param  group  pointer to the EC_GROUP object
  /// \param  libctx The associated library context or NULL for the default
  /// context
  /// \param  propq  A property query string
  /// \param  bnctx  BN_CTX object (optional)
  /// \return newly created OSSL_PARAM array with the parameters
  /// describing the given EC_GROUP or NULL if an error occurred
  ffi.Pointer<OSSL_PARAM> EC_GROUP_to_params(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
    ffi.Pointer<BN_CTX> bnctx,
  ) {
    return _EC_GROUP_to_params(
      group,
      libctx,
      propq,
      bnctx,
    );
  }

  late final _EC_GROUP_to_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_to_params');
  late final _EC_GROUP_to_params = _EC_GROUP_to_paramsPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<BN_CTX>)>();

  /// Creates a EC_GROUP object with a curve specified by a NID
  /// \param  libctx The associated library context or NULL for the default
  /// context
  /// \param  propq  A property query string
  /// \param  nid    NID of the OID of the curve name
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_by_curve_name_ex(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
    int nid,
  ) {
    return _EC_GROUP_new_by_curve_name_ex(
      libctx,
      propq,
      nid,
    );
  }

  late final _EC_GROUP_new_by_curve_name_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EC_GROUP_new_by_curve_name_ex');
  late final _EC_GROUP_new_by_curve_name_ex =
      _EC_GROUP_new_by_curve_name_exPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>, int)>();

  /// Creates a EC_GROUP object with a curve specified by a NID. Same as
  /// EC_GROUP_new_by_curve_name_ex but the libctx and propq are always
  /// NULL.
  /// \param  nid    NID of the OID of the curve name
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_by_curve_name(
    int nid,
  ) {
    return _EC_GROUP_new_by_curve_name(
      nid,
    );
  }

  late final _EC_GROUP_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_GROUP> Function(ffi.Int)>>(
          'EC_GROUP_new_by_curve_name');
  late final _EC_GROUP_new_by_curve_name = _EC_GROUP_new_by_curve_namePtr
      .asFunction<ffi.Pointer<EC_GROUP> Function(int)>();

  /// Creates a new EC_GROUP object from an ECPARAMETERS object
  /// \param  params  pointer to the ECPARAMETERS object
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecparameters(
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecparameters(
      params,
    );
  }

  late final _EC_GROUP_new_from_ecparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<ECPARAMETERS>)>>('EC_GROUP_new_from_ecparameters');
  late final _EC_GROUP_new_from_ecparameters =
      _EC_GROUP_new_from_ecparametersPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPARAMETERS>)>();

  /// Creates an ECPARAMETERS object for the given EC_GROUP object.
  /// \param  group   pointer to the EC_GROUP object
  /// \param  params  pointer to an existing ECPARAMETERS object or NULL
  /// \return pointer to the new ECPARAMETERS object or NULL
  /// if an error occurred.
  ffi.Pointer<ECPARAMETERS> EC_GROUP_get_ecparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecparameters(
      group,
      params,
    );
  }

  late final _EC_GROUP_get_ecparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECPARAMETERS> Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ECPARAMETERS>)>>('EC_GROUP_get_ecparameters');
  late final _EC_GROUP_get_ecparameters =
      _EC_GROUP_get_ecparametersPtr.asFunction<
          ffi.Pointer<ECPARAMETERS> Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<ECPARAMETERS>)>();

  /// Creates a new EC_GROUP object from an ECPKPARAMETERS object
  /// \param  params  pointer to an existing ECPKPARAMETERS object, or NULL
  /// \return newly created EC_GROUP object with specified curve, or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecpkparameters(
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecpkparameters(
      params,
    );
  }

  late final _EC_GROUP_new_from_ecpkparametersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)>>(
      'EC_GROUP_new_from_ecpkparameters');
  late final _EC_GROUP_new_from_ecpkparameters =
      _EC_GROUP_new_from_ecpkparametersPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)>();

  /// Creates an ECPKPARAMETERS object for the given EC_GROUP object.
  /// \param  group   pointer to the EC_GROUP object
  /// \param  params  pointer to an existing ECPKPARAMETERS object or NULL
  /// \return pointer to the new ECPKPARAMETERS object or NULL
  /// if an error occurred.
  ffi.Pointer<ECPKPARAMETERS> EC_GROUP_get_ecpkparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecpkparameters(
      group,
      params,
    );
  }

  late final _EC_GROUP_get_ecpkparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECPKPARAMETERS> Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ECPKPARAMETERS>)>>('EC_GROUP_get_ecpkparameters');
  late final _EC_GROUP_get_ecpkparameters =
      _EC_GROUP_get_ecpkparametersPtr.asFunction<
          ffi.Pointer<ECPKPARAMETERS> Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<ECPKPARAMETERS>)>();

  int EC_get_builtin_curves(
    ffi.Pointer<EC_builtin_curve> r,
    int nitems,
  ) {
    return _EC_get_builtin_curves(
      r,
      nitems,
    );
  }

  late final _EC_get_builtin_curvesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<EC_builtin_curve>,
              ffi.Size)>>('EC_get_builtin_curves');
  late final _EC_get_builtin_curves = _EC_get_builtin_curvesPtr.asFunction<
      int Function(ffi.Pointer<EC_builtin_curve>, int)>();

  ffi.Pointer<ffi.Char> EC_curve_nid2nist(
    int nid,
  ) {
    return _EC_curve_nid2nist(
      nid,
    );
  }

  late final _EC_curve_nid2nistPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'EC_curve_nid2nist');
  late final _EC_curve_nid2nist =
      _EC_curve_nid2nistPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int EC_curve_nist2nid(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EC_curve_nist2nid(
      name,
    );
  }

  late final _EC_curve_nist2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'EC_curve_nist2nid');
  late final _EC_curve_nist2nid =
      _EC_curve_nist2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int EC_GROUP_check_named_curve(
    ffi.Pointer<EC_GROUP> group,
    int nist_only,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check_named_curve(
      group,
      nist_only,
      ctx,
    );
  }

  late final _EC_GROUP_check_named_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_check_named_curve');
  late final _EC_GROUP_check_named_curve =
      _EC_GROUP_check_named_curvePtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, int, ffi.Pointer<BN_CTX>)>();

  /// Creates a new EC_POINT object for the specified EC_GROUP
  /// \param  group  EC_GROUP the underlying EC_GROUP object
  /// \return newly created EC_POINT object or NULL if an error occurred
  ffi.Pointer<EC_POINT> EC_POINT_new(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_POINT_new(
      group,
    );
  }

  late final _EC_POINT_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_POINT_new');
  late final _EC_POINT_new = _EC_POINT_newPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)>();

  /// Frees a EC_POINT object
  /// \param  point  EC_POINT object to be freed
  void EC_POINT_free(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_free(
      point,
    );
  }

  late final _EC_POINT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
          'EC_POINT_free');
  late final _EC_POINT_free =
      _EC_POINT_freePtr.asFunction<void Function(ffi.Pointer<EC_POINT>)>();

  /// Clears and frees a EC_POINT object
  /// \param  point  EC_POINT object to be cleared and freed
  void EC_POINT_clear_free(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_clear_free(
      point,
    );
  }

  late final _EC_POINT_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
          'EC_POINT_clear_free');
  late final _EC_POINT_clear_free = _EC_POINT_clear_freePtr.asFunction<
      void Function(ffi.Pointer<EC_POINT>)>();

  /// Copies EC_POINT object
  /// \param  dst  destination EC_POINT object
  /// \param  src  source EC_POINT object
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_copy(
    ffi.Pointer<EC_POINT> dst,
    ffi.Pointer<EC_POINT> src,
  ) {
    return _EC_POINT_copy(
      dst,
      src,
    );
  }

  late final _EC_POINT_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)>>('EC_POINT_copy');
  late final _EC_POINT_copy = _EC_POINT_copyPtr.asFunction<
      int Function(ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)>();

  /// Creates a new EC_POINT object and copies the content of the supplied
  /// EC_POINT
  /// \param  src    source EC_POINT object
  /// \param  group  underlying the EC_GROUP object
  /// \return newly created EC_POINT object or NULL if an error occurred
  ffi.Pointer<EC_POINT> EC_POINT_dup(
    ffi.Pointer<EC_POINT> src,
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_POINT_dup(
      src,
      group,
    );
  }

  late final _EC_POINT_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_POINT>, ffi.Pointer<EC_GROUP>)>>('EC_POINT_dup');
  late final _EC_POINT_dup = _EC_POINT_dupPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(
          ffi.Pointer<EC_POINT>, ffi.Pointer<EC_GROUP>)>();

  /// Sets a point to infinity (neutral element)
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT to set to infinity
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_to_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_set_to_infinity(
      group,
      point,
    );
  }

  late final _EC_POINT_set_to_infinityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>)>>('EC_POINT_set_to_infinity');
  late final _EC_POINT_set_to_infinity = _EC_POINT_set_to_infinityPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)>();

  /// Returns the EC_METHOD used in EC_POINT object
  /// \param  point  EC_POINT object
  /// \return the EC_METHOD used
  ffi.Pointer<EC_METHOD> EC_POINT_method_of(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_method_of(
      point,
    );
  }

  late final _EC_POINT_method_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(
              ffi.Pointer<EC_POINT>)>>('EC_POINT_method_of');
  late final _EC_POINT_method_of = _EC_POINT_method_ofPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_POINT>)>();

  /// Sets the jacobian projective coordinates of a EC_POINT over GFp
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  z      BIGNUM with the z-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_Jprojective_coordinates_GFp(
      group,
      p,
      x,
      y,
      z,
      ctx,
    );
  }

  late final _EC_POINT_set_Jprojective_coordinates_GFpPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_set_Jprojective_coordinates_GFp');
  late final _EC_POINT_set_Jprojective_coordinates_GFp =
      _EC_POINT_set_Jprojective_coordinates_GFpPtr.asFunction<
          int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>();

  /// Gets the jacobian projective coordinates of a EC_POINT over GFp
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  z      BIGNUM for the z-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_Jprojective_coordinates_GFp(
      group,
      p,
      x,
      y,
      z,
      ctx,
    );
  }

  late final _EC_POINT_get_Jprojective_coordinates_GFpPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_get_Jprojective_coordinates_GFp');
  late final _EC_POINT_get_Jprojective_coordinates_GFp =
      _EC_POINT_get_Jprojective_coordinates_GFpPtr.asFunction<
          int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>();

  /// Sets the affine coordinates of an EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates');
  late final _EC_POINT_set_affine_coordinates =
      _EC_POINT_set_affine_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the affine coordinates of an EC_POINT.
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates');
  late final _EC_POINT_get_affine_coordinates =
      _EC_POINT_get_affine_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Sets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_set_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GFp(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates_GFp');
  late final _EC_POINT_set_affine_coordinates_GFp =
      _EC_POINT_set_affine_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_get_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GFp(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates_GFp');
  late final _EC_POINT_get_affine_coordinates_GFp =
      _EC_POINT_get_affine_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Sets the x9.62 compressed coordinates of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_compressed_coordinates');
  late final _EC_POINT_set_compressed_coordinates =
      _EC_POINT_set_compressed_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  /// Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of
  /// EC_POINT_set_compressed_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GFp(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_compressed_coordinates_GFp');
  late final _EC_POINT_set_compressed_coordinates_GFp =
      _EC_POINT_set_compressed_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  /// Sets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_set_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GF2m(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinates_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates_GF2m');
  late final _EC_POINT_set_affine_coordinates_GF2m =
      _EC_POINT_set_affine_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Gets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_get_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GF2m(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinates_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates_GF2m');
  late final _EC_POINT_get_affine_coordinates_GF2m =
      _EC_POINT_get_affine_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  /// Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of
  /// EC_POINT_set_compressed_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GF2m(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinates_GF2mPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_set_compressed_coordinates_GF2m');
  late final _EC_POINT_set_compressed_coordinates_GF2m =
      _EC_POINT_set_compressed_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  /// Encodes a EC_POINT object to a octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  form   point conversion form
  /// \param  buf    memory buffer for the result. If NULL the function returns
  /// required buffer size.
  /// \param  len    length of the memory buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_POINT_point2oct(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    point_conversion_form_t form,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2oct(
      group,
      p,
      form.value,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_POINT_point2octPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2oct');
  late final _EC_POINT_point2oct = _EC_POINT_point2octPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BN_CTX>)>();

  /// Decodes a EC_POINT from a octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  buf    memory buffer with the encoded ec point
  /// \param  len    length of the encoded ec point
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_oct2point(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_oct2point(
      group,
      p,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_POINT_oct2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_oct2point');
  late final _EC_POINT_oct2point = _EC_POINT_oct2pointPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BN_CTX>)>();

  /// Encodes an EC_POINT object to an allocated octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT object
  /// \param  form   point conversion form
  /// \param  pbuf   returns pointer to allocated buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_POINT_point2buf(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    point_conversion_form_t form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2buf(
      group,
      point,
      form.value,
      pbuf,
      ctx,
    );
  }

  late final _EC_POINT_point2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2buf');
  late final _EC_POINT_point2buf = _EC_POINT_point2bufPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> EC_POINT_point2bn(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    point_conversion_form_t form,
    ffi.Pointer<BIGNUM> arg3,
    ffi.Pointer<BN_CTX> arg4,
  ) {
    return _EC_POINT_point2bn(
      arg0,
      arg1,
      form.value,
      arg3,
      arg4,
    );
  }

  late final _EC_POINT_point2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.UnsignedInt,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2bn');
  late final _EC_POINT_point2bn = _EC_POINT_point2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          int, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_POINT> EC_POINT_bn2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<BIGNUM> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_bn2point(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EC_POINT_bn2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_bn2point');
  late final _EC_POINT_bn2point = _EC_POINT_bn2pointPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<ffi.Char> EC_POINT_point2hex(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    point_conversion_form_t form,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_point2hex(
      arg0,
      arg1,
      form.value,
      arg3,
    );
  }

  late final _EC_POINT_point2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.UnsignedInt,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2hex');
  late final _EC_POINT_point2hex = _EC_POINT_point2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>, int, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_POINT> EC_POINT_hex2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_hex2point(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EC_POINT_hex2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_hex2point');
  late final _EC_POINT_hex2point = _EC_POINT_hex2pointPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  /// Computes the sum of two EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result (r = a + b)
  /// \param  a      EC_POINT object with the first summand
  /// \param  b      EC_POINT object with the second summand
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_add(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_add(
      group,
      r,
      a,
      b,
      ctx,
    );
  }

  late final _EC_POINT_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_add');
  late final _EC_POINT_add = _EC_POINT_addPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  /// Computes the double of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result (r = 2 * a)
  /// \param  a      EC_POINT object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_dbl(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_dbl(
      group,
      r,
      a,
      ctx,
    );
  }

  late final _EC_POINT_dblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>>('EC_POINT_dbl');
  late final _EC_POINT_dbl = _EC_POINT_dblPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  /// Computes the inverse of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  a      EC_POINT object to be inverted (it's used for the result as well)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_invert(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_invert(
      group,
      a,
      ctx,
    );
  }

  late final _EC_POINT_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_invert');
  late final _EC_POINT_invert = _EC_POINT_invertPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  /// Checks whether the point is the neutral element of the group
  /// \param  group  the underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \return 1 if the point is the neutral element and 0 otherwise
  int EC_POINT_is_at_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
  ) {
    return _EC_POINT_is_at_infinity(
      group,
      p,
    );
  }

  late final _EC_POINT_is_at_infinityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>)>>('EC_POINT_is_at_infinity');
  late final _EC_POINT_is_at_infinity = _EC_POINT_is_at_infinityPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)>();

  /// Checks whether the point is on the curve
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT object to check
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the point is on the curve, 0 if not, or -1 on error
  int EC_POINT_is_on_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_is_on_curve(
      group,
      point,
      ctx,
    );
  }

  late final _EC_POINT_is_on_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_is_on_curve');
  late final _EC_POINT_is_on_curve = _EC_POINT_is_on_curvePtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  /// Compares two EC_POINTs
  /// \param  group  underlying EC_GROUP object
  /// \param  a      first EC_POINT object
  /// \param  b      second EC_POINT object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the points are not equal, 0 if they are, or -1 on error
  int EC_POINT_cmp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_cmp(
      group,
      a,
      b,
      ctx,
    );
  }

  late final _EC_POINT_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>>('EC_POINT_cmp');
  late final _EC_POINT_cmp = _EC_POINT_cmpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_make_affine(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_make_affine(
      group,
      point,
      ctx,
    );
  }

  late final _EC_POINT_make_affinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_make_affine');
  late final _EC_POINT_make_affine = _EC_POINT_make_affinePtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINTs_make_affine(
    ffi.Pointer<EC_GROUP> group,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> points,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_make_affine(
      group,
      num,
      points,
      ctx,
    );
  }

  late final _EC_POINTs_make_affinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<EC_POINT>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINTs_make_affine');
  late final _EC_POINTs_make_affine = _EC_POINTs_make_affinePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>, ffi.Pointer<BN_CTX>)>();

  /// Computes r = generator * n + sum_{i=0}^{num-1} p[i] * m[i]
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result
  /// \param  n      BIGNUM with the multiplier for the group generator (optional)
  /// \param  num    number further summands
  /// \param  p      array of size num of EC_POINT objects
  /// \param  m      array of size num of BIGNUM objects
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINTs_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_mul(
      group,
      r,
      n,
      num,
      p,
      m,
      ctx,
    );
  }

  late final _EC_POINTs_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<EC_POINT>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINTs_mul');
  late final _EC_POINTs_mul = _EC_POINTs_mulPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<BN_CTX>)>();

  /// Computes r = generator * n + q * m
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result
  /// \param  n      BIGNUM with the multiplier for the group generator (optional)
  /// \param  q      EC_POINT object with the first factor of the second summand
  /// \param  m      BIGNUM with the second factor of the second summand
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<EC_POINT> q,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_mul(
      group,
      r,
      n,
      q,
      m,
      ctx,
    );
  }

  late final _EC_POINT_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_mul');
  late final _EC_POINT_mul = _EC_POINT_mulPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  /// Stores multiples of generator for faster point multiplication
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_precompute_mult(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_precompute_mult(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_precompute_multPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_precompute_mult');
  late final _EC_GROUP_precompute_mult = _EC_GROUP_precompute_multPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  /// Reports whether a precomputation has been done
  /// \param  group  EC_GROUP object
  /// \return 1 if a pre-computation has been done and 0 otherwise
  int EC_GROUP_have_precompute_mult(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_have_precompute_mult(
      group,
    );
  }

  late final _EC_GROUP_have_precompute_multPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_have_precompute_mult');
  late final _EC_GROUP_have_precompute_mult = _EC_GROUP_have_precompute_multPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<ASN1_ITEM> ECPKPARAMETERS_it() {
    return _ECPKPARAMETERS_it();
  }

  late final _ECPKPARAMETERS_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ECPKPARAMETERS_it');
  late final _ECPKPARAMETERS_it =
      _ECPKPARAMETERS_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ECPKPARAMETERS> ECPKPARAMETERS_new() {
    return _ECPKPARAMETERS_new();
  }

  late final _ECPKPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPKPARAMETERS> Function()>>(
          'ECPKPARAMETERS_new');
  late final _ECPKPARAMETERS_new = _ECPKPARAMETERS_newPtr.asFunction<
      ffi.Pointer<ECPKPARAMETERS> Function()>();

  void ECPKPARAMETERS_free(
    ffi.Pointer<ECPKPARAMETERS> a,
  ) {
    return _ECPKPARAMETERS_free(
      a,
    );
  }

  late final _ECPKPARAMETERS_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPKPARAMETERS>)>>(
      'ECPKPARAMETERS_free');
  late final _ECPKPARAMETERS_free = _ECPKPARAMETERS_freePtr.asFunction<
      void Function(ffi.Pointer<ECPKPARAMETERS>)>();

  ffi.Pointer<ASN1_ITEM> ECPARAMETERS_it() {
    return _ECPARAMETERS_it();
  }

  late final _ECPARAMETERS_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
          'ECPARAMETERS_it');
  late final _ECPARAMETERS_it =
      _ECPARAMETERS_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ECPARAMETERS> ECPARAMETERS_new() {
    return _ECPARAMETERS_new();
  }

  late final _ECPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPARAMETERS> Function()>>(
          'ECPARAMETERS_new');
  late final _ECPARAMETERS_new =
      _ECPARAMETERS_newPtr.asFunction<ffi.Pointer<ECPARAMETERS> Function()>();

  void ECPARAMETERS_free(
    ffi.Pointer<ECPARAMETERS> a,
  ) {
    return _ECPARAMETERS_free(
      a,
    );
  }

  late final _ECPARAMETERS_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPARAMETERS>)>>(
          'ECPARAMETERS_free');
  late final _ECPARAMETERS_free = _ECPARAMETERS_freePtr.asFunction<
      void Function(ffi.Pointer<ECPARAMETERS>)>();

  /// /
  int EC_GROUP_get_basis_type(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return _EC_GROUP_get_basis_type(
      arg0,
    );
  }

  late final _EC_GROUP_get_basis_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_basis_type');
  late final _EC_GROUP_get_basis_type = _EC_GROUP_get_basis_typePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_trinomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k,
  ) {
    return _EC_GROUP_get_trinomial_basis(
      arg0,
      k,
    );
  }

  late final _EC_GROUP_get_trinomial_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EC_GROUP_get_trinomial_basis');
  late final _EC_GROUP_get_trinomial_basis =
      _EC_GROUP_get_trinomial_basisPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>)>();

  int EC_GROUP_get_pentanomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k1,
    ffi.Pointer<ffi.UnsignedInt> k2,
    ffi.Pointer<ffi.UnsignedInt> k3,
  ) {
    return _EC_GROUP_get_pentanomial_basis(
      arg0,
      k1,
      k2,
      k3,
    );
  }

  late final _EC_GROUP_get_pentanomial_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EC_GROUP_get_pentanomial_basis');
  late final _EC_GROUP_get_pentanomial_basis =
      _EC_GROUP_get_pentanomial_basisPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<EC_GROUP> d2i_ECPKParameters(
    ffi.Pointer<ffi.Pointer<EC_GROUP>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECPKParameters(
      arg0,
      in1,
      len,
    );
  }

  late final _d2i_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<ffi.Pointer<EC_GROUP>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECPKParameters');
  late final _d2i_ECPKParameters = _d2i_ECPKParametersPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ffi.Pointer<EC_GROUP>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ECPKParameters(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECPKParameters(
      arg0,
      out,
    );
  }

  late final _i2d_ECPKParametersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ECPKParameters');
  late final _i2d_ECPKParameters = _i2d_ECPKParametersPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ECPKParameters_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print(
      bp,
      x,
      off,
    );
  }

  late final _ECPKParameters_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>,
              ffi.Int)>>('ECPKParameters_print');
  late final _ECPKParameters_print = _ECPKParameters_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>, int)>();

  int ECPKParameters_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print_fp(
      fp,
      x,
      off,
    );
  }

  late final _ECPKParameters_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>,
              ffi.Int)>>('ECPKParameters_print_fp');
  late final _ECPKParameters_print_fp = _ECPKParameters_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>, int)>();

  /// Creates a new EC_KEY object.
  /// \param  ctx  The library context for to use for this EC_KEY. May be NULL in
  /// which case the default library context is used.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EC_KEY_new_ex(
      ctx,
      propq,
    );
  }

  late final _EC_KEY_new_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>)>>('EC_KEY_new_ex');
  late final _EC_KEY_new_ex = _EC_KEY_new_exPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>)>();

  /// Creates a new EC_KEY object. Same as calling EC_KEY_new_ex with a
  /// NULL library context
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new() {
    return _EC_KEY_new();
  }

  late final _EC_KEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function()>>('EC_KEY_new');
  late final _EC_KEY_new =
      _EC_KEY_newPtr.asFunction<ffi.Pointer<EC_KEY> Function()>();

  int EC_KEY_get_flags(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_flags(
      key,
    );
  }

  late final _EC_KEY_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_get_flags');
  late final _EC_KEY_get_flags =
      _EC_KEY_get_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_flags(
    ffi.Pointer<EC_KEY> key,
    int flags,
  ) {
    return _EC_KEY_set_flags(
      key,
      flags,
    );
  }

  late final _EC_KEY_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_set_flags');
  late final _EC_KEY_set_flags = _EC_KEY_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  void EC_KEY_clear_flags(
    ffi.Pointer<EC_KEY> key,
    int flags,
  ) {
    return _EC_KEY_clear_flags(
      key,
      flags,
    );
  }

  late final _EC_KEY_clear_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_clear_flags');
  late final _EC_KEY_clear_flags = _EC_KEY_clear_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_decoded_from_explicit_params(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_decoded_from_explicit_params(
      key,
    );
  }

  late final _EC_KEY_decoded_from_explicit_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_decoded_from_explicit_params');
  late final _EC_KEY_decoded_from_explicit_params =
      _EC_KEY_decoded_from_explicit_paramsPtr.asFunction<
          int Function(ffi.Pointer<EC_KEY>)>();

  /// Creates a new EC_KEY object using a named curve as underlying
  /// EC_GROUP object.
  /// \param  ctx   The library context for to use for this EC_KEY. May be NULL in
  /// which case the default library context is used.
  /// \param  propq Any property query string
  /// \param  nid   NID of the named curve.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_by_curve_name_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> propq,
    int nid,
  ) {
    return _EC_KEY_new_by_curve_name_ex(
      ctx,
      propq,
      nid,
    );
  }

  late final _EC_KEY_new_by_curve_name_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EC_KEY_new_by_curve_name_ex');
  late final _EC_KEY_new_by_curve_name_ex =
      _EC_KEY_new_by_curve_name_exPtr.asFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<OSSL_LIB_CTX>, ffi.Pointer<ffi.Char>, int)>();

  /// Creates a new EC_KEY object using a named curve as underlying
  /// EC_GROUP object. Same as calling EC_KEY_new_by_curve_name_ex with a NULL
  /// library context and property query string.
  /// \param  nid  NID of the named curve.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_by_curve_name(
    int nid,
  ) {
    return _EC_KEY_new_by_curve_name(
      nid,
    );
  }

  late final _EC_KEY_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Int)>>(
          'EC_KEY_new_by_curve_name');
  late final _EC_KEY_new_by_curve_name = _EC_KEY_new_by_curve_namePtr
      .asFunction<ffi.Pointer<EC_KEY> Function(int)>();

  /// Frees a EC_KEY object.
  /// \param  key  EC_KEY object to be freed.
  void EC_KEY_free(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_free(
      key,
    );
  }

  late final _EC_KEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_free');
  late final _EC_KEY_free =
      _EC_KEY_freePtr.asFunction<void Function(ffi.Pointer<EC_KEY>)>();

  /// Copies a EC_KEY object.
  /// \param  dst  destination EC_KEY object
  /// \param  src  src EC_KEY object
  /// \return dst or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_copy(
    ffi.Pointer<EC_KEY> dst,
    ffi.Pointer<EC_KEY> src,
  ) {
    return _EC_KEY_copy(
      dst,
      src,
    );
  }

  late final _EC_KEY_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>('EC_KEY_copy');
  late final _EC_KEY_copy = _EC_KEY_copyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>();

  /// Creates a new EC_KEY object and copies the content from src to it.
  /// \param  src  the source EC_KEY object
  /// \return newly created EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_dup(
    ffi.Pointer<EC_KEY> src,
  ) {
    return _EC_KEY_dup(
      src,
    );
  }

  late final _EC_KEY_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)>>('EC_KEY_dup');
  late final _EC_KEY_dup = _EC_KEY_dupPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)>();

  /// Increases the internal reference count of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_up_ref(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_up_ref(
      key,
    );
  }

  late final _EC_KEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_up_ref');
  late final _EC_KEY_up_ref =
      _EC_KEY_up_refPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Returns the ENGINE object of a EC_KEY object
  /// \param  eckey  EC_KEY object
  /// \return the ENGINE object (possibly NULL).
  ffi.Pointer<ENGINE> EC_KEY_get0_engine(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _EC_KEY_get0_engine(
      eckey,
    );
  }

  late final _EC_KEY_get0_enginePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get0_engine');
  late final _EC_KEY_get0_engine = _EC_KEY_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<EC_KEY>)>();

  /// Returns the EC_GROUP object of a EC_KEY object
  /// \param  key  EC_KEY object
  /// \return the EC_GROUP object (possibly NULL).
  ffi.Pointer<EC_GROUP> EC_KEY_get0_group(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_group(
      key,
    );
  }

  late final _EC_KEY_get0_groupPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get0_group');
  late final _EC_KEY_get0_group = _EC_KEY_get0_groupPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_KEY>)>();

  /// Sets the EC_GROUP of a EC_KEY object.
  /// \param  key    EC_KEY object
  /// \param  group  EC_GROUP to use in the EC_KEY object (note: the EC_KEY
  /// object will use an own copy of the EC_GROUP).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_group(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_KEY_set_group(
      key,
      group,
    );
  }

  late final _EC_KEY_set_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>('EC_KEY_set_group');
  late final _EC_KEY_set_group = _EC_KEY_set_groupPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>();

  /// Returns the private key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \return a BIGNUM with the private key (possibly NULL).
  ffi.Pointer<BIGNUM> EC_KEY_get0_private_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_private_key(
      key,
    );
  }

  late final _EC_KEY_get0_private_keyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get0_private_key');
  late final _EC_KEY_get0_private_key = _EC_KEY_get0_private_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_KEY>)>();

  /// Sets the private key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \param  prv  BIGNUM with the private key (note: the EC_KEY object
  /// will use an own copy of the BIGNUM).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_private_key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BIGNUM> prv,
  ) {
    return _EC_KEY_set_private_key(
      key,
      prv,
    );
  }

  late final _EC_KEY_set_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<BIGNUM>)>>('EC_KEY_set_private_key');
  late final _EC_KEY_set_private_key = _EC_KEY_set_private_keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>();

  /// Returns the public key of a EC_KEY object.
  /// \param  key  the EC_KEY object
  /// \return a EC_POINT object with the public key (possibly NULL)
  ffi.Pointer<EC_POINT> EC_KEY_get0_public_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_public_key(
      key,
    );
  }

  late final _EC_KEY_get0_public_keyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get0_public_key');
  late final _EC_KEY_get0_public_key = _EC_KEY_get0_public_keyPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_KEY>)>();

  /// Sets the public key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \param  pub  EC_POINT object with the public key (note: the EC_KEY object
  /// will use an own copy of the EC_POINT object).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_public_key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_POINT> pub,
  ) {
    return _EC_KEY_set_public_key(
      key,
      pub,
    );
  }

  late final _EC_KEY_set_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<EC_POINT>)>>('EC_KEY_set_public_key');
  late final _EC_KEY_set_public_key = _EC_KEY_set_public_keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>();

  int EC_KEY_get_enc_flags(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_enc_flags(
      key,
    );
  }

  late final _EC_KEY_get_enc_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get_enc_flags');
  late final _EC_KEY_get_enc_flags =
      _EC_KEY_get_enc_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_enc_flags(
    ffi.Pointer<EC_KEY> eckey,
    int flags,
  ) {
    return _EC_KEY_set_enc_flags(
      eckey,
      flags,
    );
  }

  late final _EC_KEY_set_enc_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY>, ffi.UnsignedInt)>>('EC_KEY_set_enc_flags');
  late final _EC_KEY_set_enc_flags = _EC_KEY_set_enc_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  point_conversion_form_t EC_KEY_get_conv_form(
    ffi.Pointer<EC_KEY> key,
  ) {
    return point_conversion_form_t.fromValue(_EC_KEY_get_conv_form(
      key,
    ));
  }

  late final _EC_KEY_get_conv_formPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get_conv_form');
  late final _EC_KEY_get_conv_form =
      _EC_KEY_get_conv_formPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_conv_form(
    ffi.Pointer<EC_KEY> eckey,
    point_conversion_form_t cform,
  ) {
    return _EC_KEY_set_conv_form(
      eckey,
      cform.value,
    );
  }

  late final _EC_KEY_set_conv_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY>, ffi.UnsignedInt)>>('EC_KEY_set_conv_form');
  late final _EC_KEY_set_conv_form = _EC_KEY_set_conv_formPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_set_ex_data(
    ffi.Pointer<EC_KEY> key,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EC_KEY_set_ex_data(
      key,
      idx,
      arg,
    );
  }

  late final _EC_KEY_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EC_KEY_set_ex_data');
  late final _EC_KEY_set_ex_data = _EC_KEY_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EC_KEY_get_ex_data(
    ffi.Pointer<EC_KEY> key,
    int idx,
  ) {
    return _EC_KEY_get_ex_data(
      key,
      idx,
    );
  }

  late final _EC_KEY_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EC_KEY>, ffi.Int)>>('EC_KEY_get_ex_data');
  late final _EC_KEY_get_ex_data = _EC_KEY_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EC_KEY>, int)>();

  void EC_KEY_set_asn1_flag(
    ffi.Pointer<EC_KEY> eckey,
    int asn1_flag,
  ) {
    return _EC_KEY_set_asn1_flag(
      eckey,
      asn1_flag,
    );
  }

  late final _EC_KEY_set_asn1_flagPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_set_asn1_flag');
  late final _EC_KEY_set_asn1_flag = _EC_KEY_set_asn1_flagPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  /// Creates a table of pre-computed multiples of the generator to
  /// accelerate further EC_KEY operations.
  /// \param  key  EC_KEY object
  /// \param  ctx  BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_precompute_mult(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_precompute_mult(
      key,
      ctx,
    );
  }

  late final _EC_KEY_precompute_multPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<BN_CTX>)>>('EC_KEY_precompute_mult');
  late final _EC_KEY_precompute_mult = _EC_KEY_precompute_multPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BN_CTX>)>();

  /// Creates a new ec private (and optional a new public) key.
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_generate_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_generate_key(
      key,
    );
  }

  late final _EC_KEY_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_generate_key');
  late final _EC_KEY_generate_key =
      _EC_KEY_generate_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Verifies that a private and/or public key is valid.
  /// \param  key  the EC_KEY object
  /// \return 1 on success and 0 otherwise.
  int EC_KEY_check_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_check_key(
      key,
    );
  }

  late final _EC_KEY_check_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_check_key');
  late final _EC_KEY_check_key =
      _EC_KEY_check_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Indicates if an EC_KEY can be used for signing.
  /// \param  eckey  the EC_KEY object
  /// \return 1 if can sign and 0 otherwise.
  int EC_KEY_can_sign(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _EC_KEY_can_sign(
      eckey,
    );
  }

  late final _EC_KEY_can_signPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_can_sign');
  late final _EC_KEY_can_sign =
      _EC_KEY_can_signPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Sets a public key from affine coordinates performing
  /// necessary NIST PKV tests.
  /// \param  key  the EC_KEY object
  /// \param  x    public key x coordinate
  /// \param  y    public key y coordinate
  /// \return 1 on success and 0 otherwise.
  int EC_KEY_set_public_key_affine_coordinates(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
  ) {
    return _EC_KEY_set_public_key_affine_coordinates(
      key,
      x,
      y,
    );
  }

  late final _EC_KEY_set_public_key_affine_coordinatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>)>>(
      'EC_KEY_set_public_key_affine_coordinates');
  late final _EC_KEY_set_public_key_affine_coordinates =
      _EC_KEY_set_public_key_affine_coordinatesPtr.asFunction<
          int Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  /// Encodes an EC_KEY public key to an allocated octet string
  /// \param  key    key to encode
  /// \param  form   point conversion form
  /// \param  pbuf   returns pointer to allocated buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_key2buf(
    ffi.Pointer<EC_KEY> key,
    point_conversion_form_t form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_key2buf(
      key,
      form.value,
      pbuf,
      ctx,
    );
  }

  late final _EC_KEY_key2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<EC_KEY>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<BN_CTX>)>>('EC_KEY_key2buf');
  late final _EC_KEY_key2buf = _EC_KEY_key2bufPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<BN_CTX>)>();

  /// Decodes a EC_KEY public key from a octet string
  /// \param  key    key to decode
  /// \param  buf    memory buffer with the encoded ec point
  /// \param  len    length of the encoded ec point
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_oct2key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_oct2key(
      key,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_KEY_oct2keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<BN_CTX>)>>('EC_KEY_oct2key');
  late final _EC_KEY_oct2key = _EC_KEY_oct2keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<BN_CTX>)>();

  /// Decodes an EC_KEY private key from an octet string
  /// \param  key    key to decode
  /// \param  buf    memory buffer with the encoded private key
  /// \param  len    length of the encoded key
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_oct2priv(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_oct2priv(
      key,
      buf,
      len,
    );
  }

  late final _EC_KEY_oct2privPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EC_KEY_oct2priv');
  late final _EC_KEY_oct2priv = _EC_KEY_oct2privPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Encodes a EC_KEY private key to an octet string
  /// \param  key    key to encode
  /// \param  buf    memory buffer for the result. If NULL the function returns
  /// required buffer size.
  /// \param  len    length of the memory buffer
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_priv2oct(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_priv2oct(
      key,
      buf,
      len,
    );
  }

  late final _EC_KEY_priv2octPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EC_KEY_priv2oct');
  late final _EC_KEY_priv2oct = _EC_KEY_priv2octPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  /// Encodes an EC_KEY private key to an allocated octet string
  /// \param  eckey  key to encode
  /// \param  pbuf   returns pointer to allocated buffer
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_priv2buf(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
  ) {
    return _EC_KEY_priv2buf(
      eckey,
      pbuf,
    );
  }

  late final _EC_KEY_priv2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('EC_KEY_priv2buf');
  late final _EC_KEY_priv2buf = _EC_KEY_priv2bufPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  /// Decodes a private key from a memory buffer.
  /// \param  key  a pointer to a EC_KEY object which should be used (or NULL)
  /// \param  in   pointer to memory with the DER encoded private key
  /// \param  len  length of the DER encoded private key
  /// \return the decoded private key or NULL if an error occurred.
  ffi.Pointer<EC_KEY> d2i_ECPrivateKey(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECPrivateKey(
      key,
      in1,
      len,
    );
  }

  late final _d2i_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECPrivateKey');
  late final _d2i_ECPrivateKey = _d2i_ECPrivateKeyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  /// Encodes a private key object and stores the result in a buffer.
  /// \param  key  the EC_KEY object to encode
  /// \param  out  the buffer for the result (if NULL the function returns number
  /// of bytes needed).
  /// \return 1 on success and 0 if an error occurred.
  int i2d_ECPrivateKey(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECPrivateKey(
      key,
      out,
    );
  }

  late final _i2d_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECPrivateKey');
  late final _i2d_ECPrivateKey = _i2d_ECPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  /// Decodes ec parameter from a memory buffer.
  /// \param  key  a pointer to a EC_KEY object which should be used (or NULL)
  /// \param  in   pointer to memory with the DER encoded ec parameters
  /// \param  len  length of the DER encoded ec parameters
  /// \return a EC_KEY object with the decoded parameters or NULL if an error
  /// occurred.
  ffi.Pointer<EC_KEY> d2i_ECParameters(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECParameters(
      key,
      in1,
      len,
    );
  }

  late final _d2i_ECParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECParameters');
  late final _d2i_ECParameters = _d2i_ECParametersPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  /// Encodes ec parameter and stores the result in a buffer.
  /// \param  key  the EC_KEY object with ec parameters to encode
  /// \param  out  the buffer for the result (if NULL the function returns number
  /// of bytes needed).
  /// \return 1 on success and 0 if an error occurred.
  int i2d_ECParameters(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECParameters(
      key,
      out,
    );
  }

  late final _i2d_ECParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECParameters');
  late final _i2d_ECParameters = _i2d_ECParametersPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  /// Decodes an ec public key from a octet string.
  /// \param  key  a pointer to a EC_KEY object which should be used
  /// \param  in   memory buffer with the encoded public key
  /// \param  len  length of the encoded public key
  /// \return EC_KEY object with decoded public key or NULL if an error
  /// occurred.
  ffi.Pointer<EC_KEY> o2i_ECPublicKey(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _o2i_ECPublicKey(
      key,
      in1,
      len,
    );
  }

  late final _o2i_ECPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('o2i_ECPublicKey');
  late final _o2i_ECPublicKey = _o2i_ECPublicKeyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  /// Encodes an ec public key in an octet string.
  /// \param  key  the EC_KEY object with the public key
  /// \param  out  the buffer for the result (if NULL the function returns number
  /// of bytes needed).
  /// \return 1 on success and 0 if an error occurred
  int i2o_ECPublicKey(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2o_ECPublicKey(
      key,
      out,
    );
  }

  late final _i2o_ECPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2o_ECPublicKey');
  late final _i2o_ECPublicKey = _i2o_ECPublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  /// Prints out the ec parameters on human readable form.
  /// \param  bp   BIO object to which the information is printed
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred
  int ECParameters_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECParameters_print(
      bp,
      key,
    );
  }

  late final _ECParameters_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>>('ECParameters_print');
  late final _ECParameters_print = _ECParameters_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>();

  /// Prints out the contents of a EC_KEY object
  /// \param  bp   BIO object to which the information is printed
  /// \param  key  EC_KEY object
  /// \param  off  line offset
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> key,
    int off,
  ) {
    return _EC_KEY_print(
      bp,
      key,
      off,
    );
  }

  late final _EC_KEY_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, ffi.Int)>>('EC_KEY_print');
  late final _EC_KEY_print = _EC_KEY_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, int)>();

  /// Prints out the ec parameters on human readable form.
  /// \param  fp   file descriptor to which the information is printed
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred
  int ECParameters_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECParameters_print_fp(
      fp,
      key,
    );
  }

  late final _ECParameters_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<EC_KEY>)>>('ECParameters_print_fp');
  late final _ECParameters_print_fp = _ECParameters_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>();

  /// Prints out the contents of a EC_KEY object
  /// \param  fp   file descriptor to which the information is printed
  /// \param  key  EC_KEY object
  /// \param  off  line offset
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> key,
    int off,
  ) {
    return _EC_KEY_print_fp(
      fp,
      key,
      off,
    );
  }

  late final _EC_KEY_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>,
              ffi.Int)>>('EC_KEY_print_fp');
  late final _EC_KEY_print_fp = _EC_KEY_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>, int)>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_OpenSSL() {
    return _EC_KEY_OpenSSL();
  }

  late final _EC_KEY_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
          'EC_KEY_OpenSSL');
  late final _EC_KEY_OpenSSL =
      _EC_KEY_OpenSSLPtr.asFunction<ffi.Pointer<EC_KEY_METHOD> Function()>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_default_method() {
    return _EC_KEY_get_default_method();
  }

  late final _EC_KEY_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
          'EC_KEY_get_default_method');
  late final _EC_KEY_get_default_method = _EC_KEY_get_default_methodPtr
      .asFunction<ffi.Pointer<EC_KEY_METHOD> Function()>();

  void EC_KEY_set_default_method(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_set_default_method(
      meth,
    );
  }

  late final _EC_KEY_set_default_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>>(
      'EC_KEY_set_default_method');
  late final _EC_KEY_set_default_method = _EC_KEY_set_default_methodPtr
      .asFunction<void Function(ffi.Pointer<EC_KEY_METHOD>)>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_method(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_method(
      key,
    );
  }

  late final _EC_KEY_get_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get_method');
  late final _EC_KEY_get_method = _EC_KEY_get_methodPtr.asFunction<
      ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_method(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_set_method(
      key,
      meth,
    );
  }

  late final _EC_KEY_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<EC_KEY_METHOD>)>>('EC_KEY_set_method');
  late final _EC_KEY_set_method = _EC_KEY_set_methodPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY_METHOD>)>();

  ffi.Pointer<EC_KEY> EC_KEY_new_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _EC_KEY_new_method(
      engine,
    );
  }

  late final _EC_KEY_new_methodPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Pointer<ENGINE>)>>(
      'EC_KEY_new_method');
  late final _EC_KEY_new_method = _EC_KEY_new_methodPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ENGINE>)>();

  /// The old name for ecdh_KDF_X9_63
  /// The ECDH KDF specification has been mistakenly attributed to ANSI X9.62,
  /// it is actually specified in ANSI X9.63.
  /// This identifier is retained for backwards compatibility
  int ECDH_KDF_X9_62(
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
    ffi.Pointer<ffi.UnsignedChar> Z,
    int Zlen,
    ffi.Pointer<ffi.UnsignedChar> sinfo,
    int sinfolen,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _ECDH_KDF_X9_62(
      out,
      outlen,
      Z,
      Zlen,
      sinfo,
      sinfolen,
      md,
    );
  }

  late final _ECDH_KDF_X9_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<EVP_MD>)>>('ECDH_KDF_X9_62');
  late final _ECDH_KDF_X9_62 = _ECDH_KDF_X9_62Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EVP_MD>)>();

  int ECDH_compute_key(
    ffi.Pointer<ffi.Void> out,
    int outlen,
    ffi.Pointer<EC_POINT> pub_key,
    ffi.Pointer<EC_KEY> ecdh,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<ffi.Void> in1,
                    ffi.Size inlen,
                    ffi.Pointer<ffi.Void> out,
                    ffi.Pointer<ffi.Size> outlen)>>
        KDF,
  ) {
    return _ECDH_compute_key(
      out,
      outlen,
      pub_key,
      ecdh,
      KDF,
    );
  }

  late final _ECDH_compute_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  ffi.Pointer<EC_POINT>,
                  ffi.Pointer<EC_KEY>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<ffi.Void> in1,
                              ffi.Size inlen,
                              ffi.Pointer<ffi.Void> out,
                              ffi.Pointer<ffi.Size> outlen)>>)>>(
      'ECDH_compute_key');
  late final _ECDH_compute_key = _ECDH_compute_keyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void> in1,
                      ffi.Size inlen,
                      ffi.Pointer<ffi.Void> out,
                      ffi.Pointer<ffi.Size> outlen)>>)>();

  /// Allocates and initialize a ECDSA_SIG structure
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_new() {
    return _ECDSA_SIG_new();
  }

  late final _ECDSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECDSA_SIG> Function()>>(
          'ECDSA_SIG_new');
  late final _ECDSA_SIG_new =
      _ECDSA_SIG_newPtr.asFunction<ffi.Pointer<ECDSA_SIG> Function()>();

  /// frees a ECDSA_SIG structure
  /// \param  sig  pointer to the ECDSA_SIG structure
  void ECDSA_SIG_free(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_free(
      sig,
    );
  }

  late final _ECDSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECDSA_SIG>)>>(
          'ECDSA_SIG_free');
  late final _ECDSA_SIG_free =
      _ECDSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<ECDSA_SIG>)>();

  ffi.Pointer<ECDSA_SIG> d2i_ECDSA_SIG(
    ffi.Pointer<ffi.Pointer<ECDSA_SIG>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECDSA_SIG(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ECDSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
              ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECDSA_SIG');
  late final _d2i_ECDSA_SIG = _d2i_ECDSA_SIGPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ECDSA_SIG(
    ffi.Pointer<ECDSA_SIG> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECDSA_SIG(
      a,
      out,
    );
  }

  late final _i2d_ECDSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ECDSA_SIG>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECDSA_SIG');
  late final _i2d_ECDSA_SIG = _i2d_ECDSA_SIGPtr.asFunction<
      int Function(ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  /// Accessor for r and s fields of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  /// \param  pr   pointer to BIGNUM pointer for r (may be NULL)
  /// \param  ps   pointer to BIGNUM pointer for s (may be NULL)
  void ECDSA_SIG_get0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pr,
    ffi.Pointer<ffi.Pointer<BIGNUM>> ps,
  ) {
    return _ECDSA_SIG_get0(
      sig,
      pr,
      ps,
    );
  }

  late final _ECDSA_SIG_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ECDSA_SIG>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('ECDSA_SIG_get0');
  late final _ECDSA_SIG_get0 = _ECDSA_SIG_get0Ptr.asFunction<
      void Function(ffi.Pointer<ECDSA_SIG>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  /// Accessor for r field of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_r(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_get0_r(
      sig,
    );
  }

  late final _ECDSA_SIG_get0_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<ECDSA_SIG>)>>('ECDSA_SIG_get0_r');
  late final _ECDSA_SIG_get0_r = _ECDSA_SIG_get0_rPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>();

  /// Accessor for s field of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_s(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_get0_s(
      sig,
    );
  }

  late final _ECDSA_SIG_get0_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<ECDSA_SIG>)>>('ECDSA_SIG_get0_s');
  late final _ECDSA_SIG_get0_s = _ECDSA_SIG_get0_sPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>();

  /// Setter for r and s fields of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  /// \param  r    pointer to BIGNUM for r
  /// \param  s    pointer to BIGNUM for s
  int ECDSA_SIG_set0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _ECDSA_SIG_set0(
      sig,
      r,
      s,
    );
  }

  late final _ECDSA_SIG_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ECDSA_SIG>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('ECDSA_SIG_set0');
  late final _ECDSA_SIG_set0 = _ECDSA_SIG_set0Ptr.asFunction<
      int Function(
          ffi.Pointer<ECDSA_SIG>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  /// Computes the ECDSA signature of the given hash value using
  /// the supplied private key and returns the created signature.
  /// \param  dgst      pointer to the hash value
  /// \param  dgst_len  length of the hash value
  /// \param  eckey     EC_KEY object containing a private EC key
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign(
      dgst,
      dgst_len,
      eckey,
    );
  }

  late final _ECDSA_do_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<EC_KEY>)>>('ECDSA_do_sign');
  late final _ECDSA_do_sign = _ECDSA_do_signPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EC_KEY>)>();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  kinv     BIGNUM with a pre-computed inverse k (optional)
  /// \param  rp       BIGNUM with a pre-computed rp value (optional),
  /// see ECDSA_sign_setup
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign_ex(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign_ex(
      dgst,
      dgstlen,
      kinv,
      rp,
      eckey,
    );
  }

  late final _ECDSA_do_sign_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_do_sign_ex');
  late final _ECDSA_do_sign_ex = _ECDSA_do_sign_exPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<EC_KEY>)>();

  /// Verifies that the supplied signature is a valid ECDSA
  /// signature of the supplied hash value using the supplied public key.
  /// \param  dgst      pointer to the hash value
  /// \param  dgst_len  length of the hash value
  /// \param  sig       ECDSA_SIG structure
  /// \param  eckey     EC_KEY object containing a public EC key
  /// \return 1 if the signature is valid, 0 if the signature is invalid
  /// and -1 on error
  int ECDSA_do_verify(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_verify(
      dgst,
      dgst_len,
      sig,
      eckey,
    );
  }

  late final _ECDSA_do_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ECDSA_SIG>, ffi.Pointer<EC_KEY>)>>('ECDSA_do_verify');
  late final _ECDSA_do_verify = _ECDSA_do_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<EC_KEY>)>();

  /// Precompute parts of the signing operation
  /// \param  eckey  EC_KEY object containing a private EC key
  /// \param  ctx    BN_CTX object (optional)
  /// \param  kinv   BIGNUM pointer for the inverse of k
  /// \param  rp     BIGNUM pointer for x coordinate of k * generator
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign_setup(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Pointer<BIGNUM>> kinv,
    ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
  ) {
    return _ECDSA_sign_setup(
      eckey,
      ctx,
      kinv,
      rp,
    );
  }

  late final _ECDSA_sign_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('ECDSA_sign_setup');
  late final _ECDSA_sign_setup = _ECDSA_sign_setupPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  sig      memory for the DER encoded created signature
  /// \param  siglen   pointer to the length of the returned signature
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      eckey,
    );
  }

  late final _ECDSA_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_sign');
  late final _ECDSA_sign = _ECDSA_signPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EC_KEY>)>();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  sig      buffer to hold the DER encoded signature
  /// \param  siglen   pointer to the length of the returned signature
  /// \param  kinv     BIGNUM with a pre-computed inverse k (optional)
  /// \param  rp       BIGNUM with a pre-computed rp value (optional),
  /// see ECDSA_sign_setup
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign_ex(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign_ex(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      kinv,
      rp,
      eckey,
    );
  }

  late final _ECDSA_sign_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_sign_ex');
  late final _ECDSA_sign_ex = _ECDSA_sign_exPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_KEY>)>();

  /// Verifies that the given signature is valid ECDSA signature
  /// of the supplied hash value using the specified public key.
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value
  /// \param  dgstlen  length of the hash value
  /// \param  sig      pointer to the DER encoded signature
  /// \param  siglen   length of the DER encoded signature
  /// \param  eckey    EC_KEY object containing a public EC key
  /// \return 1 if the signature is valid, 0 if the signature is invalid
  /// and -1 on error
  int ECDSA_verify(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_verify(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      eckey,
    );
  }

  late final _ECDSA_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EC_KEY>)>>('ECDSA_verify');
  late final _ECDSA_verify = _ECDSA_verifyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EC_KEY>)>();

  /// Returns the maximum length of the DER encoded signature
  /// \param  eckey  EC_KEY object
  /// \return numbers of bytes required for the DER encoded signature
  int ECDSA_size(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_size(
      eckey,
    );
  }

  late final _ECDSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'ECDSA_size');
  late final _ECDSA_size =
      _ECDSA_sizePtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// /
  ffi.Pointer<EC_KEY_METHOD> EC_KEY_METHOD_new(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_METHOD_new(
      meth,
    );
  }

  late final _EC_KEY_METHOD_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(
              ffi.Pointer<EC_KEY_METHOD>)>>('EC_KEY_METHOD_new');
  late final _EC_KEY_METHOD_new = _EC_KEY_METHOD_newPtr.asFunction<
      ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY_METHOD>)>();

  void EC_KEY_METHOD_free(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_METHOD_free(
      meth,
    );
  }

  late final _EC_KEY_METHOD_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>>(
      'EC_KEY_METHOD_free');
  late final _EC_KEY_METHOD_free = _EC_KEY_METHOD_freePtr.asFunction<
      void Function(ffi.Pointer<EC_KEY_METHOD>)>();

  void EC_KEY_METHOD_set_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
        init,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>
        finish,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)>>
        copy,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)>>
        set_group,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY> key, ffi.Pointer<BIGNUM> priv_key)>>
        set_private,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_POINT> pub_key)>>
        set_public,
  ) {
    return _EC_KEY_METHOD_set_init(
      meth,
      init,
      finish,
      copy,
      set_group,
      set_private,
      set_public,
    );
  }

  late final _EC_KEY_METHOD_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>,
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY> key,
                          ffi.Pointer<BIGNUM> priv_key)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY> key,
                          ffi.Pointer<EC_POINT>
                              pub_key)>>)>>('EC_KEY_METHOD_set_init');
  late final _EC_KEY_METHOD_set_init = _EC_KEY_METHOD_set_initPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY> key, ffi.Pointer<BIGNUM> priv_key)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EC_KEY> key,
                      ffi.Pointer<EC_POINT> pub_key)>>)>();

  void EC_KEY_METHOD_set_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
        keygen,
  ) {
    return _EC_KEY_METHOD_set_keygen(
      meth,
      keygen,
    );
  }

  late final _EC_KEY_METHOD_set_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key)>>)>>(
      'EC_KEY_METHOD_set_keygen');
  late final _EC_KEY_METHOD_set_keygen =
      _EC_KEY_METHOD_set_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY> key)>>)>();

  void EC_KEY_METHOD_set_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                    ffi.Pointer<ffi.Size> pseclen,
                    ffi.Pointer<EC_POINT> pub_key,
                    ffi.Pointer<EC_KEY> ecdh)>>
        ckey,
  ) {
    return _EC_KEY_METHOD_set_compute_key(
      meth,
      ckey,
    );
  }

  late final _EC_KEY_METHOD_set_compute_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                              ffi.Pointer<ffi.Size> pseclen,
                              ffi.Pointer<EC_POINT> pub_key,
                              ffi.Pointer<EC_KEY> ecdh)>>)>>(
      'EC_KEY_METHOD_set_compute_key');
  late final _EC_KEY_METHOD_set_compute_key =
      _EC_KEY_METHOD_set_compute_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                          ffi.Pointer<ffi.Size> pseclen,
                          ffi.Pointer<EC_POINT> pub_key,
                          ffi.Pointer<EC_KEY> ecdh)>>)>();

  void EC_KEY_METHOD_set_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int type,
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dlen,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.UnsignedInt> siglen,
                    ffi.Pointer<BIGNUM> kinv,
                    ffi.Pointer<BIGNUM> r,
                    ffi.Pointer<EC_KEY> eckey)>>
        sign,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY> eckey,
                    ffi.Pointer<BN_CTX> ctx_in,
                    ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                    ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>
        sign_setup,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ECDSA_SIG> Function(
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<BIGNUM> in_kinv,
                    ffi.Pointer<BIGNUM> in_r,
                    ffi.Pointer<EC_KEY> eckey)>>
        sign_sig,
  ) {
    return _EC_KEY_METHOD_set_sign(
      meth,
      sign,
      sign_setup,
      sign_sig,
    );
  }

  late final _EC_KEY_METHOD_set_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Int type,
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dlen,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.UnsignedInt> siglen,
                              ffi.Pointer<BIGNUM> kinv,
                              ffi.Pointer<BIGNUM> r,
                              ffi.Pointer<EC_KEY> eckey)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EC_KEY> eckey,
                              ffi.Pointer<BN_CTX> ctx_in,
                              ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                              ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ECDSA_SIG> Function(
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dgst_len,
                              ffi.Pointer<BIGNUM> in_kinv,
                              ffi.Pointer<BIGNUM> in_r,
                              ffi.Pointer<EC_KEY> eckey)>>)>>(
      'EC_KEY_METHOD_set_sign');
  late final _EC_KEY_METHOD_set_sign = _EC_KEY_METHOD_set_signPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int type,
                      ffi.Pointer<ffi.UnsignedChar> dgst,
                      ffi.Int dlen,
                      ffi.Pointer<ffi.UnsignedChar> sig,
                      ffi.Pointer<ffi.UnsignedInt> siglen,
                      ffi.Pointer<BIGNUM> kinv,
                      ffi.Pointer<BIGNUM> r,
                      ffi.Pointer<EC_KEY> eckey)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY> eckey,
                      ffi.Pointer<BN_CTX> ctx_in,
                      ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                      ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ECDSA_SIG> Function(
                      ffi.Pointer<ffi.UnsignedChar> dgst,
                      ffi.Int dgst_len,
                      ffi.Pointer<BIGNUM> in_kinv,
                      ffi.Pointer<BIGNUM> in_r,
                      ffi.Pointer<EC_KEY> eckey)>>)>();

  void EC_KEY_METHOD_set_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int type,
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<ffi.UnsignedChar> sigbuf,
                    ffi.Int sig_len,
                    ffi.Pointer<EC_KEY> eckey)>>
        verify,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<ECDSA_SIG> sig,
                    ffi.Pointer<EC_KEY> eckey)>>
        verify_sig,
  ) {
    return _EC_KEY_METHOD_set_verify(
      meth,
      verify,
      verify_sig,
    );
  }

  late final _EC_KEY_METHOD_set_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Int type,
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dgst_len,
                              ffi.Pointer<ffi.UnsignedChar> sigbuf,
                              ffi.Int sig_len,
                              ffi.Pointer<EC_KEY> eckey)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dgst_len,
                              ffi.Pointer<ECDSA_SIG> sig,
                              ffi.Pointer<EC_KEY> eckey)>>)>>(
      'EC_KEY_METHOD_set_verify');
  late final _EC_KEY_METHOD_set_verify =
      _EC_KEY_METHOD_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int type,
                          ffi.Pointer<ffi.UnsignedChar> dgst,
                          ffi.Int dgst_len,
                          ffi.Pointer<ffi.UnsignedChar> sigbuf,
                          ffi.Int sig_len,
                          ffi.Pointer<EC_KEY> eckey)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.UnsignedChar> dgst,
                          ffi.Int dgst_len,
                          ffi.Pointer<ECDSA_SIG> sig,
                          ffi.Pointer<EC_KEY> eckey)>>)>();

  void EC_KEY_METHOD_get_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>
        pinit,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>>
        pfinish,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)>>>
        pcopy,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)>>>
        pset_group,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EC_KEY> key,
                        ffi.Pointer<BIGNUM> priv_key)>>>
        pset_private,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EC_KEY> key,
                        ffi.Pointer<EC_POINT> pub_key)>>>
        pset_public,
  ) {
    return _EC_KEY_METHOD_get_init(
      meth,
      pinit,
      pfinish,
      pcopy,
      pset_group,
      pset_private,
      pset_public,
    );
  }

  late final _EC_KEY_METHOD_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EC_KEY> key)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> dest,
                              ffi.Pointer<EC_KEY> src)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key,
                              ffi.Pointer<EC_GROUP> grp)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key,
                              ffi.Pointer<BIGNUM> priv_key)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key,
                              ffi.Pointer<EC_POINT> pub_key)>>>)>>('EC_KEY_METHOD_get_init');
  late final _EC_KEY_METHOD_get_init = _EC_KEY_METHOD_get_initPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY> key,
                          ffi.Pointer<EC_GROUP> grp)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY> key,
                          ffi.Pointer<BIGNUM> priv_key)>>>,
          ffi.Pointer<
              ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_POINT> pub_key)>>>)>();

  void EC_KEY_METHOD_get_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>
        pkeygen,
  ) {
    return _EC_KEY_METHOD_get_keygen(
      meth,
      pkeygen,
    );
  }

  late final _EC_KEY_METHOD_get_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>)>>(
      'EC_KEY_METHOD_get_keygen');
  late final _EC_KEY_METHOD_get_keygen =
      _EC_KEY_METHOD_get_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY> key)>>>)>();

  void EC_KEY_METHOD_get_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                        ffi.Pointer<ffi.Size> pseclen,
                        ffi.Pointer<EC_POINT> pub_key,
                        ffi.Pointer<EC_KEY> ecdh)>>>
        pck,
  ) {
    return _EC_KEY_METHOD_get_compute_key(
      meth,
      pck,
    );
  }

  late final _EC_KEY_METHOD_get_compute_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                              ffi.Pointer<ffi.Size> pseclen,
                              ffi.Pointer<EC_POINT> pub_key,
                              ffi.Pointer<EC_KEY>
                                  ecdh)>>>)>>('EC_KEY_METHOD_get_compute_key');
  late final _EC_KEY_METHOD_get_compute_key =
      _EC_KEY_METHOD_get_compute_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                              ffi.Pointer<ffi.Size> pseclen,
                              ffi.Pointer<EC_POINT> pub_key,
                              ffi.Pointer<EC_KEY> ecdh)>>>)>();

  void EC_KEY_METHOD_get_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Int type,
                        ffi.Pointer<ffi.UnsignedChar> dgst,
                        ffi.Int dlen,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.UnsignedInt> siglen,
                        ffi.Pointer<BIGNUM> kinv,
                        ffi.Pointer<BIGNUM> r,
                        ffi.Pointer<EC_KEY> eckey)>>>
        psign,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY> eckey,
                        ffi.Pointer<BN_CTX> ctx_in,
                        ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                        ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>>
        psign_setup,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ECDSA_SIG> Function(
                        ffi.Pointer<ffi.UnsignedChar> dgst,
                        ffi.Int dgst_len,
                        ffi.Pointer<BIGNUM> in_kinv,
                        ffi.Pointer<BIGNUM> in_r,
                        ffi.Pointer<EC_KEY> eckey)>>>
        psign_sig,
  ) {
    return _EC_KEY_METHOD_get_sign(
      meth,
      psign,
      psign_setup,
      psign_sig,
    );
  }

  late final _EC_KEY_METHOD_get_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Int type,
                                  ffi.Pointer<ffi.UnsignedChar> dgst,
                                  ffi.Int dlen,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.UnsignedInt> siglen,
                                  ffi.Pointer<BIGNUM> kinv,
                                  ffi.Pointer<BIGNUM> r,
                                  ffi.Pointer<EC_KEY> eckey)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EC_KEY> eckey,
                                  ffi.Pointer<BN_CTX> ctx_in,
                                  ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                                  ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Pointer<ECDSA_SIG> Function(
                                  ffi.Pointer<ffi.UnsignedChar> dgst,
                                  ffi.Int dgst_len,
                                  ffi.Pointer<BIGNUM> in_kinv,
                                  ffi.Pointer<BIGNUM> in_r,
                                  ffi.Pointer<EC_KEY> eckey)>>>)>>(
      'EC_KEY_METHOD_get_sign');
  late final _EC_KEY_METHOD_get_sign = _EC_KEY_METHOD_get_signPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int type,
                          ffi.Pointer<ffi.UnsignedChar> dgst,
                          ffi.Int dlen,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.UnsignedInt> siglen,
                          ffi.Pointer<BIGNUM> kinv,
                          ffi.Pointer<BIGNUM> r,
                          ffi.Pointer<EC_KEY> eckey)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY> eckey,
                          ffi.Pointer<BN_CTX> ctx_in,
                          ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                          ffi.Pointer<ffi.Pointer<BIGNUM>> rp)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ECDSA_SIG> Function(
                          ffi.Pointer<ffi.UnsignedChar> dgst,
                          ffi.Int dgst_len,
                          ffi.Pointer<BIGNUM> in_kinv,
                          ffi.Pointer<BIGNUM> in_r,
                          ffi.Pointer<EC_KEY> eckey)>>>)>();

  void EC_KEY_METHOD_get_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Int type,
                        ffi.Pointer<ffi.UnsignedChar> dgst,
                        ffi.Int dgst_len,
                        ffi.Pointer<ffi.UnsignedChar> sigbuf,
                        ffi.Int sig_len,
                        ffi.Pointer<EC_KEY> eckey)>>>
        pverify,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.UnsignedChar> dgst,
                        ffi.Int dgst_len,
                        ffi.Pointer<ECDSA_SIG> sig,
                        ffi.Pointer<EC_KEY> eckey)>>>
        pverify_sig,
  ) {
    return _EC_KEY_METHOD_get_verify(
      meth,
      pverify,
      pverify_sig,
    );
  }

  late final _EC_KEY_METHOD_get_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Int type,
                                  ffi.Pointer<ffi.UnsignedChar> dgst,
                                  ffi.Int dgst_len,
                                  ffi.Pointer<ffi.UnsignedChar> sigbuf,
                                  ffi.Int sig_len,
                                  ffi.Pointer<EC_KEY> eckey)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<ffi.UnsignedChar> dgst,
                                  ffi.Int dgst_len,
                                  ffi.Pointer<ECDSA_SIG> sig,
                                  ffi.Pointer<EC_KEY> eckey)>>>)>>(
      'EC_KEY_METHOD_get_verify');
  late final _EC_KEY_METHOD_get_verify =
      _EC_KEY_METHOD_get_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Int type,
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dgst_len,
                              ffi.Pointer<ffi.UnsignedChar> sigbuf,
                              ffi.Int sig_len,
                              ffi.Pointer<EC_KEY> eckey)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.UnsignedChar> dgst,
                              ffi.Int dgst_len,
                              ffi.Pointer<ECDSA_SIG> sig,
                              ffi.Pointer<EC_KEY> eckey)>>>)>();

  int EVP_KDF_up_ref(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_up_ref(
      kdf,
    );
  }

  late final _EVP_KDF_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_KDF>)>>(
          'EVP_KDF_up_ref');
  late final _EVP_KDF_up_ref =
      _EVP_KDF_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_KDF>)>();

  void EVP_KDF_free(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_free(
      kdf,
    );
  }

  late final _EVP_KDF_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KDF>)>>(
          'EVP_KDF_free');
  late final _EVP_KDF_free =
      _EVP_KDF_freePtr.asFunction<void Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<EVP_KDF> EVP_KDF_fetch(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> properties,
  ) {
    return _EVP_KDF_fetch(
      libctx,
      algorithm,
      properties,
    );
  }

  late final _EVP_KDF_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KDF> Function(ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('EVP_KDF_fetch');
  late final _EVP_KDF_fetch = _EVP_KDF_fetchPtr.asFunction<
      ffi.Pointer<EVP_KDF> Function(ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_KDF_CTX> EVP_KDF_CTX_new(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_CTX_new(
      kdf,
    );
  }

  late final _EVP_KDF_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KDF_CTX> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_CTX_new');
  late final _EVP_KDF_CTX_new = _EVP_KDF_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_KDF_CTX> Function(ffi.Pointer<EVP_KDF>)>();

  void EVP_KDF_CTX_free(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_free(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KDF_CTX>)>>(
          'EVP_KDF_CTX_free');
  late final _EVP_KDF_CTX_free = _EVP_KDF_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_KDF_CTX>)>();

  ffi.Pointer<EVP_KDF_CTX> EVP_KDF_CTX_dup(
    ffi.Pointer<EVP_KDF_CTX> src,
  ) {
    return _EVP_KDF_CTX_dup(
      src,
    );
  }

  late final _EVP_KDF_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KDF_CTX> Function(
              ffi.Pointer<EVP_KDF_CTX>)>>('EVP_KDF_CTX_dup');
  late final _EVP_KDF_CTX_dup = _EVP_KDF_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_KDF_CTX> Function(ffi.Pointer<EVP_KDF_CTX>)>();

  ffi.Pointer<ffi.Char> EVP_KDF_get0_description(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_get0_description(
      kdf,
    );
  }

  late final _EVP_KDF_get0_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_get0_description');
  late final _EVP_KDF_get0_description = _EVP_KDF_get0_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KDF>)>();

  int EVP_KDF_is_a(
    ffi.Pointer<EVP_KDF> kdf,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_KDF_is_a(
      kdf,
      name,
    );
  }

  late final _EVP_KDF_is_aPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KDF>, ffi.Pointer<ffi.Char>)>>('EVP_KDF_is_a');
  late final _EVP_KDF_is_a = _EVP_KDF_is_aPtr.asFunction<
      int Function(ffi.Pointer<EVP_KDF>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_KDF_get0_name(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_get0_name(
      kdf,
    );
  }

  late final _EVP_KDF_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_get0_name');
  late final _EVP_KDF_get0_name = _EVP_KDF_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<OSSL_PROVIDER> EVP_KDF_get0_provider(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_get0_provider(
      kdf,
    );
  }

  late final _EVP_KDF_get0_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PROVIDER> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_get0_provider');
  late final _EVP_KDF_get0_provider = _EVP_KDF_get0_providerPtr.asFunction<
      ffi.Pointer<OSSL_PROVIDER> Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<EVP_KDF> EVP_KDF_CTX_kdf(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_kdf(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_kdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_KDF> Function(
              ffi.Pointer<EVP_KDF_CTX>)>>('EVP_KDF_CTX_kdf');
  late final _EVP_KDF_CTX_kdf = _EVP_KDF_CTX_kdfPtr.asFunction<
      ffi.Pointer<EVP_KDF> Function(ffi.Pointer<EVP_KDF_CTX>)>();

  void EVP_KDF_CTX_reset(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_reset(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_KDF_CTX>)>>(
          'EVP_KDF_CTX_reset');
  late final _EVP_KDF_CTX_reset = _EVP_KDF_CTX_resetPtr.asFunction<
      void Function(ffi.Pointer<EVP_KDF_CTX>)>();

  int EVP_KDF_CTX_get_kdf_size(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_get_kdf_size(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_get_kdf_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_KDF_CTX>)>>(
          'EVP_KDF_CTX_get_kdf_size');
  late final _EVP_KDF_CTX_get_kdf_size = _EVP_KDF_CTX_get_kdf_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_KDF_CTX>)>();

  int EVP_KDF_derive(
    ffi.Pointer<EVP_KDF_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_KDF_derive(
      ctx,
      key,
      keylen,
      params,
    );
  }

  late final _EVP_KDF_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KDF_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_KDF_derive');
  late final _EVP_KDF_derive = _EVP_KDF_derivePtr.asFunction<
      int Function(ffi.Pointer<EVP_KDF_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<OSSL_PARAM>)>();

  int EVP_KDF_get_params(
    ffi.Pointer<EVP_KDF> kdf,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_KDF_get_params(
      kdf,
      params,
    );
  }

  late final _EVP_KDF_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_KDF>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_KDF_get_params');
  late final _EVP_KDF_get_params = _EVP_KDF_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_KDF>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_KDF_CTX_get_params(
    ffi.Pointer<EVP_KDF_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_KDF_CTX_get_params(
      ctx,
      params,
    );
  }

  late final _EVP_KDF_CTX_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_KDF_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_KDF_CTX_get_params');
  late final _EVP_KDF_CTX_get_params = _EVP_KDF_CTX_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_KDF_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  int EVP_KDF_CTX_set_params(
    ffi.Pointer<EVP_KDF_CTX> ctx,
    ffi.Pointer<OSSL_PARAM> params,
  ) {
    return _EVP_KDF_CTX_set_params(
      ctx,
      params,
    );
  }

  late final _EVP_KDF_CTX_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_KDF_CTX>,
              ffi.Pointer<OSSL_PARAM>)>>('EVP_KDF_CTX_set_params');
  late final _EVP_KDF_CTX_set_params = _EVP_KDF_CTX_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<EVP_KDF_CTX>, ffi.Pointer<OSSL_PARAM>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KDF_gettable_params(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_gettable_params(
      kdf,
    );
  }

  late final _EVP_KDF_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_gettable_params');
  late final _EVP_KDF_gettable_params = _EVP_KDF_gettable_paramsPtr.asFunction<
      ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KDF_gettable_ctx_params(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_gettable_ctx_params(
      kdf,
    );
  }

  late final _EVP_KDF_gettable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_gettable_ctx_params');
  late final _EVP_KDF_gettable_ctx_params = _EVP_KDF_gettable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KDF_settable_ctx_params(
    ffi.Pointer<EVP_KDF> kdf,
  ) {
    return _EVP_KDF_settable_ctx_params(
      kdf,
    );
  }

  late final _EVP_KDF_settable_ctx_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KDF>)>>('EVP_KDF_settable_ctx_params');
  late final _EVP_KDF_settable_ctx_params = _EVP_KDF_settable_ctx_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KDF>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KDF_CTX_gettable_params(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_gettable_params(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_gettable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KDF_CTX>)>>('EVP_KDF_CTX_gettable_params');
  late final _EVP_KDF_CTX_gettable_params = _EVP_KDF_CTX_gettable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KDF_CTX>)>();

  ffi.Pointer<OSSL_PARAM> EVP_KDF_CTX_settable_params(
    ffi.Pointer<EVP_KDF_CTX> ctx,
  ) {
    return _EVP_KDF_CTX_settable_params(
      ctx,
    );
  }

  late final _EVP_KDF_CTX_settable_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OSSL_PARAM> Function(
              ffi.Pointer<EVP_KDF_CTX>)>>('EVP_KDF_CTX_settable_params');
  late final _EVP_KDF_CTX_settable_params = _EVP_KDF_CTX_settable_paramsPtr
      .asFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<EVP_KDF_CTX>)>();

  void EVP_KDF_do_all_provided(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_KDF> kdf, ffi.Pointer<ffi.Void> arg)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_KDF_do_all_provided(
      libctx,
      fn,
      arg,
    );
  }

  late final _EVP_KDF_do_all_providedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OSSL_LIB_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_KDF> kdf,
                          ffi.Pointer<ffi.Void> arg)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KDF_do_all_provided');
  late final _EVP_KDF_do_all_provided = _EVP_KDF_do_all_providedPtr.asFunction<
      void Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_KDF> kdf, ffi.Pointer<ffi.Void> arg)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_KDF_names_do_all(
    ffi.Pointer<EVP_KDF> kdf,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>
        fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_KDF_names_do_all(
      kdf,
      fn,
      data,
    );
  }

  late final _EVP_KDF_names_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_KDF>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char> name,
                          ffi.Pointer<ffi.Void> data)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_KDF_names_do_all');
  late final _EVP_KDF_names_do_all = _EVP_KDF_names_do_allPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_KDF>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_CTX_set_tls1_prf_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_tls1_prf_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_set_tls1_prf_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_MD>)>>('EVP_PKEY_CTX_set_tls1_prf_md');
  late final _EVP_PKEY_CTX_set_tls1_prf_md =
      _EVP_PKEY_CTX_set_tls1_prf_mdPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_PKEY_CTX_set1_tls1_prf_secret(
    ffi.Pointer<EVP_PKEY_CTX> pctx,
    ffi.Pointer<ffi.UnsignedChar> sec,
    int seclen,
  ) {
    return _EVP_PKEY_CTX_set1_tls1_prf_secret(
      pctx,
      sec,
      seclen,
    );
  }

  late final _EVP_PKEY_CTX_set1_tls1_prf_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_tls1_prf_secret');
  late final _EVP_PKEY_CTX_set1_tls1_prf_secret =
      _EVP_PKEY_CTX_set1_tls1_prf_secretPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_add1_tls1_prf_seed(
    ffi.Pointer<EVP_PKEY_CTX> pctx,
    ffi.Pointer<ffi.UnsignedChar> seed,
    int seedlen,
  ) {
    return _EVP_PKEY_CTX_add1_tls1_prf_seed(
      pctx,
      seed,
      seedlen,
    );
  }

  late final _EVP_PKEY_CTX_add1_tls1_prf_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_add1_tls1_prf_seed');
  late final _EVP_PKEY_CTX_add1_tls1_prf_seed =
      _EVP_PKEY_CTX_add1_tls1_prf_seedPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_set_hkdf_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_hkdf_md(
      ctx,
      md,
    );
  }

  late final _EVP_PKEY_CTX_set_hkdf_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_MD>)>>('EVP_PKEY_CTX_set_hkdf_md');
  late final _EVP_PKEY_CTX_set_hkdf_md =
      _EVP_PKEY_CTX_set_hkdf_mdPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_PKEY_CTX_set1_hkdf_salt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
  ) {
    return _EVP_PKEY_CTX_set1_hkdf_salt(
      ctx,
      salt,
      saltlen,
    );
  }

  late final _EVP_PKEY_CTX_set1_hkdf_saltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_hkdf_salt');
  late final _EVP_PKEY_CTX_set1_hkdf_salt =
      _EVP_PKEY_CTX_set1_hkdf_saltPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_set1_hkdf_key(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PKEY_CTX_set1_hkdf_key(
      ctx,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_CTX_set1_hkdf_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_hkdf_key');
  late final _EVP_PKEY_CTX_set1_hkdf_key =
      _EVP_PKEY_CTX_set1_hkdf_keyPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_add1_hkdf_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> info,
    int infolen,
  ) {
    return _EVP_PKEY_CTX_add1_hkdf_info(
      ctx,
      info,
      infolen,
    );
  }

  late final _EVP_PKEY_CTX_add1_hkdf_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_add1_hkdf_info');
  late final _EVP_PKEY_CTX_add1_hkdf_info =
      _EVP_PKEY_CTX_add1_hkdf_infoPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_set_hkdf_mode(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int mode,
  ) {
    return _EVP_PKEY_CTX_set_hkdf_mode(
      ctx,
      mode,
    );
  }

  late final _EVP_PKEY_CTX_set_hkdf_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_set_hkdf_mode');
  late final _EVP_PKEY_CTX_set_hkdf_mode = _EVP_PKEY_CTX_set_hkdf_modePtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set1_pbe_pass(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
  ) {
    return _EVP_PKEY_CTX_set1_pbe_pass(
      ctx,
      pass,
      passlen,
    );
  }

  late final _EVP_PKEY_CTX_set1_pbe_passPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_pbe_pass');
  late final _EVP_PKEY_CTX_set1_pbe_pass =
      _EVP_PKEY_CTX_set1_pbe_passPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_CTX_set1_scrypt_salt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
  ) {
    return _EVP_PKEY_CTX_set1_scrypt_salt(
      ctx,
      salt,
      saltlen,
    );
  }

  late final _EVP_PKEY_CTX_set1_scrypt_saltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_CTX_set1_scrypt_salt');
  late final _EVP_PKEY_CTX_set1_scrypt_salt =
      _EVP_PKEY_CTX_set1_scrypt_saltPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_CTX_set_scrypt_N(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int n,
  ) {
    return _EVP_PKEY_CTX_set_scrypt_N(
      ctx,
      n,
    );
  }

  late final _EVP_PKEY_CTX_set_scrypt_NPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Uint64)>>('EVP_PKEY_CTX_set_scrypt_N');
  late final _EVP_PKEY_CTX_set_scrypt_N = _EVP_PKEY_CTX_set_scrypt_NPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set_scrypt_r(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int r,
  ) {
    return _EVP_PKEY_CTX_set_scrypt_r(
      ctx,
      r,
    );
  }

  late final _EVP_PKEY_CTX_set_scrypt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Uint64)>>('EVP_PKEY_CTX_set_scrypt_r');
  late final _EVP_PKEY_CTX_set_scrypt_r = _EVP_PKEY_CTX_set_scrypt_rPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set_scrypt_p(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int p,
  ) {
    return _EVP_PKEY_CTX_set_scrypt_p(
      ctx,
      p,
    );
  }

  late final _EVP_PKEY_CTX_set_scrypt_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Uint64)>>('EVP_PKEY_CTX_set_scrypt_p');
  late final _EVP_PKEY_CTX_set_scrypt_p = _EVP_PKEY_CTX_set_scrypt_pPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  int EVP_PKEY_CTX_set_scrypt_maxmem_bytes(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int maxmem_bytes,
  ) {
    return _EVP_PKEY_CTX_set_scrypt_maxmem_bytes(
      ctx,
      maxmem_bytes,
    );
  }

  late final _EVP_PKEY_CTX_set_scrypt_maxmem_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Uint64)>>('EVP_PKEY_CTX_set_scrypt_maxmem_bytes');
  late final _EVP_PKEY_CTX_set_scrypt_maxmem_bytes =
      _EVP_PKEY_CTX_set_scrypt_maxmem_bytesPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef u_char = ffi.UnsignedChar;
typedef Dartu_char = int;
typedef u_short = ffi.UnsignedShort;
typedef Dartu_short = int;
typedef u_int = ffi.UnsignedInt;
typedef Dartu_int = int;
typedef u_long = ffi.UnsignedLong;
typedef Dartu_long = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
typedef uint = ffi.UnsignedInt;
typedef Dartuint = int;
typedef u_quad_t = u_int64_t;
typedef quad_t = ffi.Int64;
typedef Dartquad_t = int;
typedef qaddr_t = ffi.Pointer<quad_t>;
typedef caddr_t = ffi.Pointer<ffi.Char>;
typedef daddr_t = ffi.Int32;
typedef Dartdaddr_t = int;
typedef dev_t = __darwin_dev_t;
typedef fixpt_t = u_int32_t;
typedef blkcnt_t = __darwin_blkcnt_t;
typedef blksize_t = __darwin_blksize_t;
typedef gid_t = __darwin_gid_t;
typedef in_addr_t = __uint32_t;
typedef in_port_t = __uint16_t;
typedef ino_t = __darwin_ino_t;
typedef ino64_t = __darwin_ino64_t;
typedef key_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef nlink_t = __uint16_t;
typedef id_t = __darwin_id_t;
typedef pid_t = __darwin_pid_t;
typedef off_t = __darwin_off_t;
typedef segsz_t = ffi.Int32;
typedef Dartsegsz_t = int;
typedef swblk_t = ffi.Int32;
typedef Dartswblk_t = int;
typedef uid_t = __darwin_uid_t;
typedef clock_t = __darwin_clock_t;
typedef ssize_t = __darwin_ssize_t;
typedef time_t = __darwin_time_t;
typedef useconds_t = __darwin_useconds_t;
typedef suseconds_t = __darwin_suseconds_t;
typedef rsize_t = __darwin_size_t;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef fd_mask = __int32_t;
typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef pthread_cond_t = __darwin_pthread_cond_t;
typedef pthread_condattr_t = __darwin_pthread_condattr_t;
typedef pthread_mutex_t = __darwin_pthread_mutex_t;
typedef pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
typedef pthread_once_t = __darwin_pthread_once_t;
typedef pthread_rwlock_t = __darwin_pthread_rwlock_t;
typedef pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
typedef pthread_t = __darwin_pthread_t;
typedef pthread_key_t = __darwin_pthread_key_t;
typedef fsblkcnt_t = __darwin_fsblkcnt_t;
typedef fsfilcnt_t = __darwin_fsfilcnt_t;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef ossl_intmax_t = intmax_t;
typedef ossl_uintmax_t = uintmax_t;
typedef va_list = __darwin_va_list;
typedef fpos_t = __darwin_off_t;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;

final class stack_st extends ffi.Opaque {}

typedef OPENSSL_STACK = stack_st;
typedef OPENSSL_sk_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_sk_compfuncFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_compfunc
    = ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_compfuncFunction>>;
typedef OPENSSL_sk_freefuncFunction = ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_sk_freefuncFunction = void Function(ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_freefunc
    = ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_freefuncFunction>>;
typedef OPENSSL_sk_copyfuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_copyfunc
    = ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_copyfuncFunction>>;
typedef OPENSSL_STRING = ffi.Pointer<ffi.Char>;
typedef OPENSSL_CSTRING = ffi.Pointer<ffi.Char>;

final class stack_st_OPENSSL_STRING extends ffi.Opaque {}

typedef sk_OPENSSL_STRING_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> a, ffi.Pointer<ffi.Pointer<ffi.Char>> b);
typedef Dartsk_OPENSSL_STRING_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> a, ffi.Pointer<ffi.Pointer<ffi.Char>> b);
typedef sk_OPENSSL_STRING_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_compfuncFunction>>;
typedef sk_OPENSSL_STRING_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Char> a);
typedef Dartsk_OPENSSL_STRING_freefuncFunction = void Function(
    ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_STRING_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_freefuncFunction>>;
typedef sk_OPENSSL_STRING_copyfuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_STRING_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_copyfuncFunction>>;

final class stack_st_OPENSSL_CSTRING extends ffi.Opaque {}

typedef sk_OPENSSL_CSTRING_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> a, ffi.Pointer<ffi.Pointer<ffi.Char>> b);
typedef Dartsk_OPENSSL_CSTRING_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Char>> a, ffi.Pointer<ffi.Pointer<ffi.Char>> b);
typedef sk_OPENSSL_CSTRING_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_compfuncFunction>>;
typedef sk_OPENSSL_CSTRING_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Char> a);
typedef Dartsk_OPENSSL_CSTRING_freefuncFunction = void Function(
    ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_CSTRING_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_freefuncFunction>>;
typedef sk_OPENSSL_CSTRING_copyfuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_CSTRING_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_copyfuncFunction>>;
typedef OPENSSL_BLOCK = ffi.Pointer<ffi.Void>;

final class stack_st_OPENSSL_BLOCK extends ffi.Opaque {}

typedef sk_OPENSSL_BLOCK_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a, ffi.Pointer<ffi.Pointer<ffi.Void>> b);
typedef Dartsk_OPENSSL_BLOCK_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a, ffi.Pointer<ffi.Pointer<ffi.Void>> b);
typedef sk_OPENSSL_BLOCK_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_compfuncFunction>>;
typedef sk_OPENSSL_BLOCK_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> a);
typedef Dartsk_OPENSSL_BLOCK_freefuncFunction = void Function(
    ffi.Pointer<ffi.Void> a);
typedef sk_OPENSSL_BLOCK_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_freefuncFunction>>;
typedef sk_OPENSSL_BLOCK_copyfuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> a);
typedef sk_OPENSSL_BLOCK_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_copyfuncFunction>>;

final class ossl_provider_st extends ffi.Opaque {}

typedef OSSL_PROVIDER = ossl_provider_st;

final class asn1_string_st extends ffi.Struct {
  @ffi.Int()
  external int length;

  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.Long()
  external int flags;
}

typedef ASN1_INTEGER = asn1_string_st;
typedef ASN1_ENUMERATED = asn1_string_st;
typedef ASN1_BIT_STRING = asn1_string_st;
typedef ASN1_OCTET_STRING = asn1_string_st;
typedef ASN1_PRINTABLESTRING = asn1_string_st;
typedef ASN1_T61STRING = asn1_string_st;
typedef ASN1_IA5STRING = asn1_string_st;
typedef ASN1_GENERALSTRING = asn1_string_st;
typedef ASN1_UNIVERSALSTRING = asn1_string_st;
typedef ASN1_BMPSTRING = asn1_string_st;
typedef ASN1_UTCTIME = asn1_string_st;
typedef ASN1_TIME = asn1_string_st;
typedef ASN1_GENERALIZEDTIME = asn1_string_st;
typedef ASN1_VISIBLESTRING = asn1_string_st;
typedef ASN1_UTF8STRING = asn1_string_st;
typedef ASN1_STRING = asn1_string_st;
typedef ASN1_BOOLEAN = ffi.Int;
typedef DartASN1_BOOLEAN = int;
typedef ASN1_NULL = ffi.Int;
typedef DartASN1_NULL = int;

final class asn1_object_st extends ffi.Opaque {}

typedef ASN1_OBJECT = asn1_object_st;

final class ASN1_VALUE_st extends ffi.Opaque {}

typedef ASN1_VALUE = ASN1_VALUE_st;

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Char> ptr;

  @ASN1_BOOLEAN()
  external int boolean;

  external ffi.Pointer<ASN1_STRING> asn1_string;

  external ffi.Pointer<ASN1_OBJECT> object;

  external ffi.Pointer<ASN1_INTEGER> integer;

  external ffi.Pointer<ASN1_ENUMERATED> enumerated;

  external ffi.Pointer<ASN1_BIT_STRING> bit_string;

  external ffi.Pointer<ASN1_OCTET_STRING> octet_string;

  external ffi.Pointer<ASN1_PRINTABLESTRING> printablestring;

  external ffi.Pointer<ASN1_T61STRING> t61string;

  external ffi.Pointer<ASN1_IA5STRING> ia5string;

  external ffi.Pointer<ASN1_GENERALSTRING> generalstring;

  external ffi.Pointer<ASN1_BMPSTRING> bmpstring;

  external ffi.Pointer<ASN1_UNIVERSALSTRING> universalstring;

  external ffi.Pointer<ASN1_UTCTIME> utctime;

  external ffi.Pointer<ASN1_GENERALIZEDTIME> generalizedtime;

  external ffi.Pointer<ASN1_VISIBLESTRING> visiblestring;

  external ffi.Pointer<ASN1_UTF8STRING> utf8string;

  external ffi.Pointer<ASN1_STRING> set1;

  external ffi.Pointer<ASN1_STRING> sequence;

  external ffi.Pointer<ASN1_VALUE> asn1_value;
}

final class asn1_type_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  external UnnamedUnion1 value;
}

typedef ASN1_TYPE = asn1_type_st;

final class asn1_string_table_st extends ffi.Struct {
  @ffi.Int()
  external int nid;

  @ffi.Long()
  external int minsize;

  @ffi.Long()
  external int maxsize;

  @ffi.UnsignedLong()
  external int mask;

  @ffi.UnsignedLong()
  external int flags;
}

typedef ASN1_STRING_TABLE = asn1_string_table_st;

final class ASN1_ITEM_st extends ffi.Opaque {}

typedef ASN1_ITEM = ASN1_ITEM_st;

final class asn1_pctx_st extends ffi.Opaque {}

typedef ASN1_PCTX = asn1_pctx_st;

final class asn1_sctx_st extends ffi.Opaque {}

typedef ASN1_SCTX = asn1_sctx_st;

final class bio_st extends ffi.Opaque {}

typedef BIO = bio_st;

final class bignum_st extends ffi.Opaque {}

typedef BIGNUM = bignum_st;

final class bignum_ctx extends ffi.Opaque {}

typedef BN_CTX = bignum_ctx;

final class bn_blinding_st extends ffi.Opaque {}

typedef BN_BLINDING = bn_blinding_st;

final class bn_mont_ctx_st extends ffi.Opaque {}

typedef BN_MONT_CTX = bn_mont_ctx_st;

final class bn_recp_ctx_st extends ffi.Opaque {}

typedef BN_RECP_CTX = bn_recp_ctx_st;

final class bn_gencb_st extends ffi.Opaque {}

typedef BN_GENCB = bn_gencb_st;

final class buf_mem_st extends ffi.Opaque {}

typedef BUF_MEM = buf_mem_st;

final class stack_st_BIGNUM extends ffi.Opaque {}

final class stack_st_BIGNUM_const extends ffi.Opaque {}

final class err_state_st extends ffi.Opaque {}

typedef ERR_STATE = err_state_st;

final class evp_cipher_st extends ffi.Opaque {}

typedef EVP_CIPHER = evp_cipher_st;

final class evp_cipher_ctx_st extends ffi.Opaque {}

typedef EVP_CIPHER_CTX = evp_cipher_ctx_st;

final class evp_md_st extends ffi.Opaque {}

typedef EVP_MD = evp_md_st;

final class evp_md_ctx_st extends ffi.Opaque {}

typedef EVP_MD_CTX = evp_md_ctx_st;

final class evp_mac_st extends ffi.Opaque {}

typedef EVP_MAC = evp_mac_st;

final class evp_mac_ctx_st extends ffi.Opaque {}

typedef EVP_MAC_CTX = evp_mac_ctx_st;

final class evp_pkey_st extends ffi.Opaque {}

typedef EVP_PKEY = evp_pkey_st;

final class evp_pkey_asn1_method_st extends ffi.Opaque {}

typedef EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;

final class evp_pkey_method_st extends ffi.Opaque {}

typedef EVP_PKEY_METHOD = evp_pkey_method_st;

final class evp_pkey_ctx_st extends ffi.Opaque {}

typedef EVP_PKEY_CTX = evp_pkey_ctx_st;

final class evp_keymgmt_st extends ffi.Opaque {}

typedef EVP_KEYMGMT = evp_keymgmt_st;

final class evp_kdf_st extends ffi.Opaque {}

typedef EVP_KDF = evp_kdf_st;

final class evp_kdf_ctx_st extends ffi.Opaque {}

typedef EVP_KDF_CTX = evp_kdf_ctx_st;

final class evp_rand_st extends ffi.Opaque {}

typedef EVP_RAND = evp_rand_st;

final class evp_rand_ctx_st extends ffi.Opaque {}

typedef EVP_RAND_CTX = evp_rand_ctx_st;

final class evp_keyexch_st extends ffi.Opaque {}

typedef EVP_KEYEXCH = evp_keyexch_st;

final class evp_signature_st extends ffi.Opaque {}

typedef EVP_SIGNATURE = evp_signature_st;

final class evp_asym_cipher_st extends ffi.Opaque {}

typedef EVP_ASYM_CIPHER = evp_asym_cipher_st;

final class evp_kem_st extends ffi.Opaque {}

typedef EVP_KEM = evp_kem_st;

final class evp_Encode_Ctx_st extends ffi.Opaque {}

typedef EVP_ENCODE_CTX = evp_Encode_Ctx_st;

final class hmac_ctx_st extends ffi.Opaque {}

typedef HMAC_CTX = hmac_ctx_st;

final class dh_st extends ffi.Opaque {}

typedef DH = dh_st;

final class dh_method extends ffi.Opaque {}

typedef DH_METHOD = dh_method;

final class dsa_st extends ffi.Opaque {}

typedef DSA = dsa_st;

final class dsa_method extends ffi.Opaque {}

typedef DSA_METHOD = dsa_method;

final class rsa_st extends ffi.Opaque {}

typedef RSA = rsa_st;

final class rsa_meth_st extends ffi.Opaque {}

typedef RSA_METHOD = rsa_meth_st;

final class rsa_pss_params_st extends ffi.Opaque {}

typedef RSA_PSS_PARAMS = rsa_pss_params_st;

final class ec_key_st extends ffi.Opaque {}

typedef EC_KEY = ec_key_st;

final class ec_key_method_st extends ffi.Opaque {}

typedef EC_KEY_METHOD = ec_key_method_st;

final class rand_meth_st extends ffi.Opaque {}

typedef RAND_METHOD = rand_meth_st;

final class rand_drbg_st extends ffi.Opaque {}

typedef RAND_DRBG = rand_drbg_st;

final class ssl_dane_st extends ffi.Opaque {}

typedef SSL_DANE = ssl_dane_st;

final class x509_st extends ffi.Opaque {}

typedef X509 = x509_st;

final class X509_algor_st extends ffi.Opaque {}

typedef X509_ALGOR = X509_algor_st;

final class X509_crl_st extends ffi.Opaque {}

typedef X509_CRL = X509_crl_st;

final class x509_crl_method_st extends ffi.Opaque {}

typedef X509_CRL_METHOD = x509_crl_method_st;

final class x509_revoked_st extends ffi.Opaque {}

typedef X509_REVOKED = x509_revoked_st;

final class X509_name_st extends ffi.Opaque {}

typedef X509_NAME = X509_name_st;

final class X509_pubkey_st extends ffi.Opaque {}

typedef X509_PUBKEY = X509_pubkey_st;

final class x509_store_st extends ffi.Opaque {}

typedef X509_STORE = x509_store_st;

final class x509_store_ctx_st extends ffi.Opaque {}

typedef X509_STORE_CTX = x509_store_ctx_st;

final class x509_object_st extends ffi.Opaque {}

typedef X509_OBJECT = x509_object_st;

final class x509_lookup_st extends ffi.Opaque {}

typedef X509_LOOKUP = x509_lookup_st;

final class x509_lookup_method_st extends ffi.Opaque {}

typedef X509_LOOKUP_METHOD = x509_lookup_method_st;

final class X509_VERIFY_PARAM_st extends ffi.Opaque {}

typedef X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;

final class x509_sig_info_st extends ffi.Opaque {}

typedef X509_SIG_INFO = x509_sig_info_st;

final class pkcs8_priv_key_info_st extends ffi.Opaque {}

typedef PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;

final class v3_ext_ctx extends ffi.Opaque {}

typedef X509V3_CTX = v3_ext_ctx;

final class conf_st extends ffi.Opaque {}

typedef CONF = conf_st;

final class ossl_init_settings_st extends ffi.Opaque {}

typedef OPENSSL_INIT_SETTINGS = ossl_init_settings_st;

final class ui_st extends ffi.Opaque {}

typedef UI = ui_st;

final class ui_method_st extends ffi.Opaque {}

typedef UI_METHOD = ui_method_st;

final class engine_st extends ffi.Opaque {}

typedef ENGINE = engine_st;

final class ssl_st extends ffi.Opaque {}

typedef SSL = ssl_st;

final class ssl_ctx_st extends ffi.Opaque {}

typedef SSL_CTX = ssl_ctx_st;

final class comp_ctx_st extends ffi.Opaque {}

typedef COMP_CTX = comp_ctx_st;

final class comp_method_st extends ffi.Opaque {}

typedef COMP_METHOD = comp_method_st;

final class X509_POLICY_NODE_st extends ffi.Opaque {}

typedef X509_POLICY_NODE = X509_POLICY_NODE_st;

final class X509_POLICY_LEVEL_st extends ffi.Opaque {}

typedef X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;

final class X509_POLICY_TREE_st extends ffi.Opaque {}

typedef X509_POLICY_TREE = X509_POLICY_TREE_st;

final class X509_POLICY_CACHE_st extends ffi.Opaque {}

typedef X509_POLICY_CACHE = X509_POLICY_CACHE_st;

final class AUTHORITY_KEYID_st extends ffi.Opaque {}

typedef AUTHORITY_KEYID = AUTHORITY_KEYID_st;

final class DIST_POINT_st extends ffi.Opaque {}

typedef DIST_POINT = DIST_POINT_st;

final class ISSUING_DIST_POINT_st extends ffi.Opaque {}

typedef ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;

final class NAME_CONSTRAINTS_st extends ffi.Opaque {}

typedef NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;

final class ossl_lib_ctx_st extends ffi.Opaque {}

typedef OSSL_LIB_CTX = ossl_lib_ctx_st;

final class stack_st_void extends ffi.Opaque {}

final class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<OSSL_LIB_CTX> ctx;

  external ffi.Pointer<stack_st_void> sk;
}

typedef CRYPTO_EX_DATA = crypto_ex_data_st;

final class ossl_http_req_ctx_st extends ffi.Opaque {}

typedef OSSL_HTTP_REQ_CTX = ossl_http_req_ctx_st;

final class ocsp_response_st extends ffi.Opaque {}

typedef OCSP_RESPONSE = ocsp_response_st;

final class ocsp_responder_id_st extends ffi.Opaque {}

typedef OCSP_RESPID = ocsp_responder_id_st;

final class sct_st extends ffi.Opaque {}

typedef SCT = sct_st;

final class sct_ctx_st extends ffi.Opaque {}

typedef SCT_CTX = sct_ctx_st;

final class ctlog_st extends ffi.Opaque {}

typedef CTLOG = ctlog_st;

final class ctlog_store_st extends ffi.Opaque {}

typedef CTLOG_STORE = ctlog_store_st;

final class ct_policy_eval_ctx_st extends ffi.Opaque {}

typedef CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st;

final class ossl_store_info_st extends ffi.Opaque {}

typedef OSSL_STORE_INFO = ossl_store_info_st;

final class ossl_store_search_st extends ffi.Opaque {}

typedef OSSL_STORE_SEARCH = ossl_store_search_st;

final class ossl_dispatch_st extends ffi.Struct {
  @ffi.Int()
  external int function_id;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> function;
}

typedef OSSL_DISPATCH = ossl_dispatch_st;

final class ossl_item_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  external ffi.Pointer<ffi.Void> ptr;
}

typedef OSSL_ITEM = ossl_item_st;

final class ossl_algorithm_st extends ffi.Struct {
  external ffi.Pointer<ffi.Char> algorithm_names;

  external ffi.Pointer<ffi.Char> property_definition;

  external ffi.Pointer<OSSL_DISPATCH> implementation;

  external ffi.Pointer<ffi.Char> algorithm_description;
}

typedef OSSL_ALGORITHM = ossl_algorithm_st;

final class ossl_param_st extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @ffi.UnsignedInt()
  external int data_type;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int data_size;

  @ffi.Size()
  external int return_size;
}

typedef OSSL_PARAM = ossl_param_st;

final class ossl_param_bld_st extends ffi.Opaque {}

typedef OSSL_PARAM_BLD = ossl_param_bld_st;
typedef pem_password_cb = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Char> buf, ffi.Int size, ffi.Int rwflag,
        ffi.Pointer<ffi.Void> userdata)>;

final class ossl_encoder_st extends ffi.Opaque {}

typedef OSSL_ENCODER = ossl_encoder_st;

final class ossl_encoder_ctx_st extends ffi.Opaque {}

typedef OSSL_ENCODER_CTX = ossl_encoder_ctx_st;

final class ossl_decoder_st extends ffi.Opaque {}

typedef OSSL_DECODER = ossl_decoder_st;

final class ossl_decoder_ctx_st extends ffi.Opaque {}

typedef OSSL_DECODER_CTX = ossl_decoder_ctx_st;

final class ossl_self_test_st extends ffi.Opaque {}

typedef OSSL_SELF_TEST = ossl_self_test_st;

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError("Unknown value for idtype_t: $value"),
      };
}

typedef sig_atomic_t = ffi.Int;
typedef Dartsig_atomic_t = int;

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

typedef mcontext_t = ffi.Pointer<__darwin_mcontext64>;

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef stack_t = __darwin_sigaltstack;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef ucontext_t = __darwin_ucontext;
typedef sigset_t = __darwin_sigset_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef siginfo_t = __siginfo;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef sig_tFunction = ffi.Void Function(ffi.Int);
typedef Dartsig_tFunction = void Function(int);
typedef sig_t = ffi.Pointer<ffi.NativeFunction<sig_tFunction>>;

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef rlim_t = __uint64_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

typedef rusage_info_t = ffi.Pointer<ffi.Void>;

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

typedef rusage_info_current = rusage_info_v6;

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

final class wait extends ffi.Opaque {}

typedef ct_rune_t = __darwin_ct_rune_t;
typedef rune_t = __darwin_rune_t;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

enum clockid_t {
  _CLOCK_REALTIME(0),
  _CLOCK_MONOTONIC(6),
  _CLOCK_MONOTONIC_RAW(4),
  _CLOCK_MONOTONIC_RAW_APPROX(5),
  _CLOCK_UPTIME_RAW(8),
  _CLOCK_UPTIME_RAW_APPROX(9),
  _CLOCK_PROCESS_CPUTIME_ID(12),
  _CLOCK_THREAD_CPUTIME_ID(16);

  final int value;
  const clockid_t(this.value);

  static clockid_t fromValue(int value) => switch (value) {
        0 => _CLOCK_REALTIME,
        6 => _CLOCK_MONOTONIC,
        4 => _CLOCK_MONOTONIC_RAW,
        5 => _CLOCK_MONOTONIC_RAW_APPROX,
        8 => _CLOCK_UPTIME_RAW,
        9 => _CLOCK_UPTIME_RAW_APPROX,
        12 => _CLOCK_PROCESS_CPUTIME_ID,
        16 => _CLOCK_THREAD_CPUTIME_ID,
        _ => throw ArgumentError("Unknown value for clockid_t: $value"),
      };
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef wint_t = __darwin_wint_t;

final class ossl_core_handle_st extends ffi.Opaque {}

typedef OSSL_CORE_HANDLE = ossl_core_handle_st;

final class openssl_core_ctx_st extends ffi.Opaque {}

typedef OPENSSL_CORE_CTX = openssl_core_ctx_st;

final class ossl_core_bio_st extends ffi.Opaque {}

typedef OSSL_CORE_BIO = ossl_core_bio_st;
typedef OSSL_thread_stop_handler_fnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> arg);
typedef DartOSSL_thread_stop_handler_fnFunction = void Function(
    ffi.Pointer<ffi.Void> arg);
typedef OSSL_thread_stop_handler_fn
    = ffi.Pointer<ffi.NativeFunction<OSSL_thread_stop_handler_fnFunction>>;
typedef OSSL_provider_init_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<OSSL_DISPATCH> in1,
        ffi.Pointer<ffi.Pointer<OSSL_DISPATCH>> out,
        ffi.Pointer<ffi.Pointer<ffi.Void>> provctx)>;
typedef OSSL_CALLBACK = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_PARAM> params, ffi.Pointer<ffi.Void> arg)>;
typedef OSSL_INOUT_CALLBACK = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_PARAM> in_params,
        ffi.Pointer<OSSL_PARAM> out_params, ffi.Pointer<ffi.Void> arg)>;
typedef OSSL_PASSPHRASE_CALLBACK = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Char> pass,
        ffi.Size pass_size,
        ffi.Pointer<ffi.Size> pass_len,
        ffi.Pointer<OSSL_PARAM> params,
        ffi.Pointer<ffi.Void> arg)>;

final class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef CRYPTO_RWLOCK = ffi.Void;
typedef DartCRYPTO_RWLOCK = void;
typedef sk_void_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a, ffi.Pointer<ffi.Pointer<ffi.Void>> b);
typedef Dartsk_void_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ffi.Void>> a, ffi.Pointer<ffi.Pointer<ffi.Void>> b);
typedef sk_void_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_void_compfuncFunction>>;
typedef sk_void_freefuncFunction = ffi.Void Function(ffi.Pointer<ffi.Void> a);
typedef Dartsk_void_freefuncFunction = void Function(ffi.Pointer<ffi.Void> a);
typedef sk_void_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_void_freefuncFunction>>;
typedef sk_void_copyfuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> a);
typedef sk_void_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_void_copyfuncFunction>>;
typedef CRYPTO_EX_new = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;
typedef CRYPTO_EX_free = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;
typedef CRYPTO_EX_dup = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<CRYPTO_EX_DATA> to,
        ffi.Pointer<CRYPTO_EX_DATA> from,
        ffi.Pointer<ffi.Pointer<ffi.Void>> from_d,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;

final class crypto_threadid_st extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef CRYPTO_THREADID = crypto_threadid_st;
typedef CRYPTO_malloc_fnFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line);
typedef DartCRYPTO_malloc_fnFunction = ffi.Pointer<ffi.Void> Function(
    int num, ffi.Pointer<ffi.Char> file, int line);
typedef CRYPTO_malloc_fn
    = ffi.Pointer<ffi.NativeFunction<CRYPTO_malloc_fnFunction>>;
typedef CRYPTO_realloc_fnFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> addr,
    ffi.Size num,
    ffi.Pointer<ffi.Char> file,
    ffi.Int line);
typedef DartCRYPTO_realloc_fnFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> addr, int num, ffi.Pointer<ffi.Char> file, int line);
typedef CRYPTO_realloc_fn
    = ffi.Pointer<ffi.NativeFunction<CRYPTO_realloc_fnFunction>>;
typedef CRYPTO_free_fnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> addr, ffi.Pointer<ffi.Char> file, ffi.Int line);
typedef DartCRYPTO_free_fnFunction = void Function(
    ffi.Pointer<ffi.Void> addr, ffi.Pointer<ffi.Char> file, int line);
typedef CRYPTO_free_fn
    = ffi.Pointer<ffi.NativeFunction<CRYPTO_free_fnFunction>>;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __opaque;
}

typedef qos_class_t = ffi.UnsignedInt;
typedef Dartqos_class_t = int;

final class pthread_override_s extends ffi.Opaque {}

/// !
/// @typedef pthread_override_t
///
/// @abstract
/// An opaque object representing a QOS class override of a thread.
///
/// @discussion
/// A QOS class override of a target thread expresses that an item of pending
/// work classified with a specific QOS class and relative priority depends on
/// the completion of the work currently being executed by the thread (e.g. due
/// to ordering requirements).
///
/// While overrides are in effect, the target thread will execute at the maximum
/// QOS class and relative priority of all overrides and of the QOS class
/// requested by the thread itself.
///
/// A QOS class override does not modify the target thread's requested QOS class
/// value and the effect of an override is not visible to the qos_class_self()
/// and pthread_get_qos_class_np() interfaces.
typedef pthread_override_t = ffi.Pointer<pthread_override_s>;
typedef mach_port_t = __darwin_mach_port_t;
typedef pthread_jit_write_callback_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx);
typedef Dartpthread_jit_write_callback_tFunction = int Function(
    ffi.Pointer<ffi.Void> ctx);

/// !
/// @typedef pthread_jit_write_callback_t
/// The type of a function that can be supplied to {@link
/// pthread_jit_write_with_callback_np} to write to the MAP_JIT region while it
/// is writeable.
///
/// @param ctx
/// A pointer to context that will be passed through to the callback function.
///
/// @result
/// A result code to be returned to the caller of @{link
/// pthread_jit_write_with_callback_np}.  The system does not interpret/act on
/// the value of this result.
typedef pthread_jit_write_callback_t
    = ffi.Pointer<ffi.NativeFunction<pthread_jit_write_callback_tFunction>>;
typedef CRYPTO_ONCE = pthread_once_t;
typedef CRYPTO_THREAD_LOCAL = pthread_key_t;
typedef CRYPTO_THREAD_ID = pthread_t;
typedef __gnuc_va_list = __builtin_va_list;
typedef va_list1 = __builtin_va_list;
typedef va_list2 = __darwin_va_list;
typedef OSSL_INDICATOR_CALLBACK = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Char> desc,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_core_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_get_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> prov, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_core_thread_start_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov,
        OSSL_thread_stop_handler_fn handfn, ffi.Pointer<ffi.Void> arg)>;
typedef OSSL_FUNC_core_get_libctx_fn = ffi.NativeFunction<
    ffi.Pointer<OPENSSL_CORE_CTX> Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_new_error_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_set_error_debug_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> prov,
        ffi.Pointer<ffi.Char> file, ffi.Int line, ffi.Pointer<ffi.Char> func)>;
typedef OSSL_FUNC_core_vset_error_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> prov, ffi.Uint32 reason,
        ffi.Pointer<ffi.Char> fmt, va_list2 args)>;
typedef OSSL_FUNC_core_set_error_mark_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_clear_last_error_mark_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_pop_error_to_mark_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_core_obj_add_sigid_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> prov,
        ffi.Pointer<ffi.Char> sign_name,
        ffi.Pointer<ffi.Char> digest_name,
        ffi.Pointer<ffi.Char> pkey_name)>;
typedef OSSL_FUNC_core_obj_create_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> prov,
        ffi.Pointer<ffi.Char> oid,
        ffi.Pointer<ffi.Char> sn,
        ffi.Pointer<ffi.Char> ln)>;
typedef OSSL_FUNC_CRYPTO_malloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_zalloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_free_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_clear_free_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> ptr, ffi.Size num,
        ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_realloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> addr, ffi.Size num,
        ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_clear_realloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> addr, ffi.Size old_num,
        ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_secure_malloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_secure_zalloc_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Size num, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_secure_free_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_secure_clear_free_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> ptr, ffi.Size num,
        ffi.Pointer<ffi.Char> file, ffi.Int line)>;
typedef OSSL_FUNC_CRYPTO_secure_allocated_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> ptr)>;
typedef OSSL_FUNC_OPENSSL_cleanse_fn = ffi
    .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ptr, ffi.Size len)>;
typedef OSSL_FUNC_BIO_new_file_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_CORE_BIO> Function(
        ffi.Pointer<ffi.Char> filename, ffi.Pointer<ffi.Char> mode)>;
typedef OSSL_FUNC_BIO_new_membuf_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_CORE_BIO> Function(
        ffi.Pointer<ffi.Void> buf, ffi.Int len)>;
typedef OSSL_FUNC_BIO_read_ex_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio, ffi.Pointer<ffi.Void> data,
        ffi.Size data_len, ffi.Pointer<ffi.Size> bytes_read)>;
typedef OSSL_FUNC_BIO_write_ex_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio, ffi.Pointer<ffi.Void> data,
        ffi.Size data_len, ffi.Pointer<ffi.Size> written)>;
typedef OSSL_FUNC_BIO_gets_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio, ffi.Pointer<ffi.Char> buf,
        ffi.Int size)>;
typedef OSSL_FUNC_BIO_puts_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_BIO> bio, ffi.Pointer<ffi.Char> str)>;
typedef OSSL_FUNC_BIO_up_ref_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio)>;
typedef OSSL_FUNC_BIO_free_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio)>;
typedef OSSL_FUNC_BIO_vprintf_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio,
        ffi.Pointer<ffi.Char> format, va_list2 args)>;
typedef OSSL_FUNC_BIO_vsnprintf_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Char> buf, ffi.Size n,
        ffi.Pointer<ffi.Char> fmt, va_list2 args)>;
typedef OSSL_FUNC_BIO_ctrl_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_BIO> bio, ffi.Int cmd, ffi.Long num,
        ffi.Pointer<ffi.Void> ptr)>;
typedef OSSL_FUNC_indicator_cb_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OPENSSL_CORE_CTX> ctx,
        ffi.Pointer<ffi.Pointer<OSSL_INDICATOR_CALLBACK>> cb)>;
typedef OSSL_FUNC_self_test_cb_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<OPENSSL_CORE_CTX> ctx,
        ffi.Pointer<ffi.Pointer<OSSL_CALLBACK>> cb,
        ffi.Pointer<ffi.Pointer<ffi.Void>> cbarg)>;
typedef OSSL_FUNC_get_entropy_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pout,
        ffi.Int entropy,
        ffi.Size min_len,
        ffi.Size max_len)>;
typedef OSSL_FUNC_get_user_entropy_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pout,
        ffi.Int entropy,
        ffi.Size min_len,
        ffi.Size max_len)>;
typedef OSSL_FUNC_cleanup_entropy_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.UnsignedChar> buf, ffi.Size len)>;
typedef OSSL_FUNC_cleanup_user_entropy_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.UnsignedChar> buf, ffi.Size len)>;
typedef OSSL_FUNC_get_nonce_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pout,
        ffi.Size min_len,
        ffi.Size max_len,
        ffi.Pointer<ffi.Void> salt,
        ffi.Size salt_len)>;
typedef OSSL_FUNC_get_user_nonce_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pout,
        ffi.Size min_len,
        ffi.Size max_len,
        ffi.Pointer<ffi.Void> salt,
        ffi.Size salt_len)>;
typedef OSSL_FUNC_cleanup_nonce_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.UnsignedChar> buf, ffi.Size len)>;
typedef OSSL_FUNC_cleanup_user_nonce_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<ffi.UnsignedChar> buf, ffi.Size len)>;
typedef OSSL_FUNC_provider_register_child_cb_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> provider,
                        ffi.Pointer<ffi.Void> cbdata)>>
            create_cb,
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> provider,
                        ffi.Pointer<ffi.Void> cbdata)>>
            remove_cb,
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<ffi.Char> props,
                        ffi.Pointer<ffi.Void> cbdata)>>
            global_props_cb,
        ffi.Pointer<ffi.Void> cbdata)>;
typedef OSSL_FUNC_provider_deregister_child_cb_fn = ffi
    .NativeFunction<ffi.Void Function(ffi.Pointer<OSSL_CORE_HANDLE> handle)>;
typedef OSSL_FUNC_provider_name_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_provider_get0_provider_ctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_provider_get0_dispatch_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_DISPATCH> Function(ffi.Pointer<OSSL_CORE_HANDLE> prov)>;
typedef OSSL_FUNC_provider_up_ref_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov, ffi.Int activate)>;
typedef OSSL_FUNC_provider_free_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<OSSL_CORE_HANDLE> prov, ffi.Int deactivate)>;
typedef OSSL_FUNC_provider_teardown_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_provider_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_provider_get_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_provider_query_operation_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_ALGORITHM> Function(ffi.Pointer<ffi.Void> provctx,
        ffi.Int operation_id, ffi.Pointer<ffi.Int> no_store)>;
typedef OSSL_FUNC_provider_unquery_operation_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<OSSL_ALGORITHM>)>;
typedef OSSL_FUNC_provider_get_reason_strings_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_ITEM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_provider_get_capabilities_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> provctx,
        ffi.Pointer<ffi.Char> capability,
        ffi.Pointer<OSSL_CALLBACK> cb,
        ffi.Pointer<ffi.Void> arg)>;
typedef OSSL_FUNC_provider_self_test_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_digest_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_digest_init_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> dctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_digest_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> dctx,
        ffi.Pointer<ffi.UnsignedChar> in1, ffi.Size inl)>;
typedef OSSL_FUNC_digest_final_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> dctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsz)>;
typedef OSSL_FUNC_digest_squeeze_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> dctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsz)>;
typedef OSSL_FUNC_digest_digest_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> provctx,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inl,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsz)>;
typedef OSSL_FUNC_digest_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> dctx)>;
typedef OSSL_FUNC_digest_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> dctx)>;
typedef OSSL_FUNC_digest_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_digest_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_digest_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_digest_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_digest_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> dctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_digest_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> dctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_cipher_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_cipher_encrypt_init_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx,
        ffi.Pointer<ffi.UnsignedChar> key,
        ffi.Size keylen,
        ffi.Pointer<ffi.UnsignedChar> iv,
        ffi.Size ivlen,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_cipher_decrypt_init_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx,
        ffi.Pointer<ffi.UnsignedChar> key,
        ffi.Size keylen,
        ffi.Pointer<ffi.UnsignedChar> iv,
        ffi.Size ivlen,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_cipher_update_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsize,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inl)>;
typedef OSSL_FUNC_cipher_final_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsize)>;
typedef OSSL_FUNC_cipher_cipher_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsize,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inl)>;
typedef OSSL_FUNC_cipher_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> cctx)>;
typedef OSSL_FUNC_cipher_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> cctx)>;
typedef OSSL_FUNC_cipher_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_cipher_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_cipher_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> cctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_cipher_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_cipher_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> cctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_cipher_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> cctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_mac_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_mac_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> src)>;
typedef OSSL_FUNC_mac_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> mctx)>;
typedef OSSL_FUNC_mac_init_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> mctx,
        ffi.Pointer<ffi.UnsignedChar> key,
        ffi.Size keylen,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_mac_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> mctx,
        ffi.Pointer<ffi.UnsignedChar> in1, ffi.Size inl)>;
typedef OSSL_FUNC_mac_final_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> mctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outl,
        ffi.Size outsize)>;
typedef OSSL_FUNC_mac_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_mac_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> mctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_mac_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> mctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_mac_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_mac_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> mctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_mac_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> mctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kdf_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kdf_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> src)>;
typedef OSSL_FUNC_kdf_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> kctx)>;
typedef OSSL_FUNC_kdf_reset_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> kctx)>;
typedef OSSL_FUNC_kdf_derive_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> kctx,
        ffi.Pointer<ffi.UnsignedChar> key,
        ffi.Size keylen,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kdf_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kdf_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> kctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kdf_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> kctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kdf_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kdf_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> kctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kdf_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> kctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_rand_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx,
        ffi.Pointer<ffi.Void> parent, ffi.Pointer<OSSL_DISPATCH> parent_calls)>;
typedef OSSL_FUNC_rand_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> vctx)>;
typedef OSSL_FUNC_rand_instantiate_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vdrbg,
        ffi.UnsignedInt strength,
        ffi.Int prediction_resistance,
        ffi.Pointer<ffi.UnsignedChar> pstr,
        ffi.Size pstr_len,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_rand_uninstantiate_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> vdrbg)>;
typedef OSSL_FUNC_rand_generate_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Size outlen,
        ffi.UnsignedInt strength,
        ffi.Int prediction_resistance,
        ffi.Pointer<ffi.UnsignedChar> addin,
        ffi.Size addin_len)>;
typedef OSSL_FUNC_rand_reseed_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx,
        ffi.Int prediction_resistance,
        ffi.Pointer<ffi.UnsignedChar> ent,
        ffi.Size ent_len,
        ffi.Pointer<ffi.UnsignedChar> addin,
        ffi.Size addin_len)>;
typedef OSSL_FUNC_rand_nonce_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<ffi.Void> vctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.UnsignedInt strength,
        ffi.Size min_noncelen,
        ffi.Size max_noncelen)>;
typedef OSSL_FUNC_rand_enable_locking_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> vctx)>;
typedef OSSL_FUNC_rand_lock_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> vctx)>;
typedef OSSL_FUNC_rand_unlock_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> vctx)>;
typedef OSSL_FUNC_rand_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_rand_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_rand_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_rand_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_rand_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_rand_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> vctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_rand_set_callbacks_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> vctx,
        ffi.Pointer<OSSL_INOUT_CALLBACK> get_entropy,
        ffi.Pointer<OSSL_CALLBACK> cleanup_entropy,
        ffi.Pointer<OSSL_INOUT_CALLBACK> get_nonce,
        ffi.Pointer<OSSL_CALLBACK> cleanup_nonce,
        ffi.Pointer<ffi.Void> arg)>;
typedef OSSL_FUNC_rand_verify_zeroization_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> vctx)>;
typedef OSSL_FUNC_rand_get_seed_fn = ffi.NativeFunction<
    ffi.Size Function(
        ffi.Pointer<ffi.Void> vctx,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> buffer,
        ffi.Int entropy,
        ffi.Size min_len,
        ffi.Size max_len,
        ffi.Int prediction_resistance,
        ffi.Pointer<ffi.UnsignedChar> adin,
        ffi.Size adin_len)>;
typedef OSSL_FUNC_rand_clear_seed_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> vctx,
        ffi.Pointer<ffi.UnsignedChar> buffer, ffi.Size b_len)>;
typedef OSSL_FUNC_keymgmt_new_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keymgmt_gen_init_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx,
        ffi.Int selection, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_gen_set_template_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> genctx, ffi.Pointer<ffi.Void> templ)>;
typedef OSSL_FUNC_keymgmt_gen_set_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> genctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_gen_settable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> genctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keymgmt_gen_get_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> genctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_gen_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> genctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keymgmt_gen_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> genctx,
        ffi.Pointer<OSSL_CALLBACK> cb, ffi.Pointer<ffi.Void> cbarg)>;
typedef OSSL_FUNC_keymgmt_gen_cleanup_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> genctx)>;
typedef OSSL_FUNC_keymgmt_load_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> reference, ffi.Size reference_sz)>;
typedef OSSL_FUNC_keymgmt_free_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> keydata)>;
typedef OSSL_FUNC_keymgmt_get_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> keydata, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keymgmt_set_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> keydata, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_settable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keymgmt_query_operation_name_fn
    = ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int operation_id)>;
typedef OSSL_FUNC_keymgmt_has_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> keydata, ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_validate_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> keydata, ffi.Int selection, ffi.Int checktype)>;
typedef OSSL_FUNC_keymgmt_match_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> keydata1,
        ffi.Pointer<ffi.Void> keydata2, ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_import_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> keydata, ffi.Int selection,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keymgmt_import_types_fn
    = ffi.NativeFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_export_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> keydata, ffi.Int selection,
        ffi.Pointer<OSSL_CALLBACK> param_cb, ffi.Pointer<ffi.Void> cbarg)>;
typedef OSSL_FUNC_keymgmt_export_types_fn
    = ffi.NativeFunction<ffi.Pointer<OSSL_PARAM> Function(ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_dup_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> keydata_from, ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_import_types_ex_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Int selection)>;
typedef OSSL_FUNC_keymgmt_export_types_ex_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Int selection)>;
typedef OSSL_FUNC_keyexch_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keyexch_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keyexch_derive_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> secret,
        ffi.Pointer<ffi.Size> secretlen,
        ffi.Size outlen)>;
typedef OSSL_FUNC_keyexch_set_peer_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey)>;
typedef OSSL_FUNC_keyexch_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_keyexch_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_keyexch_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keyexch_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_keyexch_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_keyexch_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_signature_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Pointer<ffi.Char> propq)>;
typedef OSSL_FUNC_signature_sign_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_sign_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Pointer<ffi.Size> siglen,
        ffi.Size sigsize,
        ffi.Pointer<ffi.UnsignedChar> tbs,
        ffi.Size tbslen)>;
typedef OSSL_FUNC_signature_sign_message_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_sign_message_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> in1, ffi.Size inlen)>;
typedef OSSL_FUNC_signature_sign_message_final_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Pointer<ffi.Size> siglen,
        ffi.Size sigsize)>;
typedef OSSL_FUNC_signature_verify_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_verify_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Size siglen,
        ffi.Pointer<ffi.UnsignedChar> tbs,
        ffi.Size tbslen)>;
typedef OSSL_FUNC_signature_verify_message_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_verify_message_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> in1, ffi.Size inlen)>;
typedef OSSL_FUNC_signature_verify_message_final_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_signature_verify_recover_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_verify_recover_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> rout,
        ffi.Pointer<ffi.Size> routlen,
        ffi.Size routsize,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Size siglen)>;
typedef OSSL_FUNC_signature_digest_sign_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> mdname,
        ffi.Pointer<ffi.Void> provkey, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_digest_sign_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> data, ffi.Size datalen)>;
typedef OSSL_FUNC_signature_digest_sign_final_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Pointer<ffi.Size> siglen,
        ffi.Size sigsize)>;
typedef OSSL_FUNC_signature_digest_sign_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sigret,
        ffi.Pointer<ffi.Size> siglen,
        ffi.Size sigsize,
        ffi.Pointer<ffi.UnsignedChar> tbs,
        ffi.Size tbslen)>;
typedef OSSL_FUNC_signature_digest_verify_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> mdname,
        ffi.Pointer<ffi.Void> provkey, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_digest_verify_update_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> data, ffi.Size datalen)>;
typedef OSSL_FUNC_signature_digest_verify_final_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig, ffi.Size siglen)>;
typedef OSSL_FUNC_signature_digest_verify_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> sig,
        ffi.Size siglen,
        ffi.Pointer<ffi.UnsignedChar> tbs,
        ffi.Size tbslen)>;
typedef OSSL_FUNC_signature_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_signature_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_signature_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_signature_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_signature_get_ctx_md_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_gettable_ctx_md_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_signature_set_ctx_md_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_signature_settable_ctx_md_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_signature_query_key_types_fn
    = ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>;
typedef OSSL_FUNC_asym_cipher_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_asym_cipher_encrypt_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_asym_cipher_encrypt_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outlen,
        ffi.Size outsize,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inlen)>;
typedef OSSL_FUNC_asym_cipher_decrypt_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_asym_cipher_decrypt_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outlen,
        ffi.Size outsize,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inlen)>;
typedef OSSL_FUNC_asym_cipher_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_asym_cipher_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_asym_cipher_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_asym_cipher_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_asym_cipher_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_asym_cipher_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kem_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kem_encapsulate_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_auth_encapsulate_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<ffi.Void> authprivkey, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_encapsulate_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outlen,
        ffi.Pointer<ffi.UnsignedChar> secret,
        ffi.Pointer<ffi.Size> secretlen)>;
typedef OSSL_FUNC_kem_decapsulate_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_auth_decapsulate_init_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provkey,
        ffi.Pointer<ffi.Void> authpubkey, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_decapsulate_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.UnsignedChar> out,
        ffi.Pointer<ffi.Size> outlen,
        ffi.Pointer<ffi.UnsignedChar> in1,
        ffi.Size inlen)>;
typedef OSSL_FUNC_kem_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_kem_dupctx_fn = ffi
    .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_kem_get_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_gettable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_kem_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_kem_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_encoder_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_encoder_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_encoder_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_encoder_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_encoder_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_encoder_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_encoder_does_selection_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> provctx, ffi.Int selection)>;
typedef OSSL_FUNC_encoder_encode_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<OSSL_CORE_BIO> out,
        ffi.Pointer<ffi.Void> obj_raw,
        ffi.Pointer<OSSL_PARAM> obj_abstract,
        ffi.Int selection,
        ffi.Pointer<OSSL_PASSPHRASE_CALLBACK> cb,
        ffi.Pointer<ffi.Void> cbarg)>;
typedef OSSL_FUNC_encoder_import_object_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ctx, ffi.Int selection,
        ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_encoder_free_object_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> obj)>;
typedef OSSL_FUNC_decoder_newctx_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_decoder_freectx_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>;
typedef OSSL_FUNC_decoder_get_params_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_decoder_gettable_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_decoder_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_decoder_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_decoder_does_selection_fn = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> provctx, ffi.Int selection)>;
typedef OSSL_FUNC_decoder_decode_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<OSSL_CORE_BIO> in1,
        ffi.Int selection,
        ffi.Pointer<OSSL_CALLBACK> data_cb,
        ffi.Pointer<ffi.Void> data_cbarg,
        ffi.Pointer<OSSL_PASSPHRASE_CALLBACK> pw_cb,
        ffi.Pointer<ffi.Void> pw_cbarg)>;
typedef OSSL_FUNC_decoder_export_object_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> ctx,
        ffi.Pointer<ffi.Void> objref,
        ffi.Size objref_sz,
        ffi.Pointer<OSSL_CALLBACK> export_cb,
        ffi.Pointer<ffi.Void> export_cbarg)>;
typedef OSSL_FUNC_store_open_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Pointer<ffi.Char> uri)>;
typedef OSSL_FUNC_store_attach_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> provctx, ffi.Pointer<OSSL_CORE_BIO> in1)>;
typedef OSSL_FUNC_store_settable_ctx_params_fn = ffi.NativeFunction<
    ffi.Pointer<OSSL_PARAM> Function(ffi.Pointer<ffi.Void> provctx)>;
typedef OSSL_FUNC_store_set_ctx_params_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> loaderctx, ffi.Pointer<OSSL_PARAM> params)>;
typedef OSSL_FUNC_store_load_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> loaderctx,
        ffi.Pointer<OSSL_CALLBACK> object_cb,
        ffi.Pointer<ffi.Void> object_cbarg,
        ffi.Pointer<OSSL_PASSPHRASE_CALLBACK> pw_cb,
        ffi.Pointer<ffi.Void> pw_cbarg)>;
typedef OSSL_FUNC_store_eof_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> loaderctx)>;
typedef OSSL_FUNC_store_close_fn
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> loaderctx)>;
typedef OSSL_FUNC_store_export_object_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> loaderctx,
        ffi.Pointer<ffi.Void> objref,
        ffi.Size objref_sz,
        ffi.Pointer<OSSL_CALLBACK> export_cb,
        ffi.Pointer<ffi.Void> export_cbarg)>;
typedef OSSL_FUNC_store_delete_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> provctx,
        ffi.Pointer<ffi.Char> uri,
        ffi.Pointer<OSSL_PARAM> params,
        ffi.Pointer<OSSL_PASSPHRASE_CALLBACK> pw_cb,
        ffi.Pointer<ffi.Void> pw_cbarg)>;
typedef OSSL_FUNC_store_open_ex_fn = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> provctx,
        ffi.Pointer<ffi.Char> uri,
        ffi.Pointer<OSSL_PARAM> params,
        ffi.Pointer<OSSL_PASSPHRASE_CALLBACK> pw_cb,
        ffi.Pointer<ffi.Void> pw_cbarg)>;

final class bio_addr_st extends ffi.Opaque {}

typedef BIO_ADDR = bio_addr_st;

final class bio_addrinfo_st extends ffi.Opaque {}

typedef BIO_ADDRINFO = bio_addrinfo_st;
typedef BIO_callback_fnFunction = ffi.Long Function(
    ffi.Pointer<BIO> b,
    ffi.Int oper,
    ffi.Pointer<ffi.Char> argp,
    ffi.Int argi,
    ffi.Long argl,
    ffi.Long ret);
typedef DartBIO_callback_fnFunction = int Function(ffi.Pointer<BIO> b, int oper,
    ffi.Pointer<ffi.Char> argp, int argi, int argl, int ret);
typedef BIO_callback_fn
    = ffi.Pointer<ffi.NativeFunction<BIO_callback_fnFunction>>;
typedef BIO_callback_fn_exFunction = ffi.Long Function(
    ffi.Pointer<BIO> b,
    ffi.Int oper,
    ffi.Pointer<ffi.Char> argp,
    ffi.Size len,
    ffi.Int argi,
    ffi.Long argl,
    ffi.Int ret,
    ffi.Pointer<ffi.Size> processed);
typedef DartBIO_callback_fn_exFunction = int Function(
    ffi.Pointer<BIO> b,
    int oper,
    ffi.Pointer<ffi.Char> argp,
    int len,
    int argi,
    int argl,
    int ret,
    ffi.Pointer<ffi.Size> processed);
typedef BIO_callback_fn_ex
    = ffi.Pointer<ffi.NativeFunction<BIO_callback_fn_exFunction>>;

final class bio_method_st extends ffi.Opaque {}

typedef BIO_METHOD = bio_method_st;
typedef BIO_info_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>;
typedef bio_info_cb = BIO_info_cb;

final class stack_st_BIO extends ffi.Opaque {}

typedef sk_BIO_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<BIO>> a, ffi.Pointer<ffi.Pointer<BIO>> b);
typedef Dartsk_BIO_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<BIO>> a, ffi.Pointer<ffi.Pointer<BIO>> b);
typedef sk_BIO_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_BIO_compfuncFunction>>;
typedef sk_BIO_freefuncFunction = ffi.Void Function(ffi.Pointer<BIO> a);
typedef Dartsk_BIO_freefuncFunction = void Function(ffi.Pointer<BIO> a);
typedef sk_BIO_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_BIO_freefuncFunction>>;
typedef sk_BIO_copyfuncFunction = ffi.Pointer<BIO> Function(ffi.Pointer<BIO> a);
typedef sk_BIO_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_BIO_copyfuncFunction>>;
typedef asn1_ps_func = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<BIO> b,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
        ffi.Pointer<ffi.Int> plen,
        ffi.Pointer<ffi.Void> parg)>;
typedef BIO_dgram_sctp_notification_handler_fnFunction = ffi.Void Function(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Void> buf);
typedef DartBIO_dgram_sctp_notification_handler_fnFunction = void Function(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Void> buf);
typedef BIO_dgram_sctp_notification_handler_fn = ffi.Pointer<
    ffi.NativeFunction<BIO_dgram_sctp_notification_handler_fnFunction>>;

final class bio_msg_st extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int data_len;

  external ffi.Pointer<BIO_ADDR> peer;

  external ffi.Pointer<BIO_ADDR> local;

  @ffi.Uint64()
  external int flags;
}

typedef BIO_MSG = bio_msg_st;

final class bio_mmsg_cb_args_st extends ffi.Struct {
  external ffi.Pointer<BIO_MSG> msg;

  @ffi.Size()
  external int stride;

  @ffi.Size()
  external int num_msg;

  @ffi.Uint64()
  external int flags;

  external ffi.Pointer<ffi.Size> msgs_processed;
}

typedef BIO_MMSG_CB_ARGS = bio_mmsg_cb_args_st;

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int()
  external int fd;

  external ffi.Pointer<ffi.Void> custom;

  @ffi.UintPtr()
  external int custom_ui;

  external ffi.Pointer<SSL> ssl;
}

final class bio_poll_descriptor_st extends ffi.Struct {
  @ffi.Uint32()
  external int type;

  external UnnamedUnion2 value;
}

typedef BIO_POLL_DESCRIPTOR = bio_poll_descriptor_st;

enum BIO_hostserv_priorities {
  BIO_PARSE_PRIO_HOST(0),
  BIO_PARSE_PRIO_SERV(1);

  final int value;
  const BIO_hostserv_priorities(this.value);

  static BIO_hostserv_priorities fromValue(int value) => switch (value) {
        0 => BIO_PARSE_PRIO_HOST,
        1 => BIO_PARSE_PRIO_SERV,
        _ => throw ArgumentError(
            "Unknown value for BIO_hostserv_priorities: $value"),
      };
}

enum BIO_lookup_type {
  BIO_LOOKUP_CLIENT(0),
  BIO_LOOKUP_SERVER(1);

  final int value;
  const BIO_lookup_type(this.value);

  static BIO_lookup_type fromValue(int value) => switch (value) {
        0 => BIO_LOOKUP_CLIENT,
        1 => BIO_LOOKUP_SERVER,
        _ => throw ArgumentError("Unknown value for BIO_lookup_type: $value"),
      };
}

final class hostent extends ffi.Opaque {}

final class BIO_sock_info_u extends ffi.Union {
  external ffi.Pointer<BIO_ADDR> addr;
}

enum BIO_sock_info_type {
  BIO_SOCK_INFO_ADDRESS(0);

  final int value;
  const BIO_sock_info_type(this.value);

  static BIO_sock_info_type fromValue(int value) => switch (value) {
        0 => BIO_SOCK_INFO_ADDRESS,
        _ =>
          throw ArgumentError("Unknown value for BIO_sock_info_type: $value"),
      };
}

final class stack_st_X509_ALGOR extends ffi.Opaque {}

typedef sk_X509_ALGOR_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> a,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> b);
typedef Dartsk_X509_ALGOR_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> a,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> b);
typedef sk_X509_ALGOR_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_compfuncFunction>>;
typedef sk_X509_ALGOR_freefuncFunction = ffi.Void Function(
    ffi.Pointer<X509_ALGOR> a);
typedef Dartsk_X509_ALGOR_freefuncFunction = void Function(
    ffi.Pointer<X509_ALGOR> a);
typedef sk_X509_ALGOR_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_freefuncFunction>>;
typedef sk_X509_ALGOR_copyfuncFunction = ffi.Pointer<X509_ALGOR> Function(
    ffi.Pointer<X509_ALGOR> a);
typedef sk_X509_ALGOR_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_copyfuncFunction>>;

final class ASN1_ENCODING_st extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> enc;

  @ffi.Long()
  external int len;

  @ffi.Int()
  external int modified;
}

typedef ASN1_ENCODING = ASN1_ENCODING_st;

final class stack_st_ASN1_STRING_TABLE extends ffi.Opaque {}

typedef sk_ASN1_STRING_TABLE_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> a,
    ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> b);
typedef Dartsk_ASN1_STRING_TABLE_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> a,
    ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> b);
typedef sk_ASN1_STRING_TABLE_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_compfuncFunction>>;
typedef sk_ASN1_STRING_TABLE_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_STRING_TABLE> a);
typedef Dartsk_ASN1_STRING_TABLE_freefuncFunction = void Function(
    ffi.Pointer<ASN1_STRING_TABLE> a);
typedef sk_ASN1_STRING_TABLE_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_freefuncFunction>>;
typedef sk_ASN1_STRING_TABLE_copyfuncFunction = ffi.Pointer<ASN1_STRING_TABLE>
    Function(ffi.Pointer<ASN1_STRING_TABLE> a);
typedef sk_ASN1_STRING_TABLE_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_copyfuncFunction>>;

final class ASN1_TEMPLATE_st extends ffi.Opaque {}

typedef ASN1_TEMPLATE = ASN1_TEMPLATE_st;

final class ASN1_TLC_st extends ffi.Opaque {}

typedef ASN1_TLC = ASN1_TLC_st;
typedef d2i_of_void = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Long)>;
typedef i2d_of_void = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>;
typedef ASN1_ITEM_EXP = ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>;

final class stack_st_ASN1_TYPE extends ffi.Opaque {}

typedef sk_ASN1_TYPE_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> b);
typedef Dartsk_ASN1_TYPE_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> b);
typedef sk_ASN1_TYPE_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_compfuncFunction>>;
typedef sk_ASN1_TYPE_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_TYPE> a);
typedef Dartsk_ASN1_TYPE_freefuncFunction = void Function(
    ffi.Pointer<ASN1_TYPE> a);
typedef sk_ASN1_TYPE_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_freefuncFunction>>;
typedef sk_ASN1_TYPE_copyfuncFunction = ffi.Pointer<ASN1_TYPE> Function(
    ffi.Pointer<ASN1_TYPE> a);
typedef sk_ASN1_TYPE_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_copyfuncFunction>>;
typedef ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;

final class BIT_STRING_BITNAME_st extends ffi.Struct {
  @ffi.Int()
  external int bitnum;

  external ffi.Pointer<ffi.Char> lname;

  external ffi.Pointer<ffi.Char> sname;
}

typedef BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;

final class stack_st_ASN1_OBJECT extends ffi.Opaque {}

typedef sk_ASN1_OBJECT_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> b);
typedef Dartsk_ASN1_OBJECT_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> b);
typedef sk_ASN1_OBJECT_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_compfuncFunction>>;
typedef sk_ASN1_OBJECT_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_OBJECT> a);
typedef Dartsk_ASN1_OBJECT_freefuncFunction = void Function(
    ffi.Pointer<ASN1_OBJECT> a);
typedef sk_ASN1_OBJECT_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_freefuncFunction>>;
typedef sk_ASN1_OBJECT_copyfuncFunction = ffi.Pointer<ASN1_OBJECT> Function(
    ffi.Pointer<ASN1_OBJECT> a);
typedef sk_ASN1_OBJECT_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_copyfuncFunction>>;

final class stack_st_ASN1_INTEGER extends ffi.Opaque {}

typedef sk_ASN1_INTEGER_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> b);
typedef Dartsk_ASN1_INTEGER_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> b);
typedef sk_ASN1_INTEGER_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_compfuncFunction>>;
typedef sk_ASN1_INTEGER_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_INTEGER> a);
typedef Dartsk_ASN1_INTEGER_freefuncFunction = void Function(
    ffi.Pointer<ASN1_INTEGER> a);
typedef sk_ASN1_INTEGER_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_freefuncFunction>>;
typedef sk_ASN1_INTEGER_copyfuncFunction = ffi.Pointer<ASN1_INTEGER> Function(
    ffi.Pointer<ASN1_INTEGER> a);
typedef sk_ASN1_INTEGER_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_copyfuncFunction>>;

final class stack_st_ASN1_UTF8STRING extends ffi.Opaque {}

typedef sk_ASN1_UTF8STRING_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> b);
typedef Dartsk_ASN1_UTF8STRING_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> b);
typedef sk_ASN1_UTF8STRING_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_compfuncFunction>>;
typedef sk_ASN1_UTF8STRING_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_UTF8STRING> a);
typedef Dartsk_ASN1_UTF8STRING_freefuncFunction = void Function(
    ffi.Pointer<ASN1_UTF8STRING> a);
typedef sk_ASN1_UTF8STRING_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_freefuncFunction>>;
typedef sk_ASN1_UTF8STRING_copyfuncFunction = ffi.Pointer<ASN1_UTF8STRING>
    Function(ffi.Pointer<ASN1_UTF8STRING> a);
typedef sk_ASN1_UTF8STRING_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_copyfuncFunction>>;

final class stack_st_ASN1_GENERALSTRING extends ffi.Opaque {}

typedef sk_ASN1_GENERALSTRING_compfuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> b);
typedef Dartsk_ASN1_GENERALSTRING_compfuncFunction = int Function(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> b);
typedef sk_ASN1_GENERALSTRING_compfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_compfuncFunction>>;
typedef sk_ASN1_GENERALSTRING_freefuncFunction = ffi.Void Function(
    ffi.Pointer<ASN1_GENERALSTRING> a);
typedef Dartsk_ASN1_GENERALSTRING_freefuncFunction = void Function(
    ffi.Pointer<ASN1_GENERALSTRING> a);
typedef sk_ASN1_GENERALSTRING_freefunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_freefuncFunction>>;
typedef sk_ASN1_GENERALSTRING_copyfuncFunction = ffi.Pointer<ASN1_GENERALSTRING>
    Function(ffi.Pointer<ASN1_GENERALSTRING> a);
typedef sk_ASN1_GENERALSTRING_copyfunc
    = ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_copyfuncFunction>>;

final class obj_name_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int alias;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> data;
}

typedef OBJ_NAME = obj_name_st;

final class EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> out;

  external ffi.Pointer<ffi.UnsignedChar> inp;

  @ffi.Size()
  external int len;

  @ffi.UnsignedInt()
  external int interleave;
}

final class evp_cipher_info_st extends ffi.Struct {
  external ffi.Pointer<EVP_CIPHER> cipher;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> iv;
}

typedef EVP_CIPHER_INFO = evp_cipher_info_st;
typedef EVP_PBE_KEYGEN = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<EVP_CIPHER_CTX> ctx,
        ffi.Pointer<ffi.Char> pass,
        ffi.Int passlen,
        ffi.Pointer<ASN1_TYPE> param,
        ffi.Pointer<EVP_CIPHER> cipher,
        ffi.Pointer<EVP_MD> md,
        ffi.Int en_de)>;
typedef EVP_PBE_KEYGEN_EX = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<EVP_CIPHER_CTX> ctx,
        ffi.Pointer<ffi.Char> pass,
        ffi.Int passlen,
        ffi.Pointer<ASN1_TYPE> param,
        ffi.Pointer<EVP_CIPHER> cipher,
        ffi.Pointer<EVP_MD> md,
        ffi.Int en_de,
        ffi.Pointer<OSSL_LIB_CTX> libctx,
        ffi.Pointer<ffi.Char> propq)>;
typedef EVP_PKEY_gen_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>;

/// Enum for the point conversion form as defined in X9.62 (ECDSA)
/// for the encoding of a elliptic curve point (x,y)
enum point_conversion_form_t {
  /// the point is encoded as z||x, where the octet z specifies
  /// which solution of the quadratic equation y is
  POINT_CONVERSION_COMPRESSED(2),

  /// the point is encoded as z||x||y, where z is the octet 0x04
  POINT_CONVERSION_UNCOMPRESSED(4),

  /// the point is encoded as z||x||y, where the octet z specifies
  /// which solution of the quadratic equation y is
  POINT_CONVERSION_HYBRID(6);

  final int value;
  const point_conversion_form_t(this.value);

  static point_conversion_form_t fromValue(int value) => switch (value) {
        2 => POINT_CONVERSION_COMPRESSED,
        4 => POINT_CONVERSION_UNCOMPRESSED,
        6 => POINT_CONVERSION_HYBRID,
        _ => throw ArgumentError(
            "Unknown value for point_conversion_form_t: $value"),
      };
}

final class ec_method_st extends ffi.Opaque {}

typedef EC_METHOD = ec_method_st;

final class ec_group_st extends ffi.Opaque {}

typedef EC_GROUP = ec_group_st;

final class ec_point_st extends ffi.Opaque {}

typedef EC_POINT = ec_point_st;

final class ecpk_parameters_st extends ffi.Opaque {}

typedef ECPKPARAMETERS = ecpk_parameters_st;

final class ec_parameters_st extends ffi.Opaque {}

typedef ECPARAMETERS = ec_parameters_st;

/// /
final class EC_builtin_curve extends ffi.Struct {
  @ffi.Int()
  external int nid;

  external ffi.Pointer<ffi.Char> comment;
}

final class ECDSA_SIG_st extends ffi.Opaque {}

typedef ECDSA_SIG = ECDSA_SIG_st;

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int QOS_CLASS_USER_INTERACTIVE1 = 33;

const int QOS_CLASS_USER_INITIATED1 = 25;

const int QOS_CLASS_DEFAULT1 = 21;

const int QOS_CLASS_UTILITY1 = 17;

const int QOS_CLASS_BACKGROUND1 = 9;

const int QOS_CLASS_UNSPECIFIED1 = 0;

const int QOS_CLASS_USER_INTERACTIVE2 = 33;

const int QOS_CLASS_USER_INITIATED2 = 25;

const int QOS_CLASS_DEFAULT2 = 21;

const int QOS_CLASS_UTILITY2 = 17;

const int QOS_CLASS_BACKGROUND2 = 9;

const int QOS_CLASS_UNSPECIFIED2 = 0;

const int OPENSSL_SYS_MACOSX = 1;

const int OPENSSL_CONFIGURED_API = 30400;

const int OPENSSL_VERSION_MAJOR = 3;

const int OPENSSL_VERSION_MINOR = 4;

const int OPENSSL_VERSION_PATCH = 0;

const String OPENSSL_VERSION_PRE_RELEASE = '';

const String OPENSSL_VERSION_BUILD_METADATA = '';

const int OPENSSL_SHLIB_VERSION = 3;

const String OPENSSL_VERSION_STR = '3.4.0';

const String OPENSSL_FULL_VERSION_STR = '3.4.0';

const String OPENSSL_RELEASE_DATE = '22 Oct 2024';

const String OPENSSL_VERSION_TEXT = 'OpenSSL 3.4.0 22 Oct 2024';

const int _OPENSSL_VERSION_PRE_RELEASE = 0;

const int OPENSSL_VERSION_NUMBER = 809500672;

const int OPENSSL_API_LEVEL = 30400;

const String OPENSSL_FILE =
    '/var/folders/fp/vjfv1lf51kz7yssl2qnhzpd00000gn/T/RcABQA/temp_for_macros.hpp';

const int OPENSSL_LINE = 80;

const String OPENSSL_FUNC = '(unknown function)';

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int USER_ADDR_NULL = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int BYTE_ORDER = 1234;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __MAC_15_2 = 150200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __IPHONE_18_2 = 180200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __WATCHOS_11_2 = 110200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __TVOS_18_2 = 180200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __BRIDGEOS_9_2 = 90200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __DRIVERKIT_24_2 = 240200;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int __VISIONOS_2_2 = 20200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int MAC_OS_VERSION_15_2 = 150200;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int OSSL_SSIZE_MAX = 9223372036854775807;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int __DARWIN_CLK_TCK = 100;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int CHAR_BIT = 8;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 16384;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int ASN1_F_A2D_ASN1_OBJECT = 0;

const int ASN1_F_A2I_ASN1_INTEGER = 0;

const int ASN1_F_A2I_ASN1_STRING = 0;

const int ASN1_F_APPEND_EXP = 0;

const int ASN1_F_ASN1_BIO_INIT = 0;

const int ASN1_F_ASN1_BIT_STRING_SET_BIT = 0;

const int ASN1_F_ASN1_CB = 0;

const int ASN1_F_ASN1_CHECK_TLEN = 0;

const int ASN1_F_ASN1_COLLECT = 0;

const int ASN1_F_ASN1_D2I_EX_PRIMITIVE = 0;

const int ASN1_F_ASN1_D2I_FP = 0;

const int ASN1_F_ASN1_D2I_READ_BIO = 0;

const int ASN1_F_ASN1_DIGEST = 0;

const int ASN1_F_ASN1_DO_ADB = 0;

const int ASN1_F_ASN1_DO_LOCK = 0;

const int ASN1_F_ASN1_DUP = 0;

const int ASN1_F_ASN1_ENC_SAVE = 0;

const int ASN1_F_ASN1_EX_C2I = 0;

const int ASN1_F_ASN1_FIND_END = 0;

const int ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 0;

const int ASN1_F_ASN1_GENERATE_V3 = 0;

const int ASN1_F_ASN1_GET_INT64 = 0;

const int ASN1_F_ASN1_GET_OBJECT = 0;

const int ASN1_F_ASN1_GET_UINT64 = 0;

const int ASN1_F_ASN1_I2D_BIO = 0;

const int ASN1_F_ASN1_I2D_FP = 0;

const int ASN1_F_ASN1_ITEM_D2I_FP = 0;

const int ASN1_F_ASN1_ITEM_DUP = 0;

const int ASN1_F_ASN1_ITEM_EMBED_D2I = 0;

const int ASN1_F_ASN1_ITEM_EMBED_NEW = 0;

const int ASN1_F_ASN1_ITEM_FLAGS_I2D = 0;

const int ASN1_F_ASN1_ITEM_I2D_BIO = 0;

const int ASN1_F_ASN1_ITEM_I2D_FP = 0;

const int ASN1_F_ASN1_ITEM_PACK = 0;

const int ASN1_F_ASN1_ITEM_SIGN = 0;

const int ASN1_F_ASN1_ITEM_SIGN_CTX = 0;

const int ASN1_F_ASN1_ITEM_UNPACK = 0;

const int ASN1_F_ASN1_ITEM_VERIFY = 0;

const int ASN1_F_ASN1_MBSTRING_NCOPY = 0;

const int ASN1_F_ASN1_OBJECT_NEW = 0;

const int ASN1_F_ASN1_OUTPUT_DATA = 0;

const int ASN1_F_ASN1_PCTX_NEW = 0;

const int ASN1_F_ASN1_PRIMITIVE_NEW = 0;

const int ASN1_F_ASN1_SCTX_NEW = 0;

const int ASN1_F_ASN1_SIGN = 0;

const int ASN1_F_ASN1_STR2TYPE = 0;

const int ASN1_F_ASN1_STRING_GET_INT64 = 0;

const int ASN1_F_ASN1_STRING_GET_UINT64 = 0;

const int ASN1_F_ASN1_STRING_SET = 0;

const int ASN1_F_ASN1_STRING_TABLE_ADD = 0;

const int ASN1_F_ASN1_STRING_TO_BN = 0;

const int ASN1_F_ASN1_STRING_TYPE_NEW = 0;

const int ASN1_F_ASN1_TEMPLATE_EX_D2I = 0;

const int ASN1_F_ASN1_TEMPLATE_NEW = 0;

const int ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 0;

const int ASN1_F_ASN1_TIME_ADJ = 0;

const int ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 0;

const int ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 0;

const int ASN1_F_ASN1_UTCTIME_ADJ = 0;

const int ASN1_F_ASN1_VERIFY = 0;

const int ASN1_F_B64_READ_ASN1 = 0;

const int ASN1_F_B64_WRITE_ASN1 = 0;

const int ASN1_F_BIO_NEW_NDEF = 0;

const int ASN1_F_BITSTR_CB = 0;

const int ASN1_F_BN_TO_ASN1_STRING = 0;

const int ASN1_F_C2I_ASN1_BIT_STRING = 0;

const int ASN1_F_C2I_ASN1_INTEGER = 0;

const int ASN1_F_C2I_ASN1_OBJECT = 0;

const int ASN1_F_C2I_IBUF = 0;

const int ASN1_F_C2I_UINT64_INT = 0;

const int ASN1_F_COLLECT_DATA = 0;

const int ASN1_F_D2I_ASN1_OBJECT = 0;

const int ASN1_F_D2I_ASN1_UINTEGER = 0;

const int ASN1_F_D2I_AUTOPRIVATEKEY = 0;

const int ASN1_F_D2I_PRIVATEKEY = 0;

const int ASN1_F_D2I_PUBLICKEY = 0;

const int ASN1_F_DO_BUF = 0;

const int ASN1_F_DO_CREATE = 0;

const int ASN1_F_DO_DUMP = 0;

const int ASN1_F_DO_TCREATE = 0;

const int ASN1_F_I2A_ASN1_OBJECT = 0;

const int ASN1_F_I2D_ASN1_BIO_STREAM = 0;

const int ASN1_F_I2D_ASN1_OBJECT = 0;

const int ASN1_F_I2D_DSA_PUBKEY = 0;

const int ASN1_F_I2D_EC_PUBKEY = 0;

const int ASN1_F_I2D_PRIVATEKEY = 0;

const int ASN1_F_I2D_PUBLICKEY = 0;

const int ASN1_F_I2D_RSA_PUBKEY = 0;

const int ASN1_F_LONG_C2I = 0;

const int ASN1_F_NDEF_PREFIX = 0;

const int ASN1_F_NDEF_SUFFIX = 0;

const int ASN1_F_OID_MODULE_INIT = 0;

const int ASN1_F_PARSE_TAGGING = 0;

const int ASN1_F_PKCS5_PBE2_SET_IV = 0;

const int ASN1_F_PKCS5_PBE2_SET_SCRYPT = 0;

const int ASN1_F_PKCS5_PBE_SET = 0;

const int ASN1_F_PKCS5_PBE_SET0_ALGOR = 0;

const int ASN1_F_PKCS5_PBKDF2_SET = 0;

const int ASN1_F_PKCS5_SCRYPT_SET = 0;

const int ASN1_F_SMIME_READ_ASN1 = 0;

const int ASN1_F_SMIME_TEXT = 0;

const int ASN1_F_STABLE_GET = 0;

const int ASN1_F_STBL_MODULE_INIT = 0;

const int ASN1_F_UINT32_C2I = 0;

const int ASN1_F_UINT32_NEW = 0;

const int ASN1_F_UINT64_C2I = 0;

const int ASN1_F_UINT64_NEW = 0;

const int ASN1_F_X509_CRL_ADD0_REVOKED = 0;

const int ASN1_F_X509_INFO_NEW = 0;

const int ASN1_F_X509_NAME_ENCODE = 0;

const int ASN1_F_X509_NAME_EX_D2I = 0;

const int ASN1_F_X509_NAME_EX_NEW = 0;

const int ASN1_F_X509_PKEY_NEW = 0;

const int ASYNC_F_ASYNC_CTX_NEW = 0;

const int ASYNC_F_ASYNC_INIT_THREAD = 0;

const int ASYNC_F_ASYNC_JOB_NEW = 0;

const int ASYNC_F_ASYNC_PAUSE_JOB = 0;

const int ASYNC_F_ASYNC_START_FUNC = 0;

const int ASYNC_F_ASYNC_START_JOB = 0;

const int ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD = 0;

const int BIO_F_ACPT_STATE = 0;

const int BIO_F_ADDRINFO_WRAP = 0;

const int BIO_F_ADDR_STRINGS = 0;

const int BIO_F_BIO_ACCEPT = 0;

const int BIO_F_BIO_ACCEPT_EX = 0;

const int BIO_F_BIO_ACCEPT_NEW = 0;

const int BIO_F_BIO_ADDR_NEW = 0;

const int BIO_F_BIO_BIND = 0;

const int BIO_F_BIO_CALLBACK_CTRL = 0;

const int BIO_F_BIO_CONNECT = 0;

const int BIO_F_BIO_CONNECT_NEW = 0;

const int BIO_F_BIO_CTRL = 0;

const int BIO_F_BIO_GETS = 0;

const int BIO_F_BIO_GET_HOST_IP = 0;

const int BIO_F_BIO_GET_NEW_INDEX = 0;

const int BIO_F_BIO_GET_PORT = 0;

const int BIO_F_BIO_LISTEN = 0;

const int BIO_F_BIO_LOOKUP = 0;

const int BIO_F_BIO_LOOKUP_EX = 0;

const int BIO_F_BIO_MAKE_PAIR = 0;

const int BIO_F_BIO_METH_NEW = 0;

const int BIO_F_BIO_NEW = 0;

const int BIO_F_BIO_NEW_DGRAM_SCTP = 0;

const int BIO_F_BIO_NEW_FILE = 0;

const int BIO_F_BIO_NEW_MEM_BUF = 0;

const int BIO_F_BIO_NREAD = 0;

const int BIO_F_BIO_NREAD0 = 0;

const int BIO_F_BIO_NWRITE = 0;

const int BIO_F_BIO_NWRITE0 = 0;

const int BIO_F_BIO_PARSE_HOSTSERV = 0;

const int BIO_F_BIO_PUTS = 0;

const int BIO_F_BIO_READ = 0;

const int BIO_F_BIO_READ_EX = 0;

const int BIO_F_BIO_READ_INTERN = 0;

const int BIO_F_BIO_SOCKET = 0;

const int BIO_F_BIO_SOCKET_NBIO = 0;

const int BIO_F_BIO_SOCK_INFO = 0;

const int BIO_F_BIO_SOCK_INIT = 0;

const int BIO_F_BIO_WRITE = 0;

const int BIO_F_BIO_WRITE_EX = 0;

const int BIO_F_BIO_WRITE_INTERN = 0;

const int BIO_F_BUFFER_CTRL = 0;

const int BIO_F_CONN_CTRL = 0;

const int BIO_F_CONN_STATE = 0;

const int BIO_F_DGRAM_SCTP_NEW = 0;

const int BIO_F_DGRAM_SCTP_READ = 0;

const int BIO_F_DGRAM_SCTP_WRITE = 0;

const int BIO_F_DOAPR_OUTCH = 0;

const int BIO_F_FILE_CTRL = 0;

const int BIO_F_FILE_READ = 0;

const int BIO_F_LINEBUFFER_CTRL = 0;

const int BIO_F_LINEBUFFER_NEW = 0;

const int BIO_F_MEM_WRITE = 0;

const int BIO_F_NBIOF_NEW = 0;

const int BIO_F_SLG_WRITE = 0;

const int BIO_F_SSL_NEW = 0;

const int BN_F_BNRAND = 0;

const int BN_F_BNRAND_RANGE = 0;

const int BN_F_BN_BLINDING_CONVERT_EX = 0;

const int BN_F_BN_BLINDING_CREATE_PARAM = 0;

const int BN_F_BN_BLINDING_INVERT_EX = 0;

const int BN_F_BN_BLINDING_NEW = 0;

const int BN_F_BN_BLINDING_UPDATE = 0;

const int BN_F_BN_BN2DEC = 0;

const int BN_F_BN_BN2HEX = 0;

const int BN_F_BN_COMPUTE_WNAF = 0;

const int BN_F_BN_CTX_GET = 0;

const int BN_F_BN_CTX_NEW = 0;

const int BN_F_BN_CTX_START = 0;

const int BN_F_BN_DIV = 0;

const int BN_F_BN_DIV_RECP = 0;

const int BN_F_BN_EXP = 0;

const int BN_F_BN_EXPAND_INTERNAL = 0;

const int BN_F_BN_GENCB_NEW = 0;

const int BN_F_BN_GENERATE_DSA_NONCE = 0;

const int BN_F_BN_GENERATE_PRIME_EX = 0;

const int BN_F_BN_GF2M_MOD = 0;

const int BN_F_BN_GF2M_MOD_EXP = 0;

const int BN_F_BN_GF2M_MOD_MUL = 0;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD = 0;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 0;

const int BN_F_BN_GF2M_MOD_SQR = 0;

const int BN_F_BN_GF2M_MOD_SQRT = 0;

const int BN_F_BN_LSHIFT = 0;

const int BN_F_BN_MOD_EXP2_MONT = 0;

const int BN_F_BN_MOD_EXP_MONT = 0;

const int BN_F_BN_MOD_EXP_MONT_CONSTTIME = 0;

const int BN_F_BN_MOD_EXP_MONT_WORD = 0;

const int BN_F_BN_MOD_EXP_RECP = 0;

const int BN_F_BN_MOD_EXP_SIMPLE = 0;

const int BN_F_BN_MOD_INVERSE = 0;

const int BN_F_BN_MOD_INVERSE_NO_BRANCH = 0;

const int BN_F_BN_MOD_LSHIFT_QUICK = 0;

const int BN_F_BN_MOD_SQRT = 0;

const int BN_F_BN_MONT_CTX_NEW = 0;

const int BN_F_BN_MPI2BN = 0;

const int BN_F_BN_NEW = 0;

const int BN_F_BN_POOL_GET = 0;

const int BN_F_BN_RAND = 0;

const int BN_F_BN_RAND_RANGE = 0;

const int BN_F_BN_RECP_CTX_NEW = 0;

const int BN_F_BN_RSHIFT = 0;

const int BN_F_BN_SET_WORDS = 0;

const int BN_F_BN_STACK_PUSH = 0;

const int BN_F_BN_USUB = 0;

const int BUF_F_BUF_MEM_GROW = 0;

const int BUF_F_BUF_MEM_GROW_CLEAN = 0;

const int BUF_F_BUF_MEM_NEW = 0;

const int CMS_F_CHECK_CONTENT = 0;

const int CMS_F_CMS_ADD0_CERT = 0;

const int CMS_F_CMS_ADD0_RECIPIENT_KEY = 0;

const int CMS_F_CMS_ADD0_RECIPIENT_PASSWORD = 0;

const int CMS_F_CMS_ADD1_RECEIPTREQUEST = 0;

const int CMS_F_CMS_ADD1_RECIPIENT_CERT = 0;

const int CMS_F_CMS_ADD1_SIGNER = 0;

const int CMS_F_CMS_ADD1_SIGNINGTIME = 0;

const int CMS_F_CMS_COMPRESS = 0;

const int CMS_F_CMS_COMPRESSEDDATA_CREATE = 0;

const int CMS_F_CMS_COMPRESSEDDATA_INIT_BIO = 0;

const int CMS_F_CMS_COPY_CONTENT = 0;

const int CMS_F_CMS_COPY_MESSAGEDIGEST = 0;

const int CMS_F_CMS_DATA = 0;

const int CMS_F_CMS_DATAFINAL = 0;

const int CMS_F_CMS_DATAINIT = 0;

const int CMS_F_CMS_DECRYPT = 0;

const int CMS_F_CMS_DECRYPT_SET1_KEY = 0;

const int CMS_F_CMS_DECRYPT_SET1_PASSWORD = 0;

const int CMS_F_CMS_DECRYPT_SET1_PKEY = 0;

const int CMS_F_CMS_DIGESTALGORITHM_FIND_CTX = 0;

const int CMS_F_CMS_DIGESTALGORITHM_INIT_BIO = 0;

const int CMS_F_CMS_DIGESTEDDATA_DO_FINAL = 0;

const int CMS_F_CMS_DIGEST_VERIFY = 0;

const int CMS_F_CMS_ENCODE_RECEIPT = 0;

const int CMS_F_CMS_ENCRYPT = 0;

const int CMS_F_CMS_ENCRYPTEDCONTENT_INIT = 0;

const int CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO = 0;

const int CMS_F_CMS_ENCRYPTEDDATA_DECRYPT = 0;

const int CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT = 0;

const int CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY = 0;

const int CMS_F_CMS_ENVELOPEDDATA_CREATE = 0;

const int CMS_F_CMS_ENVELOPEDDATA_INIT_BIO = 0;

const int CMS_F_CMS_ENVELOPED_DATA_INIT = 0;

const int CMS_F_CMS_ENV_ASN1_CTRL = 0;

const int CMS_F_CMS_FINAL = 0;

const int CMS_F_CMS_GET0_CERTIFICATE_CHOICES = 0;

const int CMS_F_CMS_GET0_CONTENT = 0;

const int CMS_F_CMS_GET0_ECONTENT_TYPE = 0;

const int CMS_F_CMS_GET0_ENVELOPED = 0;

const int CMS_F_CMS_GET0_REVOCATION_CHOICES = 0;

const int CMS_F_CMS_GET0_SIGNED = 0;

const int CMS_F_CMS_MSGSIGDIGEST_ADD1 = 0;

const int CMS_F_CMS_RECEIPTREQUEST_CREATE0 = 0;

const int CMS_F_CMS_RECEIPT_VERIFY = 0;

const int CMS_F_CMS_RECIPIENTINFO_DECRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_ENCRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG = 0;

const int CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID = 0;

const int CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS = 0;

const int CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP = 0;

const int CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID = 0;

const int CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP = 0;

const int CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP = 0;

const int CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS = 0;

const int CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID = 0;

const int CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT = 0;

const int CMS_F_CMS_RECIPIENTINFO_SET0_KEY = 0;

const int CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD = 0;

const int CMS_F_CMS_RECIPIENTINFO_SET0_PKEY = 0;

const int CMS_F_CMS_SD_ASN1_CTRL = 0;

const int CMS_F_CMS_SET1_IAS = 0;

const int CMS_F_CMS_SET1_KEYID = 0;

const int CMS_F_CMS_SET1_SIGNERIDENTIFIER = 0;

const int CMS_F_CMS_SET_DETACHED = 0;

const int CMS_F_CMS_SIGN = 0;

const int CMS_F_CMS_SIGNED_DATA_INIT = 0;

const int CMS_F_CMS_SIGNERINFO_CONTENT_SIGN = 0;

const int CMS_F_CMS_SIGNERINFO_SIGN = 0;

const int CMS_F_CMS_SIGNERINFO_VERIFY = 0;

const int CMS_F_CMS_SIGNERINFO_VERIFY_CERT = 0;

const int CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT = 0;

const int CMS_F_CMS_SIGN_RECEIPT = 0;

const int CMS_F_CMS_SI_CHECK_ATTRIBUTES = 0;

const int CMS_F_CMS_STREAM = 0;

const int CMS_F_CMS_UNCOMPRESS = 0;

const int CMS_F_CMS_VERIFY = 0;

const int CMS_F_KEK_UNWRAP_KEY = 0;

const int COMP_F_BIO_ZLIB_FLUSH = 0;

const int COMP_F_BIO_ZLIB_NEW = 0;

const int COMP_F_BIO_ZLIB_READ = 0;

const int COMP_F_BIO_ZLIB_WRITE = 0;

const int COMP_F_COMP_CTX_NEW = 0;

const int CONF_F_CONF_DUMP_FP = 0;

const int CONF_F_CONF_LOAD = 0;

const int CONF_F_CONF_LOAD_FP = 0;

const int CONF_F_CONF_PARSE_LIST = 0;

const int CONF_F_DEF_LOAD = 0;

const int CONF_F_DEF_LOAD_BIO = 0;

const int CONF_F_GET_NEXT_FILE = 0;

const int CONF_F_MODULE_ADD = 0;

const int CONF_F_MODULE_INIT = 0;

const int CONF_F_MODULE_LOAD_DSO = 0;

const int CONF_F_MODULE_RUN = 0;

const int CONF_F_NCONF_DUMP_BIO = 0;

const int CONF_F_NCONF_DUMP_FP = 0;

const int CONF_F_NCONF_GET_NUMBER_E = 0;

const int CONF_F_NCONF_GET_SECTION = 0;

const int CONF_F_NCONF_GET_STRING = 0;

const int CONF_F_NCONF_LOAD = 0;

const int CONF_F_NCONF_LOAD_BIO = 0;

const int CONF_F_NCONF_LOAD_FP = 0;

const int CONF_F_NCONF_NEW = 0;

const int CONF_F_PROCESS_INCLUDE = 0;

const int CONF_F_SSL_MODULE_INIT = 0;

const int CONF_F_STR_COPY = 0;

const int CRYPTO_F_CMAC_CTX_NEW = 0;

const int CRYPTO_F_CRYPTO_DUP_EX_DATA = 0;

const int CRYPTO_F_CRYPTO_FREE_EX_DATA = 0;

const int CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 0;

const int CRYPTO_F_CRYPTO_MEMDUP = 0;

const int CRYPTO_F_CRYPTO_NEW_EX_DATA = 0;

const int CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 0;

const int CRYPTO_F_CRYPTO_OCB128_INIT = 0;

const int CRYPTO_F_CRYPTO_SET_EX_DATA = 0;

const int CRYPTO_F_GET_AND_LOCK = 0;

const int CRYPTO_F_OPENSSL_ATEXIT = 0;

const int CRYPTO_F_OPENSSL_BUF2HEXSTR = 0;

const int CRYPTO_F_OPENSSL_FOPEN = 0;

const int CRYPTO_F_OPENSSL_HEXSTR2BUF = 0;

const int CRYPTO_F_OPENSSL_INIT_CRYPTO = 0;

const int CRYPTO_F_OPENSSL_LH_NEW = 0;

const int CRYPTO_F_OPENSSL_SK_DEEP_COPY = 0;

const int CRYPTO_F_OPENSSL_SK_DUP = 0;

const int CRYPTO_F_PKEY_HMAC_INIT = 0;

const int CRYPTO_F_PKEY_POLY1305_INIT = 0;

const int CRYPTO_F_PKEY_SIPHASH_INIT = 0;

const int CRYPTO_F_SK_RESERVE = 0;

const int CT_F_CTLOG_NEW = 0;

const int CT_F_CTLOG_NEW_FROM_BASE64 = 0;

const int CT_F_CTLOG_NEW_FROM_CONF = 0;

const int CT_F_CTLOG_STORE_LOAD_CTX_NEW = 0;

const int CT_F_CTLOG_STORE_LOAD_FILE = 0;

const int CT_F_CTLOG_STORE_LOAD_LOG = 0;

const int CT_F_CTLOG_STORE_NEW = 0;

const int CT_F_CT_BASE64_DECODE = 0;

const int CT_F_CT_POLICY_EVAL_CTX_NEW = 0;

const int CT_F_CT_V1_LOG_ID_FROM_PKEY = 0;

const int CT_F_I2O_SCT = 0;

const int CT_F_I2O_SCT_LIST = 0;

const int CT_F_I2O_SCT_SIGNATURE = 0;

const int CT_F_O2I_SCT = 0;

const int CT_F_O2I_SCT_LIST = 0;

const int CT_F_O2I_SCT_SIGNATURE = 0;

const int CT_F_SCT_CTX_NEW = 0;

const int CT_F_SCT_CTX_VERIFY = 0;

const int CT_F_SCT_NEW = 0;

const int CT_F_SCT_NEW_FROM_BASE64 = 0;

const int CT_F_SCT_SET0_LOG_ID = 0;

const int CT_F_SCT_SET1_EXTENSIONS = 0;

const int CT_F_SCT_SET1_LOG_ID = 0;

const int CT_F_SCT_SET1_SIGNATURE = 0;

const int CT_F_SCT_SET_LOG_ENTRY_TYPE = 0;

const int CT_F_SCT_SET_SIGNATURE_NID = 0;

const int CT_F_SCT_SET_VERSION = 0;

const int DH_F_COMPUTE_KEY = 0;

const int DH_F_DHPARAMS_PRINT_FP = 0;

const int DH_F_DH_BUILTIN_GENPARAMS = 0;

const int DH_F_DH_CHECK_EX = 0;

const int DH_F_DH_CHECK_PARAMS_EX = 0;

const int DH_F_DH_CHECK_PUB_KEY_EX = 0;

const int DH_F_DH_CMS_DECRYPT = 0;

const int DH_F_DH_CMS_SET_PEERKEY = 0;

const int DH_F_DH_CMS_SET_SHARED_INFO = 0;

const int DH_F_DH_METH_DUP = 0;

const int DH_F_DH_METH_NEW = 0;

const int DH_F_DH_METH_SET1_NAME = 0;

const int DH_F_DH_NEW_BY_NID = 0;

const int DH_F_DH_NEW_METHOD = 0;

const int DH_F_DH_PARAM_DECODE = 0;

const int DH_F_DH_PKEY_PUBLIC_CHECK = 0;

const int DH_F_DH_PRIV_DECODE = 0;

const int DH_F_DH_PRIV_ENCODE = 0;

const int DH_F_DH_PUB_DECODE = 0;

const int DH_F_DH_PUB_ENCODE = 0;

const int DH_F_DO_DH_PRINT = 0;

const int DH_F_GENERATE_KEY = 0;

const int DH_F_PKEY_DH_CTRL_STR = 0;

const int DH_F_PKEY_DH_DERIVE = 0;

const int DH_F_PKEY_DH_INIT = 0;

const int DH_F_PKEY_DH_KEYGEN = 0;

const int DSA_F_DSAPARAMS_PRINT = 0;

const int DSA_F_DSAPARAMS_PRINT_FP = 0;

const int DSA_F_DSA_BUILTIN_PARAMGEN = 0;

const int DSA_F_DSA_BUILTIN_PARAMGEN2 = 0;

const int DSA_F_DSA_DO_SIGN = 0;

const int DSA_F_DSA_DO_VERIFY = 0;

const int DSA_F_DSA_METH_DUP = 0;

const int DSA_F_DSA_METH_NEW = 0;

const int DSA_F_DSA_METH_SET1_NAME = 0;

const int DSA_F_DSA_NEW_METHOD = 0;

const int DSA_F_DSA_PARAM_DECODE = 0;

const int DSA_F_DSA_PRINT_FP = 0;

const int DSA_F_DSA_PRIV_DECODE = 0;

const int DSA_F_DSA_PRIV_ENCODE = 0;

const int DSA_F_DSA_PUB_DECODE = 0;

const int DSA_F_DSA_PUB_ENCODE = 0;

const int DSA_F_DSA_SIGN = 0;

const int DSA_F_DSA_SIGN_SETUP = 0;

const int DSA_F_DSA_SIG_NEW = 0;

const int DSA_F_OLD_DSA_PRIV_DECODE = 0;

const int DSA_F_PKEY_DSA_CTRL = 0;

const int DSA_F_PKEY_DSA_CTRL_STR = 0;

const int DSA_F_PKEY_DSA_KEYGEN = 0;

const int EC_F_BN_TO_FELEM = 0;

const int EC_F_D2I_ECPARAMETERS = 0;

const int EC_F_D2I_ECPKPARAMETERS = 0;

const int EC_F_D2I_ECPRIVATEKEY = 0;

const int EC_F_DO_EC_KEY_PRINT = 0;

const int EC_F_ECDH_CMS_DECRYPT = 0;

const int EC_F_ECDH_CMS_SET_SHARED_INFO = 0;

const int EC_F_ECDH_COMPUTE_KEY = 0;

const int EC_F_ECDH_SIMPLE_COMPUTE_KEY = 0;

const int EC_F_ECDSA_DO_SIGN_EX = 0;

const int EC_F_ECDSA_DO_VERIFY = 0;

const int EC_F_ECDSA_SIGN_EX = 0;

const int EC_F_ECDSA_SIGN_SETUP = 0;

const int EC_F_ECDSA_SIG_NEW = 0;

const int EC_F_ECDSA_VERIFY = 0;

const int EC_F_ECD_ITEM_VERIFY = 0;

const int EC_F_ECKEY_PARAM2TYPE = 0;

const int EC_F_ECKEY_PARAM_DECODE = 0;

const int EC_F_ECKEY_PRIV_DECODE = 0;

const int EC_F_ECKEY_PRIV_ENCODE = 0;

const int EC_F_ECKEY_PUB_DECODE = 0;

const int EC_F_ECKEY_PUB_ENCODE = 0;

const int EC_F_ECKEY_TYPE2PARAM = 0;

const int EC_F_ECPARAMETERS_PRINT = 0;

const int EC_F_ECPARAMETERS_PRINT_FP = 0;

const int EC_F_ECPKPARAMETERS_PRINT = 0;

const int EC_F_ECPKPARAMETERS_PRINT_FP = 0;

const int EC_F_ECP_NISTZ256_GET_AFFINE = 0;

const int EC_F_ECP_NISTZ256_INV_MOD_ORD = 0;

const int EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 0;

const int EC_F_ECP_NISTZ256_POINTS_MUL = 0;

const int EC_F_ECP_NISTZ256_PRE_COMP_NEW = 0;

const int EC_F_ECP_NISTZ256_WINDOWED_MUL = 0;

const int EC_F_ECX_KEY_OP = 0;

const int EC_F_ECX_PRIV_ENCODE = 0;

const int EC_F_ECX_PUB_ENCODE = 0;

const int EC_F_EC_ASN1_GROUP2CURVE = 0;

const int EC_F_EC_ASN1_GROUP2FIELDID = 0;

const int EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 0;

const int EC_F_EC_GF2M_SIMPLE_FIELD_INV = 0;

const int EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0;

const int EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 0;

const int EC_F_EC_GF2M_SIMPLE_LADDER_POST = 0;

const int EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 0;

const int EC_F_EC_GF2M_SIMPLE_OCT2POINT = 0;

const int EC_F_EC_GF2M_SIMPLE_POINT2OCT = 0;

const int EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 0;

const int EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 0;

const int EC_F_EC_GFP_MONT_FIELD_DECODE = 0;

const int EC_F_EC_GFP_MONT_FIELD_ENCODE = 0;

const int EC_F_EC_GFP_MONT_FIELD_INV = 0;

const int EC_F_EC_GFP_MONT_FIELD_MUL = 0;

const int EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 0;

const int EC_F_EC_GFP_MONT_FIELD_SQR = 0;

const int EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_NISTP224_POINTS_MUL = 0;

const int EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_NISTP256_POINTS_MUL = 0;

const int EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_NISTP521_POINTS_MUL = 0;

const int EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GFP_NIST_FIELD_MUL = 0;

const int EC_F_EC_GFP_NIST_FIELD_SQR = 0;

const int EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 0;

const int EC_F_EC_GFP_SIMPLE_FIELD_INV = 0;

const int EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0;

const int EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 0;

const int EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 0;

const int EC_F_EC_GFP_SIMPLE_OCT2POINT = 0;

const int EC_F_EC_GFP_SIMPLE_POINT2OCT = 0;

const int EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 0;

const int EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0;

const int EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 0;

const int EC_F_EC_GROUP_CHECK = 0;

const int EC_F_EC_GROUP_CHECK_DISCRIMINANT = 0;

const int EC_F_EC_GROUP_COPY = 0;

const int EC_F_EC_GROUP_GET_CURVE = 0;

const int EC_F_EC_GROUP_GET_CURVE_GF2M = 0;

const int EC_F_EC_GROUP_GET_CURVE_GFP = 0;

const int EC_F_EC_GROUP_GET_DEGREE = 0;

const int EC_F_EC_GROUP_GET_ECPARAMETERS = 0;

const int EC_F_EC_GROUP_GET_ECPKPARAMETERS = 0;

const int EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 0;

const int EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 0;

const int EC_F_EC_GROUP_NEW = 0;

const int EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 0;

const int EC_F_EC_GROUP_NEW_FROM_DATA = 0;

const int EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 0;

const int EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 0;

const int EC_F_EC_GROUP_SET_CURVE = 0;

const int EC_F_EC_GROUP_SET_CURVE_GF2M = 0;

const int EC_F_EC_GROUP_SET_CURVE_GFP = 0;

const int EC_F_EC_GROUP_SET_GENERATOR = 0;

const int EC_F_EC_GROUP_SET_SEED = 0;

const int EC_F_EC_KEY_CHECK_KEY = 0;

const int EC_F_EC_KEY_COPY = 0;

const int EC_F_EC_KEY_GENERATE_KEY = 0;

const int EC_F_EC_KEY_NEW = 0;

const int EC_F_EC_KEY_NEW_METHOD = 0;

const int EC_F_EC_KEY_OCT2PRIV = 0;

const int EC_F_EC_KEY_PRINT = 0;

const int EC_F_EC_KEY_PRINT_FP = 0;

const int EC_F_EC_KEY_PRIV2BUF = 0;

const int EC_F_EC_KEY_PRIV2OCT = 0;

const int EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 0;

const int EC_F_EC_KEY_SIMPLE_CHECK_KEY = 0;

const int EC_F_EC_KEY_SIMPLE_OCT2PRIV = 0;

const int EC_F_EC_KEY_SIMPLE_PRIV2OCT = 0;

const int EC_F_EC_PKEY_CHECK = 0;

const int EC_F_EC_PKEY_PARAM_CHECK = 0;

const int EC_F_EC_POINTS_MAKE_AFFINE = 0;

const int EC_F_EC_POINTS_MUL = 0;

const int EC_F_EC_POINT_ADD = 0;

const int EC_F_EC_POINT_BN2POINT = 0;

const int EC_F_EC_POINT_CMP = 0;

const int EC_F_EC_POINT_COPY = 0;

const int EC_F_EC_POINT_DBL = 0;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES = 0;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 0;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 0;

const int EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 0;

const int EC_F_EC_POINT_INVERT = 0;

const int EC_F_EC_POINT_IS_AT_INFINITY = 0;

const int EC_F_EC_POINT_IS_ON_CURVE = 0;

const int EC_F_EC_POINT_MAKE_AFFINE = 0;

const int EC_F_EC_POINT_NEW = 0;

const int EC_F_EC_POINT_OCT2POINT = 0;

const int EC_F_EC_POINT_POINT2BUF = 0;

const int EC_F_EC_POINT_POINT2OCT = 0;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES = 0;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 0;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 0;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 0;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 0;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 0;

const int EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 0;

const int EC_F_EC_POINT_SET_TO_INFINITY = 0;

const int EC_F_EC_PRE_COMP_NEW = 0;

const int EC_F_EC_SCALAR_MUL_LADDER = 0;

const int EC_F_EC_WNAF_MUL = 0;

const int EC_F_EC_WNAF_PRECOMPUTE_MULT = 0;

const int EC_F_I2D_ECPARAMETERS = 0;

const int EC_F_I2D_ECPKPARAMETERS = 0;

const int EC_F_I2D_ECPRIVATEKEY = 0;

const int EC_F_I2O_ECPUBLICKEY = 0;

const int EC_F_NISTP224_PRE_COMP_NEW = 0;

const int EC_F_NISTP256_PRE_COMP_NEW = 0;

const int EC_F_NISTP521_PRE_COMP_NEW = 0;

const int EC_F_O2I_ECPUBLICKEY = 0;

const int EC_F_OLD_EC_PRIV_DECODE = 0;

const int EC_F_OSSL_ECDH_COMPUTE_KEY = 0;

const int EC_F_OSSL_ECDSA_SIGN_SIG = 0;

const int EC_F_OSSL_ECDSA_VERIFY_SIG = 0;

const int EC_F_PKEY_ECD_CTRL = 0;

const int EC_F_PKEY_ECD_DIGESTSIGN = 0;

const int EC_F_PKEY_ECD_DIGESTSIGN25519 = 0;

const int EC_F_PKEY_ECD_DIGESTSIGN448 = 0;

const int EC_F_PKEY_ECX_DERIVE = 0;

const int EC_F_PKEY_EC_CTRL = 0;

const int EC_F_PKEY_EC_CTRL_STR = 0;

const int EC_F_PKEY_EC_DERIVE = 0;

const int EC_F_PKEY_EC_INIT = 0;

const int EC_F_PKEY_EC_KDF_DERIVE = 0;

const int EC_F_PKEY_EC_KEYGEN = 0;

const int EC_F_PKEY_EC_PARAMGEN = 0;

const int EC_F_PKEY_EC_SIGN = 0;

const int EC_F_VALIDATE_ECX_DERIVE = 0;

const int ENGINE_F_DIGEST_UPDATE = 0;

const int ENGINE_F_DYNAMIC_CTRL = 0;

const int ENGINE_F_DYNAMIC_GET_DATA_CTX = 0;

const int ENGINE_F_DYNAMIC_LOAD = 0;

const int ENGINE_F_DYNAMIC_SET_DATA_CTX = 0;

const int ENGINE_F_ENGINE_ADD = 0;

const int ENGINE_F_ENGINE_BY_ID = 0;

const int ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = 0;

const int ENGINE_F_ENGINE_CTRL = 0;

const int ENGINE_F_ENGINE_CTRL_CMD = 0;

const int ENGINE_F_ENGINE_CTRL_CMD_STRING = 0;

const int ENGINE_F_ENGINE_FINISH = 0;

const int ENGINE_F_ENGINE_GET_CIPHER = 0;

const int ENGINE_F_ENGINE_GET_DIGEST = 0;

const int ENGINE_F_ENGINE_GET_FIRST = 0;

const int ENGINE_F_ENGINE_GET_LAST = 0;

const int ENGINE_F_ENGINE_GET_NEXT = 0;

const int ENGINE_F_ENGINE_GET_PKEY_ASN1_METH = 0;

const int ENGINE_F_ENGINE_GET_PKEY_METH = 0;

const int ENGINE_F_ENGINE_GET_PREV = 0;

const int ENGINE_F_ENGINE_INIT = 0;

const int ENGINE_F_ENGINE_LIST_ADD = 0;

const int ENGINE_F_ENGINE_LIST_REMOVE = 0;

const int ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = 0;

const int ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = 0;

const int ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = 0;

const int ENGINE_F_ENGINE_NEW = 0;

const int ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR = 0;

const int ENGINE_F_ENGINE_REMOVE = 0;

const int ENGINE_F_ENGINE_SET_DEFAULT_STRING = 0;

const int ENGINE_F_ENGINE_SET_ID = 0;

const int ENGINE_F_ENGINE_SET_NAME = 0;

const int ENGINE_F_ENGINE_TABLE_REGISTER = 0;

const int ENGINE_F_ENGINE_UNLOCKED_FINISH = 0;

const int ENGINE_F_ENGINE_UP_REF = 0;

const int ENGINE_F_INT_CLEANUP_ITEM = 0;

const int ENGINE_F_INT_CTRL_HELPER = 0;

const int ENGINE_F_INT_ENGINE_CONFIGURE = 0;

const int ENGINE_F_INT_ENGINE_MODULE_INIT = 0;

const int ENGINE_F_OSSL_HMAC_INIT = 0;

const int EVP_F_AESNI_INIT_KEY = 0;

const int EVP_F_AESNI_XTS_INIT_KEY = 0;

const int EVP_F_AES_GCM_CTRL = 0;

const int EVP_F_AES_INIT_KEY = 0;

const int EVP_F_AES_OCB_CIPHER = 0;

const int EVP_F_AES_T4_INIT_KEY = 0;

const int EVP_F_AES_T4_XTS_INIT_KEY = 0;

const int EVP_F_AES_WRAP_CIPHER = 0;

const int EVP_F_AES_XTS_INIT_KEY = 0;

const int EVP_F_ALG_MODULE_INIT = 0;

const int EVP_F_ARIA_CCM_INIT_KEY = 0;

const int EVP_F_ARIA_GCM_CTRL = 0;

const int EVP_F_ARIA_GCM_INIT_KEY = 0;

const int EVP_F_ARIA_INIT_KEY = 0;

const int EVP_F_B64_NEW = 0;

const int EVP_F_CAMELLIA_INIT_KEY = 0;

const int EVP_F_CHACHA20_POLY1305_CTRL = 0;

const int EVP_F_CMLL_T4_INIT_KEY = 0;

const int EVP_F_DES_EDE3_WRAP_CIPHER = 0;

const int EVP_F_DO_SIGVER_INIT = 0;

const int EVP_F_ENC_NEW = 0;

const int EVP_F_EVP_CIPHERINIT_EX = 0;

const int EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 0;

const int EVP_F_EVP_CIPHER_CTX_COPY = 0;

const int EVP_F_EVP_CIPHER_CTX_CTRL = 0;

const int EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 0;

const int EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 0;

const int EVP_F_EVP_DECRYPTFINAL_EX = 0;

const int EVP_F_EVP_DECRYPTUPDATE = 0;

const int EVP_F_EVP_DIGESTFINALXOF = 0;

const int EVP_F_EVP_DIGESTINIT_EX = 0;

const int EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 0;

const int EVP_F_EVP_ENCRYPTFINAL_EX = 0;

const int EVP_F_EVP_ENCRYPTUPDATE = 0;

const int EVP_F_EVP_MD_CTX_COPY_EX = 0;

const int EVP_F_EVP_MD_SIZE = 0;

const int EVP_F_EVP_OPENINIT = 0;

const int EVP_F_EVP_PBE_ALG_ADD = 0;

const int EVP_F_EVP_PBE_ALG_ADD_TYPE = 0;

const int EVP_F_EVP_PBE_CIPHERINIT = 0;

const int EVP_F_EVP_PBE_SCRYPT = 0;

const int EVP_F_EVP_PKCS82PKEY = 0;

const int EVP_F_EVP_PKEY2PKCS8 = 0;

const int EVP_F_EVP_PKEY_ASN1_ADD0 = 0;

const int EVP_F_EVP_PKEY_CHECK = 0;

const int EVP_F_EVP_PKEY_COPY_PARAMETERS = 0;

const int EVP_F_EVP_PKEY_CTX_CTRL = 0;

const int EVP_F_EVP_PKEY_CTX_CTRL_STR = 0;

const int EVP_F_EVP_PKEY_CTX_DUP = 0;

const int EVP_F_EVP_PKEY_CTX_MD = 0;

const int EVP_F_EVP_PKEY_DECRYPT = 0;

const int EVP_F_EVP_PKEY_DECRYPT_INIT = 0;

const int EVP_F_EVP_PKEY_DECRYPT_OLD = 0;

const int EVP_F_EVP_PKEY_DERIVE = 0;

const int EVP_F_EVP_PKEY_DERIVE_INIT = 0;

const int EVP_F_EVP_PKEY_DERIVE_SET_PEER = 0;

const int EVP_F_EVP_PKEY_ENCRYPT = 0;

const int EVP_F_EVP_PKEY_ENCRYPT_INIT = 0;

const int EVP_F_EVP_PKEY_ENCRYPT_OLD = 0;

const int EVP_F_EVP_PKEY_GET0_DH = 0;

const int EVP_F_EVP_PKEY_GET0_DSA = 0;

const int EVP_F_EVP_PKEY_GET0_EC_KEY = 0;

const int EVP_F_EVP_PKEY_GET0_HMAC = 0;

const int EVP_F_EVP_PKEY_GET0_POLY1305 = 0;

const int EVP_F_EVP_PKEY_GET0_RSA = 0;

const int EVP_F_EVP_PKEY_GET0_SIPHASH = 0;

const int EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 0;

const int EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 0;

const int EVP_F_EVP_PKEY_KEYGEN = 0;

const int EVP_F_EVP_PKEY_KEYGEN_INIT = 0;

const int EVP_F_EVP_PKEY_METH_ADD0 = 0;

const int EVP_F_EVP_PKEY_METH_NEW = 0;

const int EVP_F_EVP_PKEY_NEW = 0;

const int EVP_F_EVP_PKEY_NEW_CMAC_KEY = 0;

const int EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 0;

const int EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 0;

const int EVP_F_EVP_PKEY_PARAMGEN = 0;

const int EVP_F_EVP_PKEY_PARAMGEN_INIT = 0;

const int EVP_F_EVP_PKEY_PARAM_CHECK = 0;

const int EVP_F_EVP_PKEY_PUBLIC_CHECK = 0;

const int EVP_F_EVP_PKEY_SET1_ENGINE = 0;

const int EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 0;

const int EVP_F_EVP_PKEY_SIGN = 0;

const int EVP_F_EVP_PKEY_SIGN_INIT = 0;

const int EVP_F_EVP_PKEY_VERIFY = 0;

const int EVP_F_EVP_PKEY_VERIFY_INIT = 0;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER = 0;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 0;

const int EVP_F_EVP_SIGNFINAL = 0;

const int EVP_F_EVP_VERIFYFINAL = 0;

const int EVP_F_INT_CTX_NEW = 0;

const int EVP_F_OK_NEW = 0;

const int EVP_F_PKCS5_PBE_KEYIVGEN = 0;

const int EVP_F_PKCS5_V2_PBE_KEYIVGEN = 0;

const int EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 0;

const int EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 0;

const int EVP_F_PKEY_SET_TYPE = 0;

const int EVP_F_RC2_MAGIC_TO_METH = 0;

const int EVP_F_RC5_CTRL = 0;

const int EVP_F_R_32_12_16_INIT_KEY = 0;

const int EVP_F_S390X_AES_GCM_CTRL = 0;

const int EVP_F_UPDATE = 0;

const int KDF_F_PKEY_HKDF_CTRL_STR = 0;

const int KDF_F_PKEY_HKDF_DERIVE = 0;

const int KDF_F_PKEY_HKDF_INIT = 0;

const int KDF_F_PKEY_SCRYPT_CTRL_STR = 0;

const int KDF_F_PKEY_SCRYPT_CTRL_UINT64 = 0;

const int KDF_F_PKEY_SCRYPT_DERIVE = 0;

const int KDF_F_PKEY_SCRYPT_INIT = 0;

const int KDF_F_PKEY_SCRYPT_SET_MEMBUF = 0;

const int KDF_F_PKEY_TLS1_PRF_CTRL_STR = 0;

const int KDF_F_PKEY_TLS1_PRF_DERIVE = 0;

const int KDF_F_PKEY_TLS1_PRF_INIT = 0;

const int KDF_F_TLS1_PRF_ALG = 0;

const int KDF_R_INVALID_DIGEST = 0;

const int KDF_R_MISSING_ITERATION_COUNT = 0;

const int KDF_R_MISSING_KEY = 0;

const int KDF_R_MISSING_MESSAGE_DIGEST = 0;

const int KDF_R_MISSING_PARAMETER = 0;

const int KDF_R_MISSING_PASS = 0;

const int KDF_R_MISSING_SALT = 0;

const int KDF_R_MISSING_SECRET = 0;

const int KDF_R_MISSING_SEED = 0;

const int KDF_R_UNKNOWN_PARAMETER_TYPE = 0;

const int KDF_R_VALUE_ERROR = 0;

const int KDF_R_VALUE_MISSING = 0;

const int OBJ_F_OBJ_ADD_OBJECT = 0;

const int OBJ_F_OBJ_ADD_SIGID = 0;

const int OBJ_F_OBJ_CREATE = 0;

const int OBJ_F_OBJ_DUP = 0;

const int OBJ_F_OBJ_NAME_NEW_INDEX = 0;

const int OBJ_F_OBJ_NID2LN = 0;

const int OBJ_F_OBJ_NID2OBJ = 0;

const int OBJ_F_OBJ_NID2SN = 0;

const int OBJ_F_OBJ_TXT2OBJ = 0;

const int OCSP_F_D2I_OCSP_NONCE = 0;

const int OCSP_F_OCSP_BASIC_ADD1_STATUS = 0;

const int OCSP_F_OCSP_BASIC_SIGN = 0;

const int OCSP_F_OCSP_BASIC_SIGN_CTX = 0;

const int OCSP_F_OCSP_BASIC_VERIFY = 0;

const int OCSP_F_OCSP_CERT_ID_NEW = 0;

const int OCSP_F_OCSP_CHECK_DELEGATED = 0;

const int OCSP_F_OCSP_CHECK_IDS = 0;

const int OCSP_F_OCSP_CHECK_ISSUER = 0;

const int OCSP_F_OCSP_CHECK_VALIDITY = 0;

const int OCSP_F_OCSP_MATCH_ISSUERID = 0;

const int OCSP_F_OCSP_PARSE_URL = 0;

const int OCSP_F_OCSP_REQUEST_SIGN = 0;

const int OCSP_F_OCSP_REQUEST_VERIFY = 0;

const int OCSP_F_OCSP_RESPONSE_GET1_BASIC = 0;

const int OCSP_F_PARSE_HTTP_LINE1 = 0;

const int PEM_F_B2I_DSS = 0;

const int PEM_F_B2I_PVK_BIO = 0;

const int PEM_F_B2I_RSA = 0;

const int PEM_F_CHECK_BITLEN_DSA = 0;

const int PEM_F_CHECK_BITLEN_RSA = 0;

const int PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 0;

const int PEM_F_D2I_PKCS8PRIVATEKEY_FP = 0;

const int PEM_F_DO_B2I = 0;

const int PEM_F_DO_B2I_BIO = 0;

const int PEM_F_DO_BLOB_HEADER = 0;

const int PEM_F_DO_I2B = 0;

const int PEM_F_DO_PK8PKEY = 0;

const int PEM_F_DO_PK8PKEY_FP = 0;

const int PEM_F_DO_PVK_BODY = 0;

const int PEM_F_DO_PVK_HEADER = 0;

const int PEM_F_GET_HEADER_AND_DATA = 0;

const int PEM_F_GET_NAME = 0;

const int PEM_F_I2B_PVK = 0;

const int PEM_F_I2B_PVK_BIO = 0;

const int PEM_F_LOAD_IV = 0;

const int PEM_F_PEM_ASN1_READ = 0;

const int PEM_F_PEM_ASN1_READ_BIO = 0;

const int PEM_F_PEM_ASN1_WRITE = 0;

const int PEM_F_PEM_ASN1_WRITE_BIO = 0;

const int PEM_F_PEM_DEF_CALLBACK = 0;

const int PEM_F_PEM_DO_HEADER = 0;

const int PEM_F_PEM_GET_EVP_CIPHER_INFO = 0;

const int PEM_F_PEM_READ = 0;

const int PEM_F_PEM_READ_BIO = 0;

const int PEM_F_PEM_READ_BIO_DHPARAMS = 0;

const int PEM_F_PEM_READ_BIO_EX = 0;

const int PEM_F_PEM_READ_BIO_PARAMETERS = 0;

const int PEM_F_PEM_READ_BIO_PRIVATEKEY = 0;

const int PEM_F_PEM_READ_DHPARAMS = 0;

const int PEM_F_PEM_READ_PRIVATEKEY = 0;

const int PEM_F_PEM_SIGNFINAL = 0;

const int PEM_F_PEM_WRITE = 0;

const int PEM_F_PEM_WRITE_BIO = 0;

const int PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = 0;

const int PEM_F_PEM_WRITE_PRIVATEKEY = 0;

const int PEM_F_PEM_X509_INFO_READ = 0;

const int PEM_F_PEM_X509_INFO_READ_BIO = 0;

const int PEM_F_PEM_X509_INFO_WRITE_BIO = 0;

const int PKCS12_F_OPENSSL_ASC2UNI = 0;

const int PKCS12_F_OPENSSL_UNI2ASC = 0;

const int PKCS12_F_OPENSSL_UNI2UTF8 = 0;

const int PKCS12_F_OPENSSL_UTF82UNI = 0;

const int PKCS12_F_PKCS12_CREATE = 0;

const int PKCS12_F_PKCS12_GEN_MAC = 0;

const int PKCS12_F_PKCS12_INIT = 0;

const int PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = 0;

const int PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = 0;

const int PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = 0;

const int PKCS12_F_PKCS12_KEY_GEN_ASC = 0;

const int PKCS12_F_PKCS12_KEY_GEN_UNI = 0;

const int PKCS12_F_PKCS12_KEY_GEN_UTF8 = 0;

const int PKCS12_F_PKCS12_NEWPASS = 0;

const int PKCS12_F_PKCS12_PACK_P7DATA = 0;

const int PKCS12_F_PKCS12_PACK_P7ENCDATA = 0;

const int PKCS12_F_PKCS12_PARSE = 0;

const int PKCS12_F_PKCS12_PBE_CRYPT = 0;

const int PKCS12_F_PKCS12_PBE_KEYIVGEN = 0;

const int PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF = 0;

const int PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8 = 0;

const int PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT = 0;

const int PKCS12_F_PKCS12_SETUP_MAC = 0;

const int PKCS12_F_PKCS12_SET_MAC = 0;

const int PKCS12_F_PKCS12_UNPACK_AUTHSAFES = 0;

const int PKCS12_F_PKCS12_UNPACK_P7DATA = 0;

const int PKCS12_F_PKCS12_VERIFY_MAC = 0;

const int PKCS12_F_PKCS8_ENCRYPT = 0;

const int PKCS12_F_PKCS8_SET0_PBE = 0;

const int PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 0;

const int PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 0;

const int PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 0;

const int PKCS7_F_PKCS7_ADD_CERTIFICATE = 0;

const int PKCS7_F_PKCS7_ADD_CRL = 0;

const int PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 0;

const int PKCS7_F_PKCS7_ADD_SIGNATURE = 0;

const int PKCS7_F_PKCS7_ADD_SIGNER = 0;

const int PKCS7_F_PKCS7_BIO_ADD_DIGEST = 0;

const int PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 0;

const int PKCS7_F_PKCS7_CTRL = 0;

const int PKCS7_F_PKCS7_DATADECODE = 0;

const int PKCS7_F_PKCS7_DATAFINAL = 0;

const int PKCS7_F_PKCS7_DATAINIT = 0;

const int PKCS7_F_PKCS7_DATAVERIFY = 0;

const int PKCS7_F_PKCS7_DECRYPT = 0;

const int PKCS7_F_PKCS7_DECRYPT_RINFO = 0;

const int PKCS7_F_PKCS7_ENCODE_RINFO = 0;

const int PKCS7_F_PKCS7_ENCRYPT = 0;

const int PKCS7_F_PKCS7_FINAL = 0;

const int PKCS7_F_PKCS7_FIND_DIGEST = 0;

const int PKCS7_F_PKCS7_GET0_SIGNERS = 0;

const int PKCS7_F_PKCS7_RECIP_INFO_SET = 0;

const int PKCS7_F_PKCS7_SET_CIPHER = 0;

const int PKCS7_F_PKCS7_SET_CONTENT = 0;

const int PKCS7_F_PKCS7_SET_DIGEST = 0;

const int PKCS7_F_PKCS7_SET_TYPE = 0;

const int PKCS7_F_PKCS7_SIGN = 0;

const int PKCS7_F_PKCS7_SIGNATUREVERIFY = 0;

const int PKCS7_F_PKCS7_SIGNER_INFO_SET = 0;

const int PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 0;

const int PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 0;

const int PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 0;

const int PKCS7_F_PKCS7_VERIFY = 0;

const int RAND_F_DATA_COLLECT_METHOD = 0;

const int RAND_F_DRBG_BYTES = 0;

const int RAND_F_DRBG_GET_ENTROPY = 0;

const int RAND_F_DRBG_SETUP = 0;

const int RAND_F_GET_ENTROPY = 0;

const int RAND_F_RAND_BYTES = 0;

const int RAND_F_RAND_DRBG_ENABLE_LOCKING = 0;

const int RAND_F_RAND_DRBG_GENERATE = 0;

const int RAND_F_RAND_DRBG_GET_ENTROPY = 0;

const int RAND_F_RAND_DRBG_GET_NONCE = 0;

const int RAND_F_RAND_DRBG_INSTANTIATE = 0;

const int RAND_F_RAND_DRBG_NEW = 0;

const int RAND_F_RAND_DRBG_RESEED = 0;

const int RAND_F_RAND_DRBG_RESTART = 0;

const int RAND_F_RAND_DRBG_SET = 0;

const int RAND_F_RAND_DRBG_SET_DEFAULTS = 0;

const int RAND_F_RAND_DRBG_UNINSTANTIATE = 0;

const int RAND_F_RAND_LOAD_FILE = 0;

const int RAND_F_RAND_POOL_ACQUIRE_ENTROPY = 0;

const int RAND_F_RAND_POOL_ADD = 0;

const int RAND_F_RAND_POOL_ADD_BEGIN = 0;

const int RAND_F_RAND_POOL_ADD_END = 0;

const int RAND_F_RAND_POOL_ATTACH = 0;

const int RAND_F_RAND_POOL_BYTES_NEEDED = 0;

const int RAND_F_RAND_POOL_GROW = 0;

const int RAND_F_RAND_POOL_NEW = 0;

const int RAND_F_RAND_PSEUDO_BYTES = 0;

const int RAND_F_RAND_WRITE_FILE = 0;

const int RSA_F_CHECK_PADDING_MD = 0;

const int RSA_F_ENCODE_PKCS1 = 0;

const int RSA_F_INT_RSA_VERIFY = 0;

const int RSA_F_OLD_RSA_PRIV_DECODE = 0;

const int RSA_F_PKEY_PSS_INIT = 0;

const int RSA_F_PKEY_RSA_CTRL = 0;

const int RSA_F_PKEY_RSA_CTRL_STR = 0;

const int RSA_F_PKEY_RSA_SIGN = 0;

const int RSA_F_PKEY_RSA_VERIFY = 0;

const int RSA_F_PKEY_RSA_VERIFYRECOVER = 0;

const int RSA_F_RSA_ALGOR_TO_MD = 0;

const int RSA_F_RSA_BUILTIN_KEYGEN = 0;

const int RSA_F_RSA_CHECK_KEY = 0;

const int RSA_F_RSA_CHECK_KEY_EX = 0;

const int RSA_F_RSA_CMS_DECRYPT = 0;

const int RSA_F_RSA_CMS_VERIFY = 0;

const int RSA_F_RSA_ITEM_VERIFY = 0;

const int RSA_F_RSA_METH_DUP = 0;

const int RSA_F_RSA_METH_NEW = 0;

const int RSA_F_RSA_METH_SET1_NAME = 0;

const int RSA_F_RSA_MGF1_TO_MD = 0;

const int RSA_F_RSA_MULTIP_INFO_NEW = 0;

const int RSA_F_RSA_NEW_METHOD = 0;

const int RSA_F_RSA_NULL = 0;

const int RSA_F_RSA_NULL_PRIVATE_DECRYPT = 0;

const int RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 0;

const int RSA_F_RSA_NULL_PUBLIC_DECRYPT = 0;

const int RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 0;

const int RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 0;

const int RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 0;

const int RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 0;

const int RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 0;

const int RSA_F_RSA_PADDING_ADD_NONE = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 0;

const int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 0;

const int RSA_F_RSA_PADDING_ADD_SSLV23 = 0;

const int RSA_F_RSA_PADDING_ADD_X931 = 0;

const int RSA_F_RSA_PADDING_CHECK_NONE = 0;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 0;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 0;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 0;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 0;

const int RSA_F_RSA_PADDING_CHECK_SSLV23 = 0;

const int RSA_F_RSA_PADDING_CHECK_X931 = 0;

const int RSA_F_RSA_PARAM_DECODE = 0;

const int RSA_F_RSA_PRINT = 0;

const int RSA_F_RSA_PRINT_FP = 0;

const int RSA_F_RSA_PRIV_DECODE = 0;

const int RSA_F_RSA_PRIV_ENCODE = 0;

const int RSA_F_RSA_PSS_GET_PARAM = 0;

const int RSA_F_RSA_PSS_TO_CTX = 0;

const int RSA_F_RSA_PUB_DECODE = 0;

const int RSA_F_RSA_SETUP_BLINDING = 0;

const int RSA_F_RSA_SIGN = 0;

const int RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 0;

const int RSA_F_RSA_VERIFY = 0;

const int RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 0;

const int RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 0;

const int RSA_F_SETUP_TBUF = 0;

const int OSSL_STORE_F_FILE_CTRL = 0;

const int OSSL_STORE_F_FILE_FIND = 0;

const int OSSL_STORE_F_FILE_GET_PASS = 0;

const int OSSL_STORE_F_FILE_LOAD = 0;

const int OSSL_STORE_F_FILE_LOAD_TRY_DECODE = 0;

const int OSSL_STORE_F_FILE_NAME_TO_URI = 0;

const int OSSL_STORE_F_FILE_OPEN = 0;

const int OSSL_STORE_F_OSSL_STORE_ATTACH_PEM_BIO = 0;

const int OSSL_STORE_F_OSSL_STORE_EXPECT = 0;

const int OSSL_STORE_F_OSSL_STORE_FILE_ATTACH_PEM_BIO_INT = 0;

const int OSSL_STORE_F_OSSL_STORE_FIND = 0;

const int OSSL_STORE_F_OSSL_STORE_GET0_LOADER_INT = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_CERT = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_CRL = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_NAME_DESCRIPTION = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_PARAMS = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_GET1_PKEY = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_CERT = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_CRL = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_EMBEDDED = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_NAME = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_PARAMS = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_NEW_PKEY = 0;

const int OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION = 0;

const int OSSL_STORE_F_OSSL_STORE_INIT_ONCE = 0;

const int OSSL_STORE_F_OSSL_STORE_LOADER_NEW = 0;

const int OSSL_STORE_F_OSSL_STORE_OPEN = 0;

const int OSSL_STORE_F_OSSL_STORE_OPEN_INT = 0;

const int OSSL_STORE_F_OSSL_STORE_REGISTER_LOADER_INT = 0;

const int OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ALIAS = 0;

const int OSSL_STORE_F_OSSL_STORE_SEARCH_BY_ISSUER_SERIAL = 0;

const int OSSL_STORE_F_OSSL_STORE_SEARCH_BY_KEY_FINGERPRINT = 0;

const int OSSL_STORE_F_OSSL_STORE_SEARCH_BY_NAME = 0;

const int OSSL_STORE_F_OSSL_STORE_UNREGISTER_LOADER_INT = 0;

const int OSSL_STORE_F_TRY_DECODE_PARAMS = 0;

const int OSSL_STORE_F_TRY_DECODE_PKCS12 = 0;

const int OSSL_STORE_F_TRY_DECODE_PKCS8ENCRYPTED = 0;

const int TS_F_DEF_SERIAL_CB = 0;

const int TS_F_DEF_TIME_CB = 0;

const int TS_F_ESS_ADD_SIGNING_CERT = 0;

const int TS_F_ESS_ADD_SIGNING_CERT_V2 = 0;

const int TS_F_ESS_CERT_ID_NEW_INIT = 0;

const int TS_F_ESS_CERT_ID_V2_NEW_INIT = 0;

const int TS_F_ESS_SIGNING_CERT_NEW_INIT = 0;

const int TS_F_ESS_SIGNING_CERT_V2_NEW_INIT = 0;

const int TS_F_INT_TS_RESP_VERIFY_TOKEN = 0;

const int TS_F_PKCS7_TO_TS_TST_INFO = 0;

const int TS_F_TS_ACCURACY_SET_MICROS = 0;

const int TS_F_TS_ACCURACY_SET_MILLIS = 0;

const int TS_F_TS_ACCURACY_SET_SECONDS = 0;

const int TS_F_TS_CHECK_IMPRINTS = 0;

const int TS_F_TS_CHECK_NONCES = 0;

const int TS_F_TS_CHECK_POLICY = 0;

const int TS_F_TS_CHECK_SIGNING_CERTS = 0;

const int TS_F_TS_CHECK_STATUS_INFO = 0;

const int TS_F_TS_COMPUTE_IMPRINT = 0;

const int TS_F_TS_CONF_INVALID = 0;

const int TS_F_TS_CONF_LOAD_CERT = 0;

const int TS_F_TS_CONF_LOAD_CERTS = 0;

const int TS_F_TS_CONF_LOAD_KEY = 0;

const int TS_F_TS_CONF_LOOKUP_FAIL = 0;

const int TS_F_TS_CONF_SET_DEFAULT_ENGINE = 0;

const int TS_F_TS_GET_STATUS_TEXT = 0;

const int TS_F_TS_MSG_IMPRINT_SET_ALGO = 0;

const int TS_F_TS_REQ_SET_MSG_IMPRINT = 0;

const int TS_F_TS_REQ_SET_NONCE = 0;

const int TS_F_TS_REQ_SET_POLICY_ID = 0;

const int TS_F_TS_RESP_CREATE_RESPONSE = 0;

const int TS_F_TS_RESP_CREATE_TST_INFO = 0;

const int TS_F_TS_RESP_CTX_ADD_FAILURE_INFO = 0;

const int TS_F_TS_RESP_CTX_ADD_MD = 0;

const int TS_F_TS_RESP_CTX_ADD_POLICY = 0;

const int TS_F_TS_RESP_CTX_NEW = 0;

const int TS_F_TS_RESP_CTX_SET_ACCURACY = 0;

const int TS_F_TS_RESP_CTX_SET_CERTS = 0;

const int TS_F_TS_RESP_CTX_SET_DEF_POLICY = 0;

const int TS_F_TS_RESP_CTX_SET_SIGNER_CERT = 0;

const int TS_F_TS_RESP_CTX_SET_STATUS_INFO = 0;

const int TS_F_TS_RESP_GET_POLICY = 0;

const int TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION = 0;

const int TS_F_TS_RESP_SET_STATUS_INFO = 0;

const int TS_F_TS_RESP_SET_TST_INFO = 0;

const int TS_F_TS_RESP_SIGN = 0;

const int TS_F_TS_RESP_VERIFY_SIGNATURE = 0;

const int TS_F_TS_TST_INFO_SET_ACCURACY = 0;

const int TS_F_TS_TST_INFO_SET_MSG_IMPRINT = 0;

const int TS_F_TS_TST_INFO_SET_NONCE = 0;

const int TS_F_TS_TST_INFO_SET_POLICY_ID = 0;

const int TS_F_TS_TST_INFO_SET_SERIAL = 0;

const int TS_F_TS_TST_INFO_SET_TIME = 0;

const int TS_F_TS_TST_INFO_SET_TSA = 0;

const int TS_F_TS_VERIFY = 0;

const int TS_F_TS_VERIFY_CERT = 0;

const int TS_F_TS_VERIFY_CTX_NEW = 0;

const int UI_F_CLOSE_CONSOLE = 0;

const int UI_F_ECHO_CONSOLE = 0;

const int UI_F_GENERAL_ALLOCATE_BOOLEAN = 0;

const int UI_F_GENERAL_ALLOCATE_PROMPT = 0;

const int UI_F_NOECHO_CONSOLE = 0;

const int UI_F_OPEN_CONSOLE = 0;

const int UI_F_UI_CONSTRUCT_PROMPT = 0;

const int UI_F_UI_CREATE_METHOD = 0;

const int UI_F_UI_CTRL = 0;

const int UI_F_UI_DUP_ERROR_STRING = 0;

const int UI_F_UI_DUP_INFO_STRING = 0;

const int UI_F_UI_DUP_INPUT_BOOLEAN = 0;

const int UI_F_UI_DUP_INPUT_STRING = 0;

const int UI_F_UI_DUP_USER_DATA = 0;

const int UI_F_UI_DUP_VERIFY_STRING = 0;

const int UI_F_UI_GET0_RESULT = 0;

const int UI_F_UI_GET_RESULT_LENGTH = 0;

const int UI_F_UI_NEW_METHOD = 0;

const int UI_F_UI_PROCESS = 0;

const int UI_F_UI_SET_RESULT = 0;

const int UI_F_UI_SET_RESULT_EX = 0;

const int X509_F_ADD_CERT_DIR = 0;

const int X509_F_BUILD_CHAIN = 0;

const int X509_F_BY_FILE_CTRL = 0;

const int X509_F_CHECK_NAME_CONSTRAINTS = 0;

const int X509_F_CHECK_POLICY = 0;

const int X509_F_DANE_I2D = 0;

const int X509_F_DIR_CTRL = 0;

const int X509_F_GET_CERT_BY_SUBJECT = 0;

const int X509_F_I2D_X509_AUX = 0;

const int X509_F_LOOKUP_CERTS_SK = 0;

const int X509_F_NETSCAPE_SPKI_B64_DECODE = 0;

const int X509_F_NETSCAPE_SPKI_B64_ENCODE = 0;

const int X509_F_NEW_DIR = 0;

const int X509_F_X509AT_ADD1_ATTR = 0;

const int X509_F_X509V3_ADD_EXT = 0;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 0;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 0;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 0;

const int X509_F_X509_ATTRIBUTE_GET0_DATA = 0;

const int X509_F_X509_ATTRIBUTE_SET1_DATA = 0;

const int X509_F_X509_CHECK_PRIVATE_KEY = 0;

const int X509_F_X509_CRL_DIFF = 0;

const int X509_F_X509_CRL_METHOD_NEW = 0;

const int X509_F_X509_CRL_PRINT_FP = 0;

const int X509_F_X509_EXTENSION_CREATE_BY_NID = 0;

const int X509_F_X509_EXTENSION_CREATE_BY_OBJ = 0;

const int X509_F_X509_GET_PUBKEY_PARAMETERS = 0;

const int X509_F_X509_LOAD_CERT_CRL_FILE = 0;

const int X509_F_X509_LOAD_CERT_FILE = 0;

const int X509_F_X509_LOAD_CRL_FILE = 0;

const int X509_F_X509_LOOKUP_METH_NEW = 0;

const int X509_F_X509_LOOKUP_NEW = 0;

const int X509_F_X509_NAME_ADD_ENTRY = 0;

const int X509_F_X509_NAME_CANON = 0;

const int X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 0;

const int X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 0;

const int X509_F_X509_NAME_ENTRY_SET_OBJECT = 0;

const int X509_F_X509_NAME_ONELINE = 0;

const int X509_F_X509_NAME_PRINT = 0;

const int X509_F_X509_OBJECT_NEW = 0;

const int X509_F_X509_PRINT_EX_FP = 0;

const int X509_F_X509_PUBKEY_DECODE = 0;

const int X509_F_X509_PUBKEY_GET = 0;

const int X509_F_X509_PUBKEY_GET0 = 0;

const int X509_F_X509_PUBKEY_SET = 0;

const int X509_F_X509_REQ_CHECK_PRIVATE_KEY = 0;

const int X509_F_X509_REQ_PRINT_EX = 0;

const int X509_F_X509_REQ_PRINT_FP = 0;

const int X509_F_X509_REQ_TO_X509 = 0;

const int X509_F_X509_STORE_ADD_CERT = 0;

const int X509_F_X509_STORE_ADD_CRL = 0;

const int X509_F_X509_STORE_ADD_LOOKUP = 0;

const int X509_F_X509_STORE_CTX_GET1_ISSUER = 0;

const int X509_F_X509_STORE_CTX_INIT = 0;

const int X509_F_X509_STORE_CTX_NEW = 0;

const int X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 0;

const int X509_F_X509_STORE_NEW = 0;

const int X509_F_X509_TO_X509_REQ = 0;

const int X509_F_X509_TRUST_ADD = 0;

const int X509_F_X509_TRUST_SET = 0;

const int X509_F_X509_VERIFY_CERT = 0;

const int X509_F_X509_VERIFY_PARAM_NEW = 0;

const int X509V3_F_A2I_GENERAL_NAME = 0;

const int X509V3_F_ADDR_VALIDATE_PATH_INTERNAL = 0;

const int X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = 0;

const int X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = 0;

const int X509V3_F_BIGNUM_TO_STRING = 0;

const int X509V3_F_COPY_EMAIL = 0;

const int X509V3_F_COPY_ISSUER = 0;

const int X509V3_F_DO_DIRNAME = 0;

const int X509V3_F_DO_EXT_I2D = 0;

const int X509V3_F_DO_EXT_NCONF = 0;

const int X509V3_F_GNAMES_FROM_SECTNAME = 0;

const int X509V3_F_I2S_ASN1_ENUMERATED = 0;

const int X509V3_F_I2S_ASN1_IA5STRING = 0;

const int X509V3_F_I2S_ASN1_INTEGER = 0;

const int X509V3_F_I2V_AUTHORITY_INFO_ACCESS = 0;

const int X509V3_F_LEVEL_ADD_NODE = 0;

const int X509V3_F_NOTICE_SECTION = 0;

const int X509V3_F_NREF_NOS = 0;

const int X509V3_F_POLICY_CACHE_CREATE = 0;

const int X509V3_F_POLICY_CACHE_NEW = 0;

const int X509V3_F_POLICY_DATA_NEW = 0;

const int X509V3_F_POLICY_SECTION = 0;

const int X509V3_F_PROCESS_PCI_VALUE = 0;

const int X509V3_F_R2I_CERTPOL = 0;

const int X509V3_F_R2I_PCI = 0;

const int X509V3_F_S2I_ASN1_IA5STRING = 0;

const int X509V3_F_S2I_ASN1_INTEGER = 0;

const int X509V3_F_S2I_ASN1_OCTET_STRING = 0;

const int X509V3_F_S2I_SKEY_ID = 0;

const int X509V3_F_SET_DIST_POINT_NAME = 0;

const int X509V3_F_SXNET_ADD_ID_ASC = 0;

const int X509V3_F_SXNET_ADD_ID_INTEGER = 0;

const int X509V3_F_SXNET_ADD_ID_ULONG = 0;

const int X509V3_F_SXNET_GET_ID_ASC = 0;

const int X509V3_F_SXNET_GET_ID_ULONG = 0;

const int X509V3_F_TREE_INIT = 0;

const int X509V3_F_V2I_ASIDENTIFIERS = 0;

const int X509V3_F_V2I_ASN1_BIT_STRING = 0;

const int X509V3_F_V2I_AUTHORITY_INFO_ACCESS = 0;

const int X509V3_F_V2I_AUTHORITY_KEYID = 0;

const int X509V3_F_V2I_BASIC_CONSTRAINTS = 0;

const int X509V3_F_V2I_CRLD = 0;

const int X509V3_F_V2I_EXTENDED_KEY_USAGE = 0;

const int X509V3_F_V2I_GENERAL_NAMES = 0;

const int X509V3_F_V2I_GENERAL_NAME_EX = 0;

const int X509V3_F_V2I_IDP = 0;

const int X509V3_F_V2I_IPADDRBLOCKS = 0;

const int X509V3_F_V2I_ISSUER_ALT = 0;

const int X509V3_F_V2I_NAME_CONSTRAINTS = 0;

const int X509V3_F_V2I_POLICY_CONSTRAINTS = 0;

const int X509V3_F_V2I_POLICY_MAPPINGS = 0;

const int X509V3_F_V2I_SUBJECT_ALT = 0;

const int X509V3_F_V2I_TLS_FEATURE = 0;

const int X509V3_F_V3_GENERIC_EXTENSION = 0;

const int X509V3_F_X509V3_ADD1_I2D = 0;

const int X509V3_F_X509V3_ADD_VALUE = 0;

const int X509V3_F_X509V3_EXT_ADD = 0;

const int X509V3_F_X509V3_EXT_ADD_ALIAS = 0;

const int X509V3_F_X509V3_EXT_I2D = 0;

const int X509V3_F_X509V3_EXT_NCONF = 0;

const int X509V3_F_X509V3_GET_SECTION = 0;

const int X509V3_F_X509V3_GET_STRING = 0;

const int X509V3_F_X509V3_GET_VALUE_BOOL = 0;

const int X509V3_F_X509V3_PARSE_LIST = 0;

const int X509V3_F_X509_PURPOSE_ADD = 0;

const int X509V3_F_X509_PURPOSE_SET = 0;

const int EVP_R_OPERATON_NOT_INITIALIZED = 151;

const int CRYPTO_R_BAD_ALGORITHM_NAME = 117;

const int CRYPTO_R_CONFLICTING_NAMES = 118;

const int CRYPTO_R_HEX_STRING_TOO_SHORT = 121;

const int CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;

const int CRYPTO_R_INSUFFICIENT_DATA_SPACE = 106;

const int CRYPTO_R_INSUFFICIENT_PARAM_SIZE = 107;

const int CRYPTO_R_INSUFFICIENT_SECURE_DATA_SPACE = 108;

const int CRYPTO_R_INTEGER_OVERFLOW = 127;

const int CRYPTO_R_INVALID_NEGATIVE_VALUE = 122;

const int CRYPTO_R_INVALID_NULL_ARGUMENT = 109;

const int CRYPTO_R_INVALID_OSSL_PARAM_TYPE = 110;

const int CRYPTO_R_NO_PARAMS_TO_MERGE = 131;

const int CRYPTO_R_NO_SPACE_FOR_TERMINATING_NULL = 128;

const int CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;

const int CRYPTO_R_PARAM_CANNOT_BE_REPRESENTED_EXACTLY = 123;

const int CRYPTO_R_PARAM_NOT_INTEGER_TYPE = 124;

const int CRYPTO_R_PARAM_OF_INCOMPATIBLE_TYPE = 129;

const int CRYPTO_R_PARAM_UNSIGNED_INTEGER_NEGATIVE_VALUE_UNSUPPORTED = 125;

const int CRYPTO_R_PARAM_UNSUPPORTED_FLOATING_POINT_FORMAT = 130;

const int CRYPTO_R_PARAM_VALUE_TOO_LARGE_FOR_DESTINATION = 126;

const int CRYPTO_R_PROVIDER_ALREADY_EXISTS = 104;

const int CRYPTO_R_PROVIDER_SECTION_ERROR = 105;

const int CRYPTO_R_RANDOM_SECTION_ERROR = 119;

const int CRYPTO_R_SECURE_MALLOC_FAILURE = 111;

const int CRYPTO_R_STRING_TOO_LONG = 112;

const int CRYPTO_R_TOO_MANY_BYTES = 113;

const int CRYPTO_R_TOO_MANY_NAMES = 132;

const int CRYPTO_R_TOO_MANY_RECORDS = 114;

const int CRYPTO_R_TOO_SMALL_BUFFER = 116;

const int CRYPTO_R_UNKNOWN_NAME_IN_RANDOM_SECTION = 120;

const int CRYPTO_R_ZERO_LENGTH_NUMBER = 115;

const int OSSL_PARAM_INTEGER = 1;

const int OSSL_PARAM_UNSIGNED_INTEGER = 2;

const int OSSL_PARAM_REAL = 3;

const int OSSL_PARAM_UTF8_STRING = 4;

const int OSSL_PARAM_OCTET_STRING = 5;

const int OSSL_PARAM_UTF8_PTR = 6;

const int OSSL_PARAM_OCTET_PTR = 7;

const int SSLEAY_VERSION_NUMBER = 809500672;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int OPENSSL_ENGINES_DIR = 5;

const int OPENSSL_VERSION_STRING = 6;

const int OPENSSL_FULL_VERSION_STRING = 7;

const int OPENSSL_MODULES_DIR = 8;

const int OPENSSL_CPU_INFO = 9;

const int OPENSSL_WINCTX = 10;

const int OPENSSL_INFO_CONFIG_DIR = 1001;

const int OPENSSL_INFO_ENGINES_DIR = 1002;

const int OPENSSL_INFO_MODULES_DIR = 1003;

const int OPENSSL_INFO_DSO_EXTENSION = 1004;

const int OPENSSL_INFO_DIR_FILENAME_SEPARATOR = 1005;

const int OPENSSL_INFO_LIST_SEPARATOR = 1006;

const int OPENSSL_INFO_SEED_SOURCE = 1007;

const int OPENSSL_INFO_CPU_SETTINGS = 1008;

const int OPENSSL_INFO_WINDOWS_CONTEXT = 1009;

const int CRYPTO_EX_INDEX_SSL = 0;

const int CRYPTO_EX_INDEX_SSL_CTX = 1;

const int CRYPTO_EX_INDEX_SSL_SESSION = 2;

const int CRYPTO_EX_INDEX_X509 = 3;

const int CRYPTO_EX_INDEX_X509_STORE = 4;

const int CRYPTO_EX_INDEX_X509_STORE_CTX = 5;

const int CRYPTO_EX_INDEX_DH = 6;

const int CRYPTO_EX_INDEX_DSA = 7;

const int CRYPTO_EX_INDEX_EC_KEY = 8;

const int CRYPTO_EX_INDEX_RSA = 9;

const int CRYPTO_EX_INDEX_ENGINE = 10;

const int CRYPTO_EX_INDEX_UI = 11;

const int CRYPTO_EX_INDEX_BIO = 12;

const int CRYPTO_EX_INDEX_APP = 13;

const int CRYPTO_EX_INDEX_UI_METHOD = 14;

const int CRYPTO_EX_INDEX_RAND_DRBG = 15;

const int CRYPTO_EX_INDEX_DRBG = 15;

const int CRYPTO_EX_INDEX_OSSL_LIB_CTX = 16;

const int CRYPTO_EX_INDEX_EVP_PKEY = 17;

const int CRYPTO_EX_INDEX__COUNT = 18;

const int CRYPTO_LOCK = 1;

const int CRYPTO_UNLOCK = 2;

const int CRYPTO_READ = 4;

const int CRYPTO_WRITE = 8;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 1;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 2;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 4;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 8;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 16;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 32;

const int OPENSSL_INIT_LOAD_CONFIG = 64;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 128;

const int OPENSSL_INIT_ASYNC = 256;

const int OPENSSL_INIT_ENGINE_RDRAND = 512;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 1024;

const int OPENSSL_INIT_ENGINE_OPENSSL = 2048;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 4096;

const int OPENSSL_INIT_ENGINE_CAPI = 8192;

const int OPENSSL_INIT_ENGINE_PADLOCK = 16384;

const int OPENSSL_INIT_ENGINE_AFALG = 32768;

const int OPENSSL_INIT_ATFORK = 131072;

const int OPENSSL_INIT_NO_ATEXIT = 524288;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 30208;

const int _PTHREAD_MUTEX_SIG_init = 850045863;

const int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 850045857;

const int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 850045858;

const int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 850045859;

const int _PTHREAD_COND_SIG_init = 1018212795;

const int _PTHREAD_ONCE_SIG_init = 816954554;

const int _PTHREAD_RWLOCK_SIG_init = 766030772;

const int SCHED_OTHER = 1;

const int SCHED_FIFO = 4;

const int SCHED_RR = 2;

const int __SCHED_PARAM_SIZE__ = 4;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int PTHREAD_CREATE_JOINABLE = 1;

const int PTHREAD_CREATE_DETACHED = 2;

const int PTHREAD_INHERIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED = 2;

const int PTHREAD_CANCEL_ENABLE = 1;

const int PTHREAD_CANCEL_DISABLE = 0;

const int PTHREAD_CANCEL_DEFERRED = 2;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 0;

const int PTHREAD_SCOPE_SYSTEM = 1;

const int PTHREAD_SCOPE_PROCESS = 2;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_PRIVATE = 2;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 1;

const int PTHREAD_MUTEX_RECURSIVE = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;

const int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;

const int BN_R_ARG2_LT_ARG3 = 100;

const int BN_R_BAD_RECIPROCAL = 101;

const int BN_R_BIGNUM_TOO_LONG = 114;

const int BN_R_BITS_TOO_SMALL = 118;

const int BN_R_CALLED_WITH_EVEN_MODULUS = 102;

const int BN_R_DIV_BY_ZERO = 103;

const int BN_R_ENCODING_ERROR = 104;

const int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;

const int BN_R_INPUT_NOT_REDUCED = 110;

const int BN_R_INVALID_LENGTH = 106;

const int BN_R_INVALID_RANGE = 115;

const int BN_R_INVALID_SHIFT = 119;

const int BN_R_NOT_A_SQUARE = 111;

const int BN_R_NOT_INITIALIZED = 107;

const int BN_R_NO_INVERSE = 108;

const int BN_R_NO_PRIME_CANDIDATE = 121;

const int BN_R_NO_SOLUTION = 116;

const int BN_R_NO_SUITABLE_DIGEST = 120;

const int BN_R_PRIVATE_KEY_TOO_LARGE = 117;

const int BN_R_P_IS_NOT_PRIME = 112;

const int BN_R_TOO_MANY_ITERATIONS = 113;

const int BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;

const int BN_BYTES = 8;

const int BN_BITS2 = 64;

const int BN_BITS = 128;

const int BN_TBIT = -9223372036854775808;

const int BN_FLG_MALLOCED = 1;

const int BN_FLG_STATIC_DATA = 2;

const int BN_FLG_CONSTTIME = 4;

const int BN_FLG_SECURE = 8;

const int BN_FLG_EXP_CONSTTIME = 4;

const int BN_FLG_FREE = 32768;

const int BN_RAND_TOP_ANY = -1;

const int BN_RAND_TOP_ONE = 0;

const int BN_RAND_TOP_TWO = 1;

const int BN_RAND_BOTTOM_ANY = 0;

const int BN_RAND_BOTTOM_ODD = 1;

const int BN_prime_checks = 0;

const int BN_BLINDING_NO_UPDATE = 1;

const int BN_BLINDING_NO_RECREATE = 2;

const String OSSL_CIPHER_CTS_MODE_CS1 = 'CS1';

const String OSSL_CIPHER_CTS_MODE_CS2 = 'CS2';

const String OSSL_CIPHER_CTS_MODE_CS3 = 'CS3';

const String OSSL_CIPHER_NAME_AES_128_GCM_SIV = 'AES-128-GCM-SIV';

const String OSSL_CIPHER_NAME_AES_192_GCM_SIV = 'AES-192-GCM-SIV';

const String OSSL_CIPHER_NAME_AES_256_GCM_SIV = 'AES-256-GCM-SIV';

const String OSSL_DIGEST_NAME_MD5 = 'MD5';

const String OSSL_DIGEST_NAME_MD5_SHA1 = 'MD5-SHA1';

const String OSSL_DIGEST_NAME_SHA1 = 'SHA1';

const String OSSL_DIGEST_NAME_SHA2_224 = 'SHA2-224';

const String OSSL_DIGEST_NAME_SHA2_256 = 'SHA2-256';

const String OSSL_DIGEST_NAME_SHA2_256_192 = 'SHA2-256/192';

const String OSSL_DIGEST_NAME_SHA2_384 = 'SHA2-384';

const String OSSL_DIGEST_NAME_SHA2_512 = 'SHA2-512';

const String OSSL_DIGEST_NAME_SHA2_512_224 = 'SHA2-512/224';

const String OSSL_DIGEST_NAME_SHA2_512_256 = 'SHA2-512/256';

const String OSSL_DIGEST_NAME_MD2 = 'MD2';

const String OSSL_DIGEST_NAME_MD4 = 'MD4';

const String OSSL_DIGEST_NAME_MDC2 = 'MDC2';

const String OSSL_DIGEST_NAME_RIPEMD160 = 'RIPEMD160';

const String OSSL_DIGEST_NAME_SHA3_224 = 'SHA3-224';

const String OSSL_DIGEST_NAME_SHA3_256 = 'SHA3-256';

const String OSSL_DIGEST_NAME_SHA3_384 = 'SHA3-384';

const String OSSL_DIGEST_NAME_SHA3_512 = 'SHA3-512';

const String OSSL_DIGEST_NAME_KECCAK_KMAC128 = 'KECCAK-KMAC-128';

const String OSSL_DIGEST_NAME_KECCAK_KMAC256 = 'KECCAK-KMAC-256';

const String OSSL_DIGEST_NAME_SM3 = 'SM3';

const String OSSL_MAC_NAME_BLAKE2BMAC = 'BLAKE2BMAC';

const String OSSL_MAC_NAME_BLAKE2SMAC = 'BLAKE2SMAC';

const String OSSL_MAC_NAME_CMAC = 'CMAC';

const String OSSL_MAC_NAME_GMAC = 'GMAC';

const String OSSL_MAC_NAME_HMAC = 'HMAC';

const String OSSL_MAC_NAME_KMAC128 = 'KMAC128';

const String OSSL_MAC_NAME_KMAC256 = 'KMAC256';

const String OSSL_MAC_NAME_POLY1305 = 'POLY1305';

const String OSSL_MAC_NAME_SIPHASH = 'SIPHASH';

const String OSSL_KDF_NAME_HKDF = 'HKDF';

const String OSSL_KDF_NAME_TLS1_3_KDF = 'TLS13-KDF';

const String OSSL_KDF_NAME_PBKDF1 = 'PBKDF1';

const String OSSL_KDF_NAME_PBKDF2 = 'PBKDF2';

const String OSSL_KDF_NAME_SCRYPT = 'SCRYPT';

const String OSSL_KDF_NAME_SSHKDF = 'SSHKDF';

const String OSSL_KDF_NAME_SSKDF = 'SSKDF';

const String OSSL_KDF_NAME_TLS1_PRF = 'TLS1-PRF';

const String OSSL_KDF_NAME_X942KDF_ASN1 = 'X942KDF-ASN1';

const String OSSL_KDF_NAME_X942KDF_CONCAT = 'X942KDF-CONCAT';

const String OSSL_KDF_NAME_X963KDF = 'X963KDF';

const String OSSL_KDF_NAME_KBKDF = 'KBKDF';

const String OSSL_KDF_NAME_KRB5KDF = 'KRB5KDF';

const String OSSL_KDF_NAME_HMACDRBGKDF = 'HMAC-DRBG-KDF';

const String OSSL_PKEY_RSA_PAD_MODE_NONE = 'none';

const String OSSL_PKEY_RSA_PAD_MODE_PKCSV15 = 'pkcs1';

const String OSSL_PKEY_RSA_PAD_MODE_OAEP = 'oaep';

const String OSSL_PKEY_RSA_PAD_MODE_X931 = 'x931';

const String OSSL_PKEY_RSA_PAD_MODE_PSS = 'pss';

const String OSSL_PKEY_RSA_PSS_SALT_LEN_DIGEST = 'digest';

const String OSSL_PKEY_RSA_PSS_SALT_LEN_MAX = 'max';

const String OSSL_PKEY_RSA_PSS_SALT_LEN_AUTO = 'auto';

const String OSSL_PKEY_RSA_PSS_SALT_LEN_AUTO_DIGEST_MAX = 'auto-digestmax';

const String OSSL_PKEY_EC_ENCODING_EXPLICIT = 'explicit';

const String OSSL_PKEY_EC_ENCODING_GROUP = 'named_curve';

const String OSSL_PKEY_EC_POINT_CONVERSION_FORMAT_UNCOMPRESSED = 'uncompressed';

const String OSSL_PKEY_EC_POINT_CONVERSION_FORMAT_COMPRESSED = 'compressed';

const String OSSL_PKEY_EC_POINT_CONVERSION_FORMAT_HYBRID = 'hybrid';

const String OSSL_PKEY_EC_GROUP_CHECK_DEFAULT = 'default';

const String OSSL_PKEY_EC_GROUP_CHECK_NAMED = 'named';

const String OSSL_PKEY_EC_GROUP_CHECK_NAMED_NIST = 'named-nist';

const String OSSL_KEM_PARAM_OPERATION_RSASVE = 'RSASVE';

const String OSSL_KEM_PARAM_OPERATION_DHKEM = 'DHKEM';

const String OSSL_ALG_PARAM_ALGORITHM_ID = 'algorithm-id';

const String OSSL_ALG_PARAM_ALGORITHM_ID_PARAMS = 'algorithm-id-params';

const String OSSL_ALG_PARAM_CIPHER = 'cipher';

const String OSSL_ALG_PARAM_DIGEST = 'digest';

const String OSSL_ALG_PARAM_ENGINE = 'engine';

const String OSSL_ALG_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_ALG_PARAM_MAC = 'mac';

const String OSSL_ALG_PARAM_PROPERTIES = 'properties';

const String OSSL_ASYM_CIPHER_PARAM_DIGEST = 'digest';

const String OSSL_ASYM_CIPHER_PARAM_ENGINE = 'engine';

const String OSSL_ASYM_CIPHER_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_ASYM_CIPHER_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_ASYM_CIPHER_PARAM_FIPS_RSA_PKCS15_PAD_DISABLED =
    'rsa-pkcs15-pad-disabled';

const String OSSL_ASYM_CIPHER_PARAM_IMPLICIT_REJECTION = 'implicit-rejection';

const String OSSL_ASYM_CIPHER_PARAM_MGF1_DIGEST = 'mgf1-digest';

const String OSSL_ASYM_CIPHER_PARAM_MGF1_DIGEST_PROPS = 'mgf1-properties';

const String OSSL_ASYM_CIPHER_PARAM_OAEP_DIGEST = 'digest';

const String OSSL_ASYM_CIPHER_PARAM_OAEP_DIGEST_PROPS = 'digest-props';

const String OSSL_ASYM_CIPHER_PARAM_OAEP_LABEL = 'oaep-label';

const String OSSL_ASYM_CIPHER_PARAM_PAD_MODE = 'pad-mode';

const String OSSL_ASYM_CIPHER_PARAM_PROPERTIES = 'properties';

const String OSSL_ASYM_CIPHER_PARAM_TLS_CLIENT_VERSION = 'tls-client-version';

const String OSSL_ASYM_CIPHER_PARAM_TLS_NEGOTIATED_VERSION =
    'tls-negotiated-version';

const String OSSL_CAPABILITY_TLS_GROUP_ALG = 'tls-group-alg';

const String OSSL_CAPABILITY_TLS_GROUP_ID = 'tls-group-id';

const String OSSL_CAPABILITY_TLS_GROUP_IS_KEM = 'tls-group-is-kem';

const String OSSL_CAPABILITY_TLS_GROUP_MAX_DTLS = 'tls-max-dtls';

const String OSSL_CAPABILITY_TLS_GROUP_MAX_TLS = 'tls-max-tls';

const String OSSL_CAPABILITY_TLS_GROUP_MIN_DTLS = 'tls-min-dtls';

const String OSSL_CAPABILITY_TLS_GROUP_MIN_TLS = 'tls-min-tls';

const String OSSL_CAPABILITY_TLS_GROUP_NAME = 'tls-group-name';

const String OSSL_CAPABILITY_TLS_GROUP_NAME_INTERNAL =
    'tls-group-name-internal';

const String OSSL_CAPABILITY_TLS_GROUP_SECURITY_BITS = 'tls-group-sec-bits';

const String OSSL_CAPABILITY_TLS_SIGALG_CODE_POINT = 'tls-sigalg-code-point';

const String OSSL_CAPABILITY_TLS_SIGALG_HASH_NAME = 'tls-sigalg-hash-name';

const String OSSL_CAPABILITY_TLS_SIGALG_HASH_OID = 'tls-sigalg-hash-oid';

const String OSSL_CAPABILITY_TLS_SIGALG_IANA_NAME = 'tls-sigalg-iana-name';

const String OSSL_CAPABILITY_TLS_SIGALG_KEYTYPE = 'tls-sigalg-keytype';

const String OSSL_CAPABILITY_TLS_SIGALG_KEYTYPE_OID = 'tls-sigalg-keytype-oid';

const String OSSL_CAPABILITY_TLS_SIGALG_MAX_TLS = 'tls-max-tls';

const String OSSL_CAPABILITY_TLS_SIGALG_MIN_TLS = 'tls-min-tls';

const String OSSL_CAPABILITY_TLS_SIGALG_NAME = 'tls-sigalg-name';

const String OSSL_CAPABILITY_TLS_SIGALG_OID = 'tls-sigalg-oid';

const String OSSL_CAPABILITY_TLS_SIGALG_SECURITY_BITS = 'tls-sigalg-sec-bits';

const String OSSL_CAPABILITY_TLS_SIGALG_SIG_NAME = 'tls-sigalg-sig-name';

const String OSSL_CAPABILITY_TLS_SIGALG_SIG_OID = 'tls-sigalg-sig-oid';

const String OSSL_CIPHER_PARAM_AEAD = 'aead';

const String OSSL_CIPHER_PARAM_AEAD_IVLEN = 'ivlen';

const String OSSL_CIPHER_PARAM_AEAD_IV_GENERATED = 'iv-generated';

const String OSSL_CIPHER_PARAM_AEAD_MAC_KEY = 'mackey';

const String OSSL_CIPHER_PARAM_AEAD_TAG = 'tag';

const String OSSL_CIPHER_PARAM_AEAD_TAGLEN = 'taglen';

const String OSSL_CIPHER_PARAM_AEAD_TLS1_AAD = 'tlsaad';

const String OSSL_CIPHER_PARAM_AEAD_TLS1_AAD_PAD = 'tlsaadpad';

const String OSSL_CIPHER_PARAM_AEAD_TLS1_GET_IV_GEN = 'tlsivgen';

const String OSSL_CIPHER_PARAM_AEAD_TLS1_IV_FIXED = 'tlsivfixed';

const String OSSL_CIPHER_PARAM_AEAD_TLS1_SET_IV_INV = 'tlsivinv';

const String OSSL_CIPHER_PARAM_ALGORITHM_ID = 'algorithm-id';

const String OSSL_CIPHER_PARAM_ALGORITHM_ID_PARAMS = 'algorithm-id-params';

const String OSSL_CIPHER_PARAM_ALGORITHM_ID_PARAMS_OLD = 'alg_id_param';

const String OSSL_CIPHER_PARAM_BLOCK_SIZE = 'blocksize';

const String OSSL_CIPHER_PARAM_CTS = 'cts';

const String OSSL_CIPHER_PARAM_CTS_MODE = 'cts_mode';

const String OSSL_CIPHER_PARAM_CUSTOM_IV = 'custom-iv';

const String OSSL_CIPHER_PARAM_DECRYPT_ONLY = 'decrypt-only';

const String OSSL_CIPHER_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_CIPHER_PARAM_FIPS_ENCRYPT_CHECK = 'encrypt-check';

const String OSSL_CIPHER_PARAM_HAS_RAND_KEY = 'has-randkey';

const String OSSL_CIPHER_PARAM_IV = 'iv';

const String OSSL_CIPHER_PARAM_IVLEN = 'ivlen';

const String OSSL_CIPHER_PARAM_KEYLEN = 'keylen';

const String OSSL_CIPHER_PARAM_MODE = 'mode';

const String OSSL_CIPHER_PARAM_NUM = 'num';

const String OSSL_CIPHER_PARAM_PADDING = 'padding';

const String OSSL_CIPHER_PARAM_RANDOM_KEY = 'randkey';

const String OSSL_CIPHER_PARAM_RC2_KEYBITS = 'keybits';

const String OSSL_CIPHER_PARAM_ROUNDS = 'rounds';

const String OSSL_CIPHER_PARAM_SPEED = 'speed';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK = 'tls-multi';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_AAD = 'tls1multi_aad';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_AAD_PACKLEN =
    'tls1multi_aadpacklen';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_ENC = 'tls1multi_enc';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_ENC_IN = 'tls1multi_encin';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_ENC_LEN = 'tls1multi_enclen';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_INTERLEAVE =
    'tls1multi_interleave';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_MAX_BUFSIZE =
    'tls1multi_maxbufsz';

const String OSSL_CIPHER_PARAM_TLS1_MULTIBLOCK_MAX_SEND_FRAGMENT =
    'tls1multi_maxsndfrag';

const String OSSL_CIPHER_PARAM_TLS_MAC = 'tls-mac';

const String OSSL_CIPHER_PARAM_TLS_MAC_SIZE = 'tls-mac-size';

const String OSSL_CIPHER_PARAM_TLS_VERSION = 'tls-version';

const String OSSL_CIPHER_PARAM_UPDATED_IV = 'updated-iv';

const String OSSL_CIPHER_PARAM_USE_BITS = 'use-bits';

const String OSSL_CIPHER_PARAM_XTS_STANDARD = 'xts_standard';

const String OSSL_DECODER_PARAM_PROPERTIES = 'properties';

const String OSSL_DIGEST_PARAM_ALGID_ABSENT = 'algid-absent';

const String OSSL_DIGEST_PARAM_BLOCK_SIZE = 'blocksize';

const String OSSL_DIGEST_PARAM_MICALG = 'micalg';

const String OSSL_DIGEST_PARAM_PAD_TYPE = 'pad-type';

const String OSSL_DIGEST_PARAM_SIZE = 'size';

const String OSSL_DIGEST_PARAM_SSL3_MS = 'ssl3-ms';

const String OSSL_DIGEST_PARAM_XOF = 'xof';

const String OSSL_DIGEST_PARAM_XOFLEN = 'xoflen';

const String OSSL_DRBG_PARAM_CIPHER = 'cipher';

const String OSSL_DRBG_PARAM_DIGEST = 'digest';

const String OSSL_DRBG_PARAM_ENTROPY_REQUIRED = 'entropy_required';

const String OSSL_DRBG_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_DRBG_PARAM_FIPS_DIGEST_CHECK = 'digest-check';

const String OSSL_DRBG_PARAM_MAC = 'mac';

const String OSSL_DRBG_PARAM_MAX_ADINLEN = 'max_adinlen';

const String OSSL_DRBG_PARAM_MAX_ENTROPYLEN = 'max_entropylen';

const String OSSL_DRBG_PARAM_MAX_LENGTH = 'maxium_length';

const String OSSL_DRBG_PARAM_MAX_NONCELEN = 'max_noncelen';

const String OSSL_DRBG_PARAM_MAX_PERSLEN = 'max_perslen';

const String OSSL_DRBG_PARAM_MIN_ENTROPYLEN = 'min_entropylen';

const String OSSL_DRBG_PARAM_MIN_LENGTH = 'minium_length';

const String OSSL_DRBG_PARAM_MIN_NONCELEN = 'min_noncelen';

const String OSSL_DRBG_PARAM_PREDICTION_RESISTANCE = 'prediction_resistance';

const String OSSL_DRBG_PARAM_PROPERTIES = 'properties';

const String OSSL_DRBG_PARAM_RANDOM_DATA = 'random_data';

const String OSSL_DRBG_PARAM_RESEED_COUNTER = 'reseed_counter';

const String OSSL_DRBG_PARAM_RESEED_REQUESTS = 'reseed_requests';

const String OSSL_DRBG_PARAM_RESEED_TIME = 'reseed_time';

const String OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL = 'reseed_time_interval';

const String OSSL_DRBG_PARAM_SIZE = 'size';

const String OSSL_DRBG_PARAM_USE_DF = 'use_derivation_function';

const String OSSL_ENCODER_PARAM_CIPHER = 'cipher';

const String OSSL_ENCODER_PARAM_ENCRYPT_LEVEL = 'encrypt-level';

const String OSSL_ENCODER_PARAM_PROPERTIES = 'properties';

const String OSSL_ENCODER_PARAM_SAVE_PARAMETERS = 'save-parameters';

const String OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE = 'ecdh-cofactor-mode';

const String OSSL_EXCHANGE_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_EXCHANGE_PARAM_FIPS_DIGEST_CHECK = 'digest-check';

const String OSSL_EXCHANGE_PARAM_FIPS_ECDH_COFACTOR_CHECK =
    'ecdh-cofactor-check';

const String OSSL_EXCHANGE_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_EXCHANGE_PARAM_KDF_DIGEST = 'kdf-digest';

const String OSSL_EXCHANGE_PARAM_KDF_DIGEST_PROPS = 'kdf-digest-props';

const String OSSL_EXCHANGE_PARAM_KDF_OUTLEN = 'kdf-outlen';

const String OSSL_EXCHANGE_PARAM_KDF_TYPE = 'kdf-type';

const String OSSL_EXCHANGE_PARAM_KDF_UKM = 'kdf-ukm';

const String OSSL_EXCHANGE_PARAM_PAD = 'pad';

const String OSSL_GEN_PARAM_ITERATION = 'iteration';

const String OSSL_GEN_PARAM_POTENTIAL = 'potential';

const String OSSL_KDF_PARAM_ARGON2_AD = 'ad';

const String OSSL_KDF_PARAM_ARGON2_LANES = 'lanes';

const String OSSL_KDF_PARAM_ARGON2_MEMCOST = 'memcost';

const String OSSL_KDF_PARAM_ARGON2_VERSION = 'version';

const String OSSL_KDF_PARAM_CEK_ALG = 'cekalg';

const String OSSL_KDF_PARAM_CIPHER = 'cipher';

const String OSSL_KDF_PARAM_CONSTANT = 'constant';

const String OSSL_KDF_PARAM_DATA = 'data';

const String OSSL_KDF_PARAM_DIGEST = 'digest';

const String OSSL_KDF_PARAM_EARLY_CLEAN = 'early_clean';

const String OSSL_KDF_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_KDF_PARAM_FIPS_DIGEST_CHECK = 'digest-check';

const String OSSL_KDF_PARAM_FIPS_EMS_CHECK = 'ems_check';

const String OSSL_KDF_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_KDF_PARAM_HMACDRBG_ENTROPY = 'entropy';

const String OSSL_KDF_PARAM_HMACDRBG_NONCE = 'nonce';

const String OSSL_KDF_PARAM_INFO = 'info';

const String OSSL_KDF_PARAM_ITER = 'iter';

const String OSSL_KDF_PARAM_KBKDF_R = 'r';

const String OSSL_KDF_PARAM_KBKDF_USE_L = 'use-l';

const String OSSL_KDF_PARAM_KBKDF_USE_SEPARATOR = 'use-separator';

const String OSSL_KDF_PARAM_KEY = 'key';

const String OSSL_KDF_PARAM_LABEL = 'label';

const String OSSL_KDF_PARAM_MAC = 'mac';

const String OSSL_KDF_PARAM_MAC_SIZE = 'maclen';

const String OSSL_KDF_PARAM_MODE = 'mode';

const String OSSL_KDF_PARAM_PASSWORD = 'pass';

const String OSSL_KDF_PARAM_PKCS12_ID = 'id';

const String OSSL_KDF_PARAM_PKCS5 = 'pkcs5';

const String OSSL_KDF_PARAM_PREFIX = 'prefix';

const String OSSL_KDF_PARAM_PROPERTIES = 'properties';

const String OSSL_KDF_PARAM_SALT = 'salt';

const String OSSL_KDF_PARAM_SCRYPT_MAXMEM = 'maxmem_bytes';

const String OSSL_KDF_PARAM_SCRYPT_N = 'n';

const String OSSL_KDF_PARAM_SCRYPT_P = 'p';

const String OSSL_KDF_PARAM_SCRYPT_R = 'r';

const String OSSL_KDF_PARAM_SECRET = 'secret';

const String OSSL_KDF_PARAM_SEED = 'seed';

const String OSSL_KDF_PARAM_SIZE = 'size';

const String OSSL_KDF_PARAM_SSHKDF_SESSION_ID = 'session_id';

const String OSSL_KDF_PARAM_SSHKDF_TYPE = 'type';

const String OSSL_KDF_PARAM_SSHKDF_XCGHASH = 'xcghash';

const String OSSL_KDF_PARAM_THREADS = 'threads';

const String OSSL_KDF_PARAM_UKM = 'ukm';

const String OSSL_KDF_PARAM_X942_ACVPINFO = 'acvp-info';

const String OSSL_KDF_PARAM_X942_PARTYUINFO = 'partyu-info';

const String OSSL_KDF_PARAM_X942_PARTYVINFO = 'partyv-info';

const String OSSL_KDF_PARAM_X942_SUPP_PRIVINFO = 'supp-privinfo';

const String OSSL_KDF_PARAM_X942_SUPP_PUBINFO = 'supp-pubinfo';

const String OSSL_KDF_PARAM_X942_USE_KEYBITS = 'use-keybits';

const String OSSL_KEM_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_KEM_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_KEM_PARAM_IKME = 'ikme';

const String OSSL_KEM_PARAM_OPERATION = 'operation';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_BLOCK_PADDING = 'block_padding';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_HS_PADDING = 'hs_padding';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_MAX_EARLY_DATA = 'max_early_data';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_MAX_FRAG_LEN = 'max_frag_len';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_MODE = 'mode';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_OPTIONS = 'options';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_READ_AHEAD = 'read_ahead';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_STREAM_MAC = 'stream_mac';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_TLSTREE = 'tlstree';

const String OSSL_LIBSSL_RECORD_LAYER_PARAM_USE_ETM = 'use_etm';

const String OSSL_LIBSSL_RECORD_LAYER_READ_BUFFER_LEN = 'read_buffer_len';

const String OSSL_MAC_PARAM_BLOCK_SIZE = 'block-size';

const String OSSL_MAC_PARAM_CIPHER = 'cipher';

const String OSSL_MAC_PARAM_CUSTOM = 'custom';

const String OSSL_MAC_PARAM_C_ROUNDS = 'c-rounds';

const String OSSL_MAC_PARAM_DIGEST = 'digest';

const String OSSL_MAC_PARAM_DIGEST_NOINIT = 'digest-noinit';

const String OSSL_MAC_PARAM_DIGEST_ONESHOT = 'digest-oneshot';

const String OSSL_MAC_PARAM_D_ROUNDS = 'd-rounds';

const String OSSL_MAC_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_MAC_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_MAC_PARAM_FIPS_NO_SHORT_MAC = 'no-short-mac';

const String OSSL_MAC_PARAM_IV = 'iv';

const String OSSL_MAC_PARAM_KEY = 'key';

const String OSSL_MAC_PARAM_PROPERTIES = 'properties';

const String OSSL_MAC_PARAM_SALT = 'salt';

const String OSSL_MAC_PARAM_SIZE = 'size';

const String OSSL_MAC_PARAM_TLS_DATA_SIZE = 'tls-data-size';

const String OSSL_MAC_PARAM_XOF = 'xof';

const String OSSL_OBJECT_PARAM_DATA = 'data';

const String OSSL_OBJECT_PARAM_DATA_STRUCTURE = 'data-structure';

const String OSSL_OBJECT_PARAM_DATA_TYPE = 'data-type';

const String OSSL_OBJECT_PARAM_DESC = 'desc';

const String OSSL_OBJECT_PARAM_REFERENCE = 'reference';

const String OSSL_OBJECT_PARAM_TYPE = 'type';

const String OSSL_PASSPHRASE_PARAM_INFO = 'info';

const String OSSL_PKEY_PARAM_ALGORITHM_ID = 'algorithm-id';

const String OSSL_PKEY_PARAM_ALGORITHM_ID_PARAMS = 'algorithm-id-params';

const String OSSL_PKEY_PARAM_BITS = 'bits';

const String OSSL_PKEY_PARAM_CIPHER = 'cipher';

const String OSSL_PKEY_PARAM_DEFAULT_DIGEST = 'default-digest';

const String OSSL_PKEY_PARAM_DHKEM_IKM = 'dhkem-ikm';

const String OSSL_PKEY_PARAM_DH_GENERATOR = 'safeprime-generator';

const String OSSL_PKEY_PARAM_DH_PRIV_LEN = 'priv_len';

const String OSSL_PKEY_PARAM_DIGEST = 'digest';

const String OSSL_PKEY_PARAM_DIGEST_SIZE = 'digest-size';

const String OSSL_PKEY_PARAM_DIST_ID = 'distid';

const String OSSL_PKEY_PARAM_EC_A = 'a';

const String OSSL_PKEY_PARAM_EC_B = 'b';

const String OSSL_PKEY_PARAM_EC_CHAR2_M = 'm';

const String OSSL_PKEY_PARAM_EC_CHAR2_PP_K1 = 'k1';

const String OSSL_PKEY_PARAM_EC_CHAR2_PP_K2 = 'k2';

const String OSSL_PKEY_PARAM_EC_CHAR2_PP_K3 = 'k3';

const String OSSL_PKEY_PARAM_EC_CHAR2_TP_BASIS = 'tp';

const String OSSL_PKEY_PARAM_EC_CHAR2_TYPE = 'basis-type';

const String OSSL_PKEY_PARAM_EC_COFACTOR = 'cofactor';

const String OSSL_PKEY_PARAM_EC_DECODED_FROM_EXPLICIT_PARAMS =
    'decoded-from-explicit';

const String OSSL_PKEY_PARAM_EC_ENCODING = 'encoding';

const String OSSL_PKEY_PARAM_EC_FIELD_TYPE = 'field-type';

const String OSSL_PKEY_PARAM_EC_GENERATOR = 'generator';

const String OSSL_PKEY_PARAM_EC_GROUP_CHECK_TYPE = 'group-check';

const String OSSL_PKEY_PARAM_EC_INCLUDE_PUBLIC = 'include-public';

const String OSSL_PKEY_PARAM_EC_ORDER = 'order';

const String OSSL_PKEY_PARAM_EC_P = 'p';

const String OSSL_PKEY_PARAM_EC_POINT_CONVERSION_FORMAT = 'point-format';

const String OSSL_PKEY_PARAM_EC_PUB_X = 'qx';

const String OSSL_PKEY_PARAM_EC_PUB_Y = 'qy';

const String OSSL_PKEY_PARAM_EC_SEED = 'seed';

const String OSSL_PKEY_PARAM_ENCODED_PUBLIC_KEY = 'encoded-pub-key';

const String OSSL_PKEY_PARAM_ENGINE = 'engine';

const String OSSL_PKEY_PARAM_FFC_COFACTOR = 'j';

const String OSSL_PKEY_PARAM_FFC_DIGEST = 'digest';

const String OSSL_PKEY_PARAM_FFC_DIGEST_PROPS = 'properties';

const String OSSL_PKEY_PARAM_FFC_G = 'g';

const String OSSL_PKEY_PARAM_FFC_GINDEX = 'gindex';

const String OSSL_PKEY_PARAM_FFC_H = 'hindex';

const String OSSL_PKEY_PARAM_FFC_P = 'p';

const String OSSL_PKEY_PARAM_FFC_PBITS = 'pbits';

const String OSSL_PKEY_PARAM_FFC_PCOUNTER = 'pcounter';

const String OSSL_PKEY_PARAM_FFC_Q = 'q';

const String OSSL_PKEY_PARAM_FFC_QBITS = 'qbits';

const String OSSL_PKEY_PARAM_FFC_SEED = 'seed';

const String OSSL_PKEY_PARAM_FFC_TYPE = 'type';

const String OSSL_PKEY_PARAM_FFC_VALIDATE_G = 'validate-g';

const String OSSL_PKEY_PARAM_FFC_VALIDATE_LEGACY = 'validate-legacy';

const String OSSL_PKEY_PARAM_FFC_VALIDATE_PQ = 'validate-pq';

const String OSSL_PKEY_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_PKEY_PARAM_FIPS_DIGEST_CHECK = 'digest-check';

const String OSSL_PKEY_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_PKEY_PARAM_FIPS_SIGN_CHECK = 'sign-check';

const String OSSL_PKEY_PARAM_GROUP_NAME = 'group';

const String OSSL_PKEY_PARAM_IMPLICIT_REJECTION = 'implicit-rejection';

const String OSSL_PKEY_PARAM_MANDATORY_DIGEST = 'mandatory-digest';

const String OSSL_PKEY_PARAM_MASKGENFUNC = 'mgf';

const String OSSL_PKEY_PARAM_MAX_SIZE = 'max-size';

const String OSSL_PKEY_PARAM_MGF1_DIGEST = 'mgf1-digest';

const String OSSL_PKEY_PARAM_MGF1_PROPERTIES = 'mgf1-properties';

const String OSSL_PKEY_PARAM_PAD_MODE = 'pad-mode';

const String OSSL_PKEY_PARAM_PRIV_KEY = 'priv';

const String OSSL_PKEY_PARAM_PROPERTIES = 'properties';

const String OSSL_PKEY_PARAM_PUB_KEY = 'pub';

const String OSSL_PKEY_PARAM_RSA_BITS = 'bits';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT = 'rsa-coefficient';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT1 = 'rsa-coefficient1';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT2 = 'rsa-coefficient2';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT3 = 'rsa-coefficient3';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT4 = 'rsa-coefficient4';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT5 = 'rsa-coefficient5';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT6 = 'rsa-coefficient6';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT7 = 'rsa-coefficient7';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT8 = 'rsa-coefficient8';

const String OSSL_PKEY_PARAM_RSA_COEFFICIENT9 = 'rsa-coefficient9';

const String OSSL_PKEY_PARAM_RSA_D = 'd';

const String OSSL_PKEY_PARAM_RSA_DERIVE_FROM_PQ = 'rsa-derive-from-pq';

const String OSSL_PKEY_PARAM_RSA_DIGEST = 'digest';

const String OSSL_PKEY_PARAM_RSA_DIGEST_PROPS = 'properties';

const String OSSL_PKEY_PARAM_RSA_E = 'e';

const String OSSL_PKEY_PARAM_RSA_EXPONENT = 'rsa-exponent';

const String OSSL_PKEY_PARAM_RSA_EXPONENT1 = 'rsa-exponent1';

const String OSSL_PKEY_PARAM_RSA_EXPONENT10 = 'rsa-exponent10';

const String OSSL_PKEY_PARAM_RSA_EXPONENT2 = 'rsa-exponent2';

const String OSSL_PKEY_PARAM_RSA_EXPONENT3 = 'rsa-exponent3';

const String OSSL_PKEY_PARAM_RSA_EXPONENT4 = 'rsa-exponent4';

const String OSSL_PKEY_PARAM_RSA_EXPONENT5 = 'rsa-exponent5';

const String OSSL_PKEY_PARAM_RSA_EXPONENT6 = 'rsa-exponent6';

const String OSSL_PKEY_PARAM_RSA_EXPONENT7 = 'rsa-exponent7';

const String OSSL_PKEY_PARAM_RSA_EXPONENT8 = 'rsa-exponent8';

const String OSSL_PKEY_PARAM_RSA_EXPONENT9 = 'rsa-exponent9';

const String OSSL_PKEY_PARAM_RSA_FACTOR = 'rsa-factor';

const String OSSL_PKEY_PARAM_RSA_FACTOR1 = 'rsa-factor1';

const String OSSL_PKEY_PARAM_RSA_FACTOR10 = 'rsa-factor10';

const String OSSL_PKEY_PARAM_RSA_FACTOR2 = 'rsa-factor2';

const String OSSL_PKEY_PARAM_RSA_FACTOR3 = 'rsa-factor3';

const String OSSL_PKEY_PARAM_RSA_FACTOR4 = 'rsa-factor4';

const String OSSL_PKEY_PARAM_RSA_FACTOR5 = 'rsa-factor5';

const String OSSL_PKEY_PARAM_RSA_FACTOR6 = 'rsa-factor6';

const String OSSL_PKEY_PARAM_RSA_FACTOR7 = 'rsa-factor7';

const String OSSL_PKEY_PARAM_RSA_FACTOR8 = 'rsa-factor8';

const String OSSL_PKEY_PARAM_RSA_FACTOR9 = 'rsa-factor9';

const String OSSL_PKEY_PARAM_RSA_MASKGENFUNC = 'mgf';

const String OSSL_PKEY_PARAM_RSA_MGF1_DIGEST = 'mgf1-digest';

const String OSSL_PKEY_PARAM_RSA_N = 'n';

const String OSSL_PKEY_PARAM_RSA_PRIMES = 'primes';

const String OSSL_PKEY_PARAM_RSA_PSS_SALTLEN = 'saltlen';

const String OSSL_PKEY_PARAM_RSA_TEST_P1 = 'p1';

const String OSSL_PKEY_PARAM_RSA_TEST_P2 = 'p2';

const String OSSL_PKEY_PARAM_RSA_TEST_Q1 = 'q1';

const String OSSL_PKEY_PARAM_RSA_TEST_Q2 = 'q2';

const String OSSL_PKEY_PARAM_RSA_TEST_XP = 'xp';

const String OSSL_PKEY_PARAM_RSA_TEST_XP1 = 'xp1';

const String OSSL_PKEY_PARAM_RSA_TEST_XP2 = 'xp2';

const String OSSL_PKEY_PARAM_RSA_TEST_XQ = 'xq';

const String OSSL_PKEY_PARAM_RSA_TEST_XQ1 = 'xq1';

const String OSSL_PKEY_PARAM_RSA_TEST_XQ2 = 'xq2';

const String OSSL_PKEY_PARAM_SECURITY_BITS = 'security-bits';

const String OSSL_PKEY_PARAM_USE_COFACTOR_ECDH = 'use-cofactor-flag';

const String OSSL_PKEY_PARAM_USE_COFACTOR_FLAG = 'use-cofactor-flag';

const String OSSL_PROV_PARAM_BUILDINFO = 'buildinfo';

const String OSSL_PROV_PARAM_CORE_MODULE_FILENAME = 'module-filename';

const String OSSL_PROV_PARAM_CORE_PROV_NAME = 'provider-name';

const String OSSL_PROV_PARAM_CORE_VERSION = 'openssl-version';

const String OSSL_PROV_PARAM_DRBG_TRUNC_DIGEST = 'drbg-no-trunc-md';

const String OSSL_PROV_PARAM_DSA_SIGN_DISABLED = 'dsa-sign-disabled';

const String OSSL_PROV_PARAM_ECDH_COFACTOR_CHECK = 'ecdh-cofactor-check';

const String OSSL_PROV_PARAM_HKDF_DIGEST_CHECK = 'hkdf-digest-check';

const String OSSL_PROV_PARAM_HKDF_KEY_CHECK = 'hkdf-key-check';

const String OSSL_PROV_PARAM_HMAC_KEY_CHECK = 'hmac-key-check';

const String OSSL_PROV_PARAM_KBKDF_KEY_CHECK = 'kbkdf-key-check';

const String OSSL_PROV_PARAM_KMAC_KEY_CHECK = 'kmac-key-check';

const String OSSL_PROV_PARAM_NAME = 'name';

const String OSSL_PROV_PARAM_NO_SHORT_MAC = 'no-short-mac';

const String OSSL_PROV_PARAM_PBKDF2_LOWER_BOUND_CHECK =
    'pbkdf2-lower-bound-check';

const String OSSL_PROV_PARAM_RSA_PKCS15_PAD_DISABLED =
    'rsa-pkcs15-pad-disabled';

const String OSSL_PROV_PARAM_RSA_PSS_SALTLEN_CHECK = 'rsa-pss-saltlen-check';

const String OSSL_PROV_PARAM_RSA_SIGN_X931_PAD_DISABLED =
    'rsa-sign-x931-pad-disabled';

const String OSSL_PROV_PARAM_SECURITY_CHECKS = 'security-checks';

const String OSSL_PROV_PARAM_SELF_TEST_DESC = 'st-desc';

const String OSSL_PROV_PARAM_SELF_TEST_PHASE = 'st-phase';

const String OSSL_PROV_PARAM_SELF_TEST_TYPE = 'st-type';

const String OSSL_PROV_PARAM_SIGNATURE_DIGEST_CHECK = 'signature-digest-check';

const String OSSL_PROV_PARAM_SSHKDF_DIGEST_CHECK = 'sshkdf-digest-check';

const String OSSL_PROV_PARAM_SSHKDF_KEY_CHECK = 'sshkdf-key-check';

const String OSSL_PROV_PARAM_SSKDF_DIGEST_CHECK = 'sskdf-digest-check';

const String OSSL_PROV_PARAM_SSKDF_KEY_CHECK = 'sskdf-key-check';

const String OSSL_PROV_PARAM_STATUS = 'status';

const String OSSL_PROV_PARAM_TDES_ENCRYPT_DISABLED = 'tdes-encrypt-disabled';

const String OSSL_PROV_PARAM_TLS13_KDF_DIGEST_CHECK = 'tls13-kdf-digest-check';

const String OSSL_PROV_PARAM_TLS13_KDF_KEY_CHECK = 'tls13-kdf-key-check';

const String OSSL_PROV_PARAM_TLS1_PRF_DIGEST_CHECK = 'tls1-prf-digest-check';

const String OSSL_PROV_PARAM_TLS1_PRF_EMS_CHECK = 'tls1-prf-ems-check';

const String OSSL_PROV_PARAM_TLS1_PRF_KEY_CHECK = 'tls1-prf-key-check';

const String OSSL_PROV_PARAM_VERSION = 'version';

const String OSSL_PROV_PARAM_X942KDF_KEY_CHECK = 'x942kdf-key-check';

const String OSSL_PROV_PARAM_X963KDF_DIGEST_CHECK = 'x963kdf-digest-check';

const String OSSL_PROV_PARAM_X963KDF_KEY_CHECK = 'x963kdf-key-check';

const String OSSL_RAND_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_RAND_PARAM_GENERATE = 'generate';

const String OSSL_RAND_PARAM_MAX_REQUEST = 'max_request';

const String OSSL_RAND_PARAM_STATE = 'state';

const String OSSL_RAND_PARAM_STRENGTH = 'strength';

const String OSSL_RAND_PARAM_TEST_ENTROPY = 'test_entropy';

const String OSSL_RAND_PARAM_TEST_NONCE = 'test_nonce';

const String OSSL_SIGNATURE_PARAM_ALGORITHM_ID = 'algorithm-id';

const String OSSL_SIGNATURE_PARAM_ALGORITHM_ID_PARAMS = 'algorithm-id-params';

const String OSSL_SIGNATURE_PARAM_CONTEXT_STRING = 'context-string';

const String OSSL_SIGNATURE_PARAM_DIGEST = 'digest';

const String OSSL_SIGNATURE_PARAM_DIGEST_SIZE = 'digest-size';

const String OSSL_SIGNATURE_PARAM_FIPS_APPROVED_INDICATOR = 'fips-indicator';

const String OSSL_SIGNATURE_PARAM_FIPS_DIGEST_CHECK = 'digest-check';

const String OSSL_SIGNATURE_PARAM_FIPS_KEY_CHECK = 'key-check';

const String OSSL_SIGNATURE_PARAM_FIPS_RSA_PSS_SALTLEN_CHECK =
    'rsa-pss-saltlen-check';

const String OSSL_SIGNATURE_PARAM_FIPS_SIGN_CHECK = 'sign-check';

const String OSSL_SIGNATURE_PARAM_FIPS_SIGN_X931_PAD_CHECK =
    'sign-x931-pad-check';

const String OSSL_SIGNATURE_PARAM_FIPS_VERIFY_MESSAGE = 'verify-message';

const String OSSL_SIGNATURE_PARAM_INSTANCE = 'instance';

const String OSSL_SIGNATURE_PARAM_KAT = 'kat';

const String OSSL_SIGNATURE_PARAM_MGF1_DIGEST = 'mgf1-digest';

const String OSSL_SIGNATURE_PARAM_MGF1_PROPERTIES = 'mgf1-properties';

const String OSSL_SIGNATURE_PARAM_NONCE_TYPE = 'nonce-type';

const String OSSL_SIGNATURE_PARAM_PAD_MODE = 'pad-mode';

const String OSSL_SIGNATURE_PARAM_PROPERTIES = 'properties';

const String OSSL_SIGNATURE_PARAM_PSS_SALTLEN = 'saltlen';

const String OSSL_SIGNATURE_PARAM_SIGNATURE = 'signature';

const String OSSL_STORE_PARAM_ALIAS = 'alias';

const String OSSL_STORE_PARAM_DIGEST = 'digest';

const String OSSL_STORE_PARAM_EXPECT = 'expect';

const String OSSL_STORE_PARAM_FINGERPRINT = 'fingerprint';

const String OSSL_STORE_PARAM_INPUT_TYPE = 'input-type';

const String OSSL_STORE_PARAM_ISSUER = 'name';

const String OSSL_STORE_PARAM_PROPERTIES = 'properties';

const String OSSL_STORE_PARAM_SERIAL = 'serial';

const String OSSL_STORE_PARAM_SUBJECT = 'subject';

const int OSSL_PARAM_UNMODIFIED = -1;

const int OSSL_FUNC_CORE_GETTABLE_PARAMS = 1;

const int OSSL_FUNC_CORE_GET_PARAMS = 2;

const int OSSL_FUNC_CORE_THREAD_START = 3;

const int OSSL_FUNC_CORE_GET_LIBCTX = 4;

const int OSSL_FUNC_CORE_NEW_ERROR = 5;

const int OSSL_FUNC_CORE_SET_ERROR_DEBUG = 6;

const int OSSL_FUNC_CORE_VSET_ERROR = 7;

const int OSSL_FUNC_CORE_SET_ERROR_MARK = 8;

const int OSSL_FUNC_CORE_CLEAR_LAST_ERROR_MARK = 9;

const int OSSL_FUNC_CORE_POP_ERROR_TO_MARK = 10;

const int OSSL_FUNC_CORE_OBJ_ADD_SIGID = 11;

const int OSSL_FUNC_CORE_OBJ_CREATE = 12;

const int OSSL_FUNC_CRYPTO_MALLOC = 20;

const int OSSL_FUNC_CRYPTO_ZALLOC = 21;

const int OSSL_FUNC_CRYPTO_FREE = 22;

const int OSSL_FUNC_CRYPTO_CLEAR_FREE = 23;

const int OSSL_FUNC_CRYPTO_REALLOC = 24;

const int OSSL_FUNC_CRYPTO_CLEAR_REALLOC = 25;

const int OSSL_FUNC_CRYPTO_SECURE_MALLOC = 26;

const int OSSL_FUNC_CRYPTO_SECURE_ZALLOC = 27;

const int OSSL_FUNC_CRYPTO_SECURE_FREE = 28;

const int OSSL_FUNC_CRYPTO_SECURE_CLEAR_FREE = 29;

const int OSSL_FUNC_CRYPTO_SECURE_ALLOCATED = 30;

const int OSSL_FUNC_OPENSSL_CLEANSE = 31;

const int OSSL_FUNC_BIO_NEW_FILE = 40;

const int OSSL_FUNC_BIO_NEW_MEMBUF = 41;

const int OSSL_FUNC_BIO_READ_EX = 42;

const int OSSL_FUNC_BIO_WRITE_EX = 43;

const int OSSL_FUNC_BIO_UP_REF = 44;

const int OSSL_FUNC_BIO_FREE = 45;

const int OSSL_FUNC_BIO_VPRINTF = 46;

const int OSSL_FUNC_BIO_VSNPRINTF = 47;

const int OSSL_FUNC_BIO_PUTS = 48;

const int OSSL_FUNC_BIO_GETS = 49;

const int OSSL_FUNC_BIO_CTRL = 50;

const int OSSL_FUNC_CLEANUP_USER_ENTROPY = 96;

const int OSSL_FUNC_CLEANUP_USER_NONCE = 97;

const int OSSL_FUNC_GET_USER_ENTROPY = 98;

const int OSSL_FUNC_GET_USER_NONCE = 99;

const int OSSL_FUNC_INDICATOR_CB = 95;

const int OSSL_FUNC_SELF_TEST_CB = 100;

const int OSSL_FUNC_GET_ENTROPY = 101;

const int OSSL_FUNC_CLEANUP_ENTROPY = 102;

const int OSSL_FUNC_GET_NONCE = 103;

const int OSSL_FUNC_CLEANUP_NONCE = 104;

const int OSSL_FUNC_PROVIDER_REGISTER_CHILD_CB = 105;

const int OSSL_FUNC_PROVIDER_DEREGISTER_CHILD_CB = 106;

const int OSSL_FUNC_PROVIDER_NAME = 107;

const int OSSL_FUNC_PROVIDER_GET0_PROVIDER_CTX = 108;

const int OSSL_FUNC_PROVIDER_GET0_DISPATCH = 109;

const int OSSL_FUNC_PROVIDER_UP_REF = 110;

const int OSSL_FUNC_PROVIDER_FREE = 111;

const int OSSL_FUNC_PROVIDER_TEARDOWN = 1024;

const int OSSL_FUNC_PROVIDER_GETTABLE_PARAMS = 1025;

const int OSSL_FUNC_PROVIDER_GET_PARAMS = 1026;

const int OSSL_FUNC_PROVIDER_QUERY_OPERATION = 1027;

const int OSSL_FUNC_PROVIDER_UNQUERY_OPERATION = 1028;

const int OSSL_FUNC_PROVIDER_GET_REASON_STRINGS = 1029;

const int OSSL_FUNC_PROVIDER_GET_CAPABILITIES = 1030;

const int OSSL_FUNC_PROVIDER_SELF_TEST = 1031;

const int OSSL_OP_DIGEST = 1;

const int OSSL_OP_CIPHER = 2;

const int OSSL_OP_MAC = 3;

const int OSSL_OP_KDF = 4;

const int OSSL_OP_RAND = 5;

const int OSSL_OP_KEYMGMT = 10;

const int OSSL_OP_KEYEXCH = 11;

const int OSSL_OP_SIGNATURE = 12;

const int OSSL_OP_ASYM_CIPHER = 13;

const int OSSL_OP_KEM = 14;

const int OSSL_OP_ENCODER = 20;

const int OSSL_OP_DECODER = 21;

const int OSSL_OP_STORE = 22;

const int OSSL_OP__HIGHEST = 22;

const int OSSL_FUNC_DIGEST_NEWCTX = 1;

const int OSSL_FUNC_DIGEST_INIT = 2;

const int OSSL_FUNC_DIGEST_UPDATE = 3;

const int OSSL_FUNC_DIGEST_FINAL = 4;

const int OSSL_FUNC_DIGEST_DIGEST = 5;

const int OSSL_FUNC_DIGEST_FREECTX = 6;

const int OSSL_FUNC_DIGEST_DUPCTX = 7;

const int OSSL_FUNC_DIGEST_GET_PARAMS = 8;

const int OSSL_FUNC_DIGEST_SET_CTX_PARAMS = 9;

const int OSSL_FUNC_DIGEST_GET_CTX_PARAMS = 10;

const int OSSL_FUNC_DIGEST_GETTABLE_PARAMS = 11;

const int OSSL_FUNC_DIGEST_SETTABLE_CTX_PARAMS = 12;

const int OSSL_FUNC_DIGEST_GETTABLE_CTX_PARAMS = 13;

const int OSSL_FUNC_DIGEST_SQUEEZE = 14;

const int OSSL_FUNC_CIPHER_NEWCTX = 1;

const int OSSL_FUNC_CIPHER_ENCRYPT_INIT = 2;

const int OSSL_FUNC_CIPHER_DECRYPT_INIT = 3;

const int OSSL_FUNC_CIPHER_UPDATE = 4;

const int OSSL_FUNC_CIPHER_FINAL = 5;

const int OSSL_FUNC_CIPHER_CIPHER = 6;

const int OSSL_FUNC_CIPHER_FREECTX = 7;

const int OSSL_FUNC_CIPHER_DUPCTX = 8;

const int OSSL_FUNC_CIPHER_GET_PARAMS = 9;

const int OSSL_FUNC_CIPHER_GET_CTX_PARAMS = 10;

const int OSSL_FUNC_CIPHER_SET_CTX_PARAMS = 11;

const int OSSL_FUNC_CIPHER_GETTABLE_PARAMS = 12;

const int OSSL_FUNC_CIPHER_GETTABLE_CTX_PARAMS = 13;

const int OSSL_FUNC_CIPHER_SETTABLE_CTX_PARAMS = 14;

const int OSSL_FUNC_MAC_NEWCTX = 1;

const int OSSL_FUNC_MAC_DUPCTX = 2;

const int OSSL_FUNC_MAC_FREECTX = 3;

const int OSSL_FUNC_MAC_INIT = 4;

const int OSSL_FUNC_MAC_UPDATE = 5;

const int OSSL_FUNC_MAC_FINAL = 6;

const int OSSL_FUNC_MAC_GET_PARAMS = 7;

const int OSSL_FUNC_MAC_GET_CTX_PARAMS = 8;

const int OSSL_FUNC_MAC_SET_CTX_PARAMS = 9;

const int OSSL_FUNC_MAC_GETTABLE_PARAMS = 10;

const int OSSL_FUNC_MAC_GETTABLE_CTX_PARAMS = 11;

const int OSSL_FUNC_MAC_SETTABLE_CTX_PARAMS = 12;

const int OSSL_FUNC_KDF_NEWCTX = 1;

const int OSSL_FUNC_KDF_DUPCTX = 2;

const int OSSL_FUNC_KDF_FREECTX = 3;

const int OSSL_FUNC_KDF_RESET = 4;

const int OSSL_FUNC_KDF_DERIVE = 5;

const int OSSL_FUNC_KDF_GETTABLE_PARAMS = 6;

const int OSSL_FUNC_KDF_GETTABLE_CTX_PARAMS = 7;

const int OSSL_FUNC_KDF_SETTABLE_CTX_PARAMS = 8;

const int OSSL_FUNC_KDF_GET_PARAMS = 9;

const int OSSL_FUNC_KDF_GET_CTX_PARAMS = 10;

const int OSSL_FUNC_KDF_SET_CTX_PARAMS = 11;

const int OSSL_FUNC_RAND_NEWCTX = 1;

const int OSSL_FUNC_RAND_FREECTX = 2;

const int OSSL_FUNC_RAND_INSTANTIATE = 3;

const int OSSL_FUNC_RAND_UNINSTANTIATE = 4;

const int OSSL_FUNC_RAND_GENERATE = 5;

const int OSSL_FUNC_RAND_RESEED = 6;

const int OSSL_FUNC_RAND_NONCE = 7;

const int OSSL_FUNC_RAND_ENABLE_LOCKING = 8;

const int OSSL_FUNC_RAND_LOCK = 9;

const int OSSL_FUNC_RAND_UNLOCK = 10;

const int OSSL_FUNC_RAND_GETTABLE_PARAMS = 11;

const int OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS = 12;

const int OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS = 13;

const int OSSL_FUNC_RAND_GET_PARAMS = 14;

const int OSSL_FUNC_RAND_GET_CTX_PARAMS = 15;

const int OSSL_FUNC_RAND_SET_CTX_PARAMS = 16;

const int OSSL_FUNC_RAND_VERIFY_ZEROIZATION = 17;

const int OSSL_FUNC_RAND_GET_SEED = 18;

const int OSSL_FUNC_RAND_CLEAR_SEED = 19;

const int OSSL_KEYMGMT_SELECT_PRIVATE_KEY = 1;

const int OSSL_KEYMGMT_SELECT_PUBLIC_KEY = 2;

const int OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS = 4;

const int OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS = 128;

const int OSSL_KEYMGMT_SELECT_ALL_PARAMETERS = 132;

const int OSSL_KEYMGMT_SELECT_KEYPAIR = 3;

const int OSSL_KEYMGMT_SELECT_ALL = 135;

const int OSSL_KEYMGMT_VALIDATE_FULL_CHECK = 0;

const int OSSL_KEYMGMT_VALIDATE_QUICK_CHECK = 1;

const int OSSL_FUNC_KEYMGMT_NEW = 1;

const int OSSL_FUNC_KEYMGMT_GEN_INIT = 2;

const int OSSL_FUNC_KEYMGMT_GEN_SET_TEMPLATE = 3;

const int OSSL_FUNC_KEYMGMT_GEN_SET_PARAMS = 4;

const int OSSL_FUNC_KEYMGMT_GEN_SETTABLE_PARAMS = 5;

const int OSSL_FUNC_KEYMGMT_GEN = 6;

const int OSSL_FUNC_KEYMGMT_GEN_CLEANUP = 7;

const int OSSL_FUNC_KEYMGMT_GEN_GET_PARAMS = 15;

const int OSSL_FUNC_KEYMGMT_GEN_GETTABLE_PARAMS = 16;

const int OSSL_FUNC_KEYMGMT_LOAD = 8;

const int OSSL_FUNC_KEYMGMT_FREE = 10;

const int OSSL_FUNC_KEYMGMT_GET_PARAMS = 11;

const int OSSL_FUNC_KEYMGMT_GETTABLE_PARAMS = 12;

const int OSSL_FUNC_KEYMGMT_SET_PARAMS = 13;

const int OSSL_FUNC_KEYMGMT_SETTABLE_PARAMS = 14;

const int OSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME = 20;

const int OSSL_FUNC_KEYMGMT_HAS = 21;

const int OSSL_FUNC_KEYMGMT_VALIDATE = 22;

const int OSSL_FUNC_KEYMGMT_MATCH = 23;

const int OSSL_FUNC_KEYMGMT_IMPORT = 40;

const int OSSL_FUNC_KEYMGMT_IMPORT_TYPES = 41;

const int OSSL_FUNC_KEYMGMT_EXPORT = 42;

const int OSSL_FUNC_KEYMGMT_EXPORT_TYPES = 43;

const int OSSL_FUNC_KEYMGMT_DUP = 44;

const int OSSL_FUNC_KEYMGMT_IMPORT_TYPES_EX = 45;

const int OSSL_FUNC_KEYMGMT_EXPORT_TYPES_EX = 46;

const int OSSL_FUNC_KEYEXCH_NEWCTX = 1;

const int OSSL_FUNC_KEYEXCH_INIT = 2;

const int OSSL_FUNC_KEYEXCH_DERIVE = 3;

const int OSSL_FUNC_KEYEXCH_SET_PEER = 4;

const int OSSL_FUNC_KEYEXCH_FREECTX = 5;

const int OSSL_FUNC_KEYEXCH_DUPCTX = 6;

const int OSSL_FUNC_KEYEXCH_SET_CTX_PARAMS = 7;

const int OSSL_FUNC_KEYEXCH_SETTABLE_CTX_PARAMS = 8;

const int OSSL_FUNC_KEYEXCH_GET_CTX_PARAMS = 9;

const int OSSL_FUNC_KEYEXCH_GETTABLE_CTX_PARAMS = 10;

const int OSSL_FUNC_SIGNATURE_NEWCTX = 1;

const int OSSL_FUNC_SIGNATURE_SIGN_INIT = 2;

const int OSSL_FUNC_SIGNATURE_SIGN = 3;

const int OSSL_FUNC_SIGNATURE_VERIFY_INIT = 4;

const int OSSL_FUNC_SIGNATURE_VERIFY = 5;

const int OSSL_FUNC_SIGNATURE_VERIFY_RECOVER_INIT = 6;

const int OSSL_FUNC_SIGNATURE_VERIFY_RECOVER = 7;

const int OSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT = 8;

const int OSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE = 9;

const int OSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL = 10;

const int OSSL_FUNC_SIGNATURE_DIGEST_SIGN = 11;

const int OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT = 12;

const int OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE = 13;

const int OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_FINAL = 14;

const int OSSL_FUNC_SIGNATURE_DIGEST_VERIFY = 15;

const int OSSL_FUNC_SIGNATURE_FREECTX = 16;

const int OSSL_FUNC_SIGNATURE_DUPCTX = 17;

const int OSSL_FUNC_SIGNATURE_GET_CTX_PARAMS = 18;

const int OSSL_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS = 19;

const int OSSL_FUNC_SIGNATURE_SET_CTX_PARAMS = 20;

const int OSSL_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS = 21;

const int OSSL_FUNC_SIGNATURE_GET_CTX_MD_PARAMS = 22;

const int OSSL_FUNC_SIGNATURE_GETTABLE_CTX_MD_PARAMS = 23;

const int OSSL_FUNC_SIGNATURE_SET_CTX_MD_PARAMS = 24;

const int OSSL_FUNC_SIGNATURE_SETTABLE_CTX_MD_PARAMS = 25;

const int OSSL_FUNC_SIGNATURE_QUERY_KEY_TYPES = 26;

const int OSSL_FUNC_SIGNATURE_SIGN_MESSAGE_INIT = 27;

const int OSSL_FUNC_SIGNATURE_SIGN_MESSAGE_UPDATE = 28;

const int OSSL_FUNC_SIGNATURE_SIGN_MESSAGE_FINAL = 29;

const int OSSL_FUNC_SIGNATURE_VERIFY_MESSAGE_INIT = 30;

const int OSSL_FUNC_SIGNATURE_VERIFY_MESSAGE_UPDATE = 31;

const int OSSL_FUNC_SIGNATURE_VERIFY_MESSAGE_FINAL = 32;

const int OSSL_FUNC_ASYM_CIPHER_NEWCTX = 1;

const int OSSL_FUNC_ASYM_CIPHER_ENCRYPT_INIT = 2;

const int OSSL_FUNC_ASYM_CIPHER_ENCRYPT = 3;

const int OSSL_FUNC_ASYM_CIPHER_DECRYPT_INIT = 4;

const int OSSL_FUNC_ASYM_CIPHER_DECRYPT = 5;

const int OSSL_FUNC_ASYM_CIPHER_FREECTX = 6;

const int OSSL_FUNC_ASYM_CIPHER_DUPCTX = 7;

const int OSSL_FUNC_ASYM_CIPHER_GET_CTX_PARAMS = 8;

const int OSSL_FUNC_ASYM_CIPHER_GETTABLE_CTX_PARAMS = 9;

const int OSSL_FUNC_ASYM_CIPHER_SET_CTX_PARAMS = 10;

const int OSSL_FUNC_ASYM_CIPHER_SETTABLE_CTX_PARAMS = 11;

const int OSSL_FUNC_KEM_NEWCTX = 1;

const int OSSL_FUNC_KEM_ENCAPSULATE_INIT = 2;

const int OSSL_FUNC_KEM_ENCAPSULATE = 3;

const int OSSL_FUNC_KEM_DECAPSULATE_INIT = 4;

const int OSSL_FUNC_KEM_DECAPSULATE = 5;

const int OSSL_FUNC_KEM_FREECTX = 6;

const int OSSL_FUNC_KEM_DUPCTX = 7;

const int OSSL_FUNC_KEM_GET_CTX_PARAMS = 8;

const int OSSL_FUNC_KEM_GETTABLE_CTX_PARAMS = 9;

const int OSSL_FUNC_KEM_SET_CTX_PARAMS = 10;

const int OSSL_FUNC_KEM_SETTABLE_CTX_PARAMS = 11;

const int OSSL_FUNC_KEM_AUTH_ENCAPSULATE_INIT = 12;

const int OSSL_FUNC_KEM_AUTH_DECAPSULATE_INIT = 13;

const int OSSL_FUNC_ENCODER_NEWCTX = 1;

const int OSSL_FUNC_ENCODER_FREECTX = 2;

const int OSSL_FUNC_ENCODER_GET_PARAMS = 3;

const int OSSL_FUNC_ENCODER_GETTABLE_PARAMS = 4;

const int OSSL_FUNC_ENCODER_SET_CTX_PARAMS = 5;

const int OSSL_FUNC_ENCODER_SETTABLE_CTX_PARAMS = 6;

const int OSSL_FUNC_ENCODER_DOES_SELECTION = 10;

const int OSSL_FUNC_ENCODER_ENCODE = 11;

const int OSSL_FUNC_ENCODER_IMPORT_OBJECT = 20;

const int OSSL_FUNC_ENCODER_FREE_OBJECT = 21;

const int OSSL_FUNC_DECODER_NEWCTX = 1;

const int OSSL_FUNC_DECODER_FREECTX = 2;

const int OSSL_FUNC_DECODER_GET_PARAMS = 3;

const int OSSL_FUNC_DECODER_GETTABLE_PARAMS = 4;

const int OSSL_FUNC_DECODER_SET_CTX_PARAMS = 5;

const int OSSL_FUNC_DECODER_SETTABLE_CTX_PARAMS = 6;

const int OSSL_FUNC_DECODER_DOES_SELECTION = 10;

const int OSSL_FUNC_DECODER_DECODE = 11;

const int OSSL_FUNC_DECODER_EXPORT_OBJECT = 20;

const int OSSL_FUNC_STORE_OPEN = 1;

const int OSSL_FUNC_STORE_ATTACH = 2;

const int OSSL_FUNC_STORE_SETTABLE_CTX_PARAMS = 3;

const int OSSL_FUNC_STORE_SET_CTX_PARAMS = 4;

const int OSSL_FUNC_STORE_LOAD = 5;

const int OSSL_FUNC_STORE_EOF = 6;

const int OSSL_FUNC_STORE_CLOSE = 7;

const int OSSL_FUNC_STORE_EXPORT_OBJECT = 8;

const int OSSL_FUNC_STORE_DELETE = 9;

const int OSSL_FUNC_STORE_OPEN_EX = 10;

const int BIO_R_ACCEPT_ERROR = 100;

const int BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;

const int BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;

const int BIO_R_BAD_FOPEN_MODE = 101;

const int BIO_R_BROKEN_PIPE = 124;

const int BIO_R_CONNECT_ERROR = 103;

const int BIO_R_CONNECT_TIMEOUT = 147;

const int BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;

const int BIO_R_GETSOCKNAME_ERROR = 132;

const int BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;

const int BIO_R_GETTING_SOCKTYPE = 134;

const int BIO_R_INVALID_ARGUMENT = 125;

const int BIO_R_INVALID_SOCKET = 135;

const int BIO_R_IN_USE = 123;

const int BIO_R_LENGTH_TOO_LONG = 102;

const int BIO_R_LISTEN_V6_ONLY = 136;

const int BIO_R_LOCAL_ADDR_NOT_AVAILABLE = 111;

const int BIO_R_LOOKUP_RETURNED_NOTHING = 142;

const int BIO_R_MALFORMED_HOST_OR_SERVICE = 130;

const int BIO_R_NBIO_CONNECT_ERROR = 110;

const int BIO_R_NON_FATAL = 112;

const int BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;

const int BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;

const int BIO_R_NO_PORT_DEFINED = 113;

const int BIO_R_NO_SUCH_FILE = 128;

const int BIO_R_NULL_PARAMETER = 115;

const int BIO_R_TFO_DISABLED = 106;

const int BIO_R_TFO_NO_KERNEL_SUPPORT = 108;

const int BIO_R_TRANSFER_ERROR = 104;

const int BIO_R_TRANSFER_TIMEOUT = 105;

const int BIO_R_UNABLE_TO_BIND_SOCKET = 117;

const int BIO_R_UNABLE_TO_CREATE_SOCKET = 118;

const int BIO_R_UNABLE_TO_KEEPALIVE = 137;

const int BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;

const int BIO_R_UNABLE_TO_NODELAY = 138;

const int BIO_R_UNABLE_TO_REUSEADDR = 139;

const int BIO_R_UNABLE_TO_TFO = 109;

const int BIO_R_UNAVAILABLE_IP_FAMILY = 145;

const int BIO_R_UNINITIALIZED = 120;

const int BIO_R_UNKNOWN_INFO_TYPE = 140;

const int BIO_R_UNSUPPORTED_IP_FAMILY = 146;

const int BIO_R_UNSUPPORTED_METHOD = 121;

const int BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;

const int BIO_R_WRITE_TO_READ_ONLY_BIO = 126;

const int BIO_R_WSASTARTUP = 122;

const int BIO_R_PORT_MISMATCH = 150;

const int BIO_R_PEER_ADDR_NOT_AVAILABLE = 151;

const int BIO_TYPE_DESCRIPTOR = 256;

const int BIO_TYPE_FILTER = 512;

const int BIO_TYPE_SOURCE_SINK = 1024;

const int BIO_TYPE_NONE = 0;

const int BIO_TYPE_MEM = 1025;

const int BIO_TYPE_FILE = 1026;

const int BIO_TYPE_FD = 1284;

const int BIO_TYPE_SOCKET = 1285;

const int BIO_TYPE_NULL = 1030;

const int BIO_TYPE_SSL = 519;

const int BIO_TYPE_MD = 520;

const int BIO_TYPE_BUFFER = 521;

const int BIO_TYPE_CIPHER = 522;

const int BIO_TYPE_BASE64 = 523;

const int BIO_TYPE_CONNECT = 1292;

const int BIO_TYPE_ACCEPT = 1293;

const int BIO_TYPE_NBIO_TEST = 528;

const int BIO_TYPE_NULL_FILTER = 529;

const int BIO_TYPE_BIO = 1043;

const int BIO_TYPE_LINEBUFFER = 532;

const int BIO_TYPE_DGRAM = 1301;

const int BIO_TYPE_ASN1 = 534;

const int BIO_TYPE_COMP = 535;

const int BIO_TYPE_CORE_TO_PROV = 1049;

const int BIO_TYPE_DGRAM_PAIR = 1050;

const int BIO_TYPE_DGRAM_MEM = 1051;

const int BIO_TYPE_START = 128;

const int BIO_TYPE_MASK = 255;

const int BIO_NOCLOSE = 0;

const int BIO_CLOSE = 1;

const int BIO_CTRL_RESET = 1;

const int BIO_CTRL_EOF = 2;

const int BIO_CTRL_INFO = 3;

const int BIO_CTRL_SET = 4;

const int BIO_CTRL_GET = 5;

const int BIO_CTRL_PUSH = 6;

const int BIO_CTRL_POP = 7;

const int BIO_CTRL_GET_CLOSE = 8;

const int BIO_CTRL_SET_CLOSE = 9;

const int BIO_CTRL_PENDING = 10;

const int BIO_CTRL_FLUSH = 11;

const int BIO_CTRL_DUP = 12;

const int BIO_CTRL_WPENDING = 13;

const int BIO_CTRL_SET_CALLBACK = 14;

const int BIO_CTRL_GET_CALLBACK = 15;

const int BIO_CTRL_PEEK = 29;

const int BIO_CTRL_SET_FILENAME = 30;

const int BIO_CTRL_DGRAM_CONNECT = 31;

const int BIO_CTRL_DGRAM_SET_CONNECTED = 32;

const int BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;

const int BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;

const int BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;

const int BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;

const int BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;

const int BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;

const int BIO_CTRL_DGRAM_MTU_DISCOVER = 39;

const int BIO_CTRL_DGRAM_QUERY_MTU = 40;

const int BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;

const int BIO_CTRL_DGRAM_GET_MTU = 41;

const int BIO_CTRL_DGRAM_SET_MTU = 42;

const int BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;

const int BIO_CTRL_DGRAM_GET_PEER = 46;

const int BIO_CTRL_DGRAM_SET_PEER = 44;

const int BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;

const int BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;

const int BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;

const int BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;

const int BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;

const int BIO_CTRL_GET_KTLS_SEND = 73;

const int BIO_CTRL_GET_KTLS_RECV = 76;

const int BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY = 77;

const int BIO_CTRL_DGRAM_SCTP_MSG_WAITING = 78;

const int BIO_CTRL_SET_PREFIX = 79;

const int BIO_CTRL_SET_INDENT = 80;

const int BIO_CTRL_GET_INDENT = 81;

const int BIO_CTRL_DGRAM_GET_LOCAL_ADDR_CAP = 82;

const int BIO_CTRL_DGRAM_GET_LOCAL_ADDR_ENABLE = 83;

const int BIO_CTRL_DGRAM_SET_LOCAL_ADDR_ENABLE = 84;

const int BIO_CTRL_DGRAM_GET_EFFECTIVE_CAPS = 85;

const int BIO_CTRL_DGRAM_GET_CAPS = 86;

const int BIO_CTRL_DGRAM_SET_CAPS = 87;

const int BIO_CTRL_DGRAM_GET_NO_TRUNC = 88;

const int BIO_CTRL_DGRAM_SET_NO_TRUNC = 89;

const int BIO_CTRL_GET_RPOLL_DESCRIPTOR = 91;

const int BIO_CTRL_GET_WPOLL_DESCRIPTOR = 92;

const int BIO_CTRL_DGRAM_DETECT_PEER_ADDR = 93;

const int BIO_DGRAM_CAP_NONE = 0;

const int BIO_DGRAM_CAP_HANDLES_SRC_ADDR = 1;

const int BIO_DGRAM_CAP_HANDLES_DST_ADDR = 2;

const int BIO_DGRAM_CAP_PROVIDES_SRC_ADDR = 4;

const int BIO_DGRAM_CAP_PROVIDES_DST_ADDR = 8;

const int BIO_FP_READ = 2;

const int BIO_FP_WRITE = 4;

const int BIO_FP_APPEND = 8;

const int BIO_FP_TEXT = 16;

const int BIO_FLAGS_READ = 1;

const int BIO_FLAGS_WRITE = 2;

const int BIO_FLAGS_IO_SPECIAL = 4;

const int BIO_FLAGS_RWS = 7;

const int BIO_FLAGS_SHOULD_RETRY = 8;

const int BIO_FLAGS_UPLINK = 0;

const int BIO_FLAGS_BASE64_NO_NL = 256;

const int BIO_FLAGS_MEM_RDONLY = 512;

const int BIO_FLAGS_NONCLEAR_RST = 1024;

const int BIO_FLAGS_IN_EOF = 2048;

const int BIO_RR_SSL_X509_LOOKUP = 1;

const int BIO_RR_CONNECT = 2;

const int BIO_RR_ACCEPT = 3;

const int BIO_CB_FREE = 1;

const int BIO_CB_READ = 2;

const int BIO_CB_WRITE = 3;

const int BIO_CB_PUTS = 4;

const int BIO_CB_GETS = 5;

const int BIO_CB_CTRL = 6;

const int BIO_CB_RECVMMSG = 7;

const int BIO_CB_SENDMMSG = 8;

const int BIO_CB_RETURN = 128;

const int BIO_POLL_DESCRIPTOR_TYPE_NONE = 0;

const int BIO_POLL_DESCRIPTOR_TYPE_SOCK_FD = 1;

const int BIO_POLL_DESCRIPTOR_TYPE_SSL = 2;

const int BIO_POLL_DESCRIPTOR_CUSTOM_START = 8192;

const int BIO_C_SET_CONNECT = 100;

const int BIO_C_DO_STATE_MACHINE = 101;

const int BIO_C_SET_NBIO = 102;

const int BIO_C_SET_FD = 104;

const int BIO_C_GET_FD = 105;

const int BIO_C_SET_FILE_PTR = 106;

const int BIO_C_GET_FILE_PTR = 107;

const int BIO_C_SET_FILENAME = 108;

const int BIO_C_SET_SSL = 109;

const int BIO_C_GET_SSL = 110;

const int BIO_C_SET_MD = 111;

const int BIO_C_GET_MD = 112;

const int BIO_C_GET_CIPHER_STATUS = 113;

const int BIO_C_SET_BUF_MEM = 114;

const int BIO_C_GET_BUF_MEM_PTR = 115;

const int BIO_C_GET_BUFF_NUM_LINES = 116;

const int BIO_C_SET_BUFF_SIZE = 117;

const int BIO_C_SET_ACCEPT = 118;

const int BIO_C_SSL_MODE = 119;

const int BIO_C_GET_MD_CTX = 120;

const int BIO_C_SET_BUFF_READ_DATA = 122;

const int BIO_C_GET_CONNECT = 123;

const int BIO_C_GET_ACCEPT = 124;

const int BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;

const int BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;

const int BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;

const int BIO_C_FILE_SEEK = 128;

const int BIO_C_GET_CIPHER_CTX = 129;

const int BIO_C_SET_BUF_MEM_EOF_RETURN = 130;

const int BIO_C_SET_BIND_MODE = 131;

const int BIO_C_GET_BIND_MODE = 132;

const int BIO_C_FILE_TELL = 133;

const int BIO_C_GET_SOCKS = 134;

const int BIO_C_SET_SOCKS = 135;

const int BIO_C_SET_WRITE_BUF_SIZE = 136;

const int BIO_C_GET_WRITE_BUF_SIZE = 137;

const int BIO_C_MAKE_BIO_PAIR = 138;

const int BIO_C_DESTROY_BIO_PAIR = 139;

const int BIO_C_GET_WRITE_GUARANTEE = 140;

const int BIO_C_GET_READ_REQUEST = 141;

const int BIO_C_SHUTDOWN_WR = 142;

const int BIO_C_NREAD0 = 143;

const int BIO_C_NREAD = 144;

const int BIO_C_NWRITE0 = 145;

const int BIO_C_NWRITE = 146;

const int BIO_C_RESET_READ_REQUEST = 147;

const int BIO_C_SET_MD_CTX = 148;

const int BIO_C_SET_PREFIX = 149;

const int BIO_C_GET_PREFIX = 150;

const int BIO_C_SET_SUFFIX = 151;

const int BIO_C_GET_SUFFIX = 152;

const int BIO_C_SET_EX_ARG = 153;

const int BIO_C_GET_EX_ARG = 154;

const int BIO_C_SET_CONNECT_MODE = 155;

const int BIO_C_SET_TFO = 156;

const int BIO_C_SET_SOCK_TYPE = 157;

const int BIO_C_GET_SOCK_TYPE = 158;

const int BIO_C_GET_DGRAM_BIO = 159;

const int BIO_FAMILY_IPV4 = 4;

const int BIO_FAMILY_IPV6 = 6;

const int BIO_FAMILY_IPANY = 256;

const int BIO_BIND_NORMAL = 0;

const int BIO_BIND_REUSEADDR = 1;

const int BIO_BIND_REUSEADDR_IF_UNUSED = 1;

const int BIO_SOCK_REUSEADDR = 1;

const int BIO_SOCK_V6_ONLY = 2;

const int BIO_SOCK_KEEPALIVE = 4;

const int BIO_SOCK_NONBLOCK = 8;

const int BIO_SOCK_NODELAY = 16;

const int BIO_SOCK_TFO = 32;

const int EVP_R_AES_KEY_SETUP_FAILED = 143;

const int EVP_R_ARIA_KEY_SETUP_FAILED = 176;

const int EVP_R_BAD_ALGORITHM_NAME = 200;

const int EVP_R_BAD_DECRYPT = 100;

const int EVP_R_BAD_KEY_LENGTH = 195;

const int EVP_R_BUFFER_TOO_SMALL = 155;

const int EVP_R_CACHE_CONSTANTS_FAILED = 225;

const int EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;

const int EVP_R_CANNOT_GET_PARAMETERS = 197;

const int EVP_R_CANNOT_SET_PARAMETERS = 198;

const int EVP_R_CIPHER_NOT_GCM_MODE = 184;

const int EVP_R_CIPHER_PARAMETER_ERROR = 122;

const int EVP_R_COMMAND_NOT_SUPPORTED = 147;

const int EVP_R_CONFLICTING_ALGORITHM_NAME = 201;

const int EVP_R_COPY_ERROR = 173;

const int EVP_R_CTRL_NOT_IMPLEMENTED = 132;

const int EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;

const int EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;

const int EVP_R_DECODE_ERROR = 114;

const int EVP_R_DEFAULT_QUERY_PARSE_ERROR = 210;

const int EVP_R_DIFFERENT_KEY_TYPES = 101;

const int EVP_R_DIFFERENT_PARAMETERS = 153;

const int EVP_R_ERROR_LOADING_SECTION = 165;

const int EVP_R_EXPECTING_AN_HMAC_KEY = 174;

const int EVP_R_EXPECTING_AN_RSA_KEY = 127;

const int EVP_R_EXPECTING_A_DH_KEY = 128;

const int EVP_R_EXPECTING_A_DSA_KEY = 129;

const int EVP_R_EXPECTING_A_ECX_KEY = 219;

const int EVP_R_EXPECTING_A_EC_KEY = 142;

const int EVP_R_EXPECTING_A_POLY1305_KEY = 164;

const int EVP_R_EXPECTING_A_SIPHASH_KEY = 175;

const int EVP_R_FINAL_ERROR = 188;

const int EVP_R_GENERATE_ERROR = 214;

const int EVP_R_GETTING_ALGORITHMIDENTIFIER_NOT_SUPPORTED = 229;

const int EVP_R_GET_RAW_KEY_FAILED = 182;

const int EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;

const int EVP_R_INACCESSIBLE_DOMAIN_PARAMETERS = 204;

const int EVP_R_INACCESSIBLE_KEY = 203;

const int EVP_R_INITIALIZATION_ERROR = 134;

const int EVP_R_INPUT_NOT_INITIALIZED = 111;

const int EVP_R_INVALID_CUSTOM_LENGTH = 185;

const int EVP_R_INVALID_DIGEST = 152;

const int EVP_R_INVALID_IV_LENGTH = 194;

const int EVP_R_INVALID_KEY = 163;

const int EVP_R_INVALID_KEY_LENGTH = 130;

const int EVP_R_INVALID_LENGTH = 221;

const int EVP_R_INVALID_NULL_ALGORITHM = 218;

const int EVP_R_INVALID_OPERATION = 148;

const int EVP_R_INVALID_PROVIDER_FUNCTIONS = 193;

const int EVP_R_INVALID_SALT_LENGTH = 186;

const int EVP_R_INVALID_SECRET_LENGTH = 223;

const int EVP_R_INVALID_SEED_LENGTH = 220;

const int EVP_R_INVALID_VALUE = 222;

const int EVP_R_KEYMGMT_EXPORT_FAILURE = 205;

const int EVP_R_KEY_SETUP_FAILED = 180;

const int EVP_R_LOCKING_NOT_SUPPORTED = 213;

const int EVP_R_MEMORY_LIMIT_EXCEEDED = 172;

const int EVP_R_MESSAGE_DIGEST_IS_NULL = 159;

const int EVP_R_METHOD_NOT_SUPPORTED = 144;

const int EVP_R_MISSING_PARAMETERS = 103;

const int EVP_R_NOT_ABLE_TO_COPY_CTX = 190;

const int EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;

const int EVP_R_NO_CIPHER_SET = 131;

const int EVP_R_NO_DEFAULT_DIGEST = 158;

const int EVP_R_NO_DIGEST_SET = 139;

const int EVP_R_NO_IMPORT_FUNCTION = 206;

const int EVP_R_NO_KEYMGMT_AVAILABLE = 199;

const int EVP_R_NO_KEYMGMT_PRESENT = 196;

const int EVP_R_NO_KEY_SET = 154;

const int EVP_R_NO_OPERATION_SET = 149;

const int EVP_R_NULL_MAC_PKEY_CTX = 208;

const int EVP_R_ONLY_ONESHOT_SUPPORTED = 177;

const int EVP_R_OPERATION_NOT_INITIALIZED = 151;

const int EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;

const int EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_SIGNATURE_TYPE = 226;

const int EVP_R_OUTPUT_WOULD_OVERFLOW = 202;

const int EVP_R_PARAMETER_TOO_LARGE = 187;

const int EVP_R_PARTIALLY_OVERLAPPING = 162;

const int EVP_R_PBKDF2_ERROR = 181;

const int EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;

const int EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;

const int EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;

const int EVP_R_PUBLIC_KEY_NOT_RSA = 106;

const int EVP_R_SETTING_XOF_FAILED = 227;

const int EVP_R_SET_DEFAULT_PROPERTY_FAILURE = 209;

const int EVP_R_SIGNATURE_TYPE_AND_KEY_TYPE_INCOMPATIBLE = 228;

const int EVP_R_TOO_MANY_RECORDS = 183;

const int EVP_R_UNABLE_TO_ENABLE_LOCKING = 212;

const int EVP_R_UNABLE_TO_GET_MAXIMUM_REQUEST_SIZE = 215;

const int EVP_R_UNABLE_TO_GET_RANDOM_STRENGTH = 216;

const int EVP_R_UNABLE_TO_LOCK_CONTEXT = 211;

const int EVP_R_UNABLE_TO_SET_CALLBACKS = 217;

const int EVP_R_UNKNOWN_BITS = 166;

const int EVP_R_UNKNOWN_CIPHER = 160;

const int EVP_R_UNKNOWN_DIGEST = 161;

const int EVP_R_UNKNOWN_KEY_TYPE = 207;

const int EVP_R_UNKNOWN_MAX_SIZE = 167;

const int EVP_R_UNKNOWN_OPTION = 169;

const int EVP_R_UNKNOWN_PBE_ALGORITHM = 121;

const int EVP_R_UNKNOWN_SECURITY_BITS = 168;

const int EVP_R_UNSUPPORTED_ALGORITHM = 156;

const int EVP_R_UNSUPPORTED_CIPHER = 107;

const int EVP_R_UNSUPPORTED_KEYLENGTH = 123;

const int EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;

const int EVP_R_UNSUPPORTED_KEY_SIZE = 108;

const int EVP_R_UNSUPPORTED_KEY_TYPE = 224;

const int EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;

const int EVP_R_UNSUPPORTED_PRF = 125;

const int EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;

const int EVP_R_UNSUPPORTED_SALT_TYPE = 126;

const int EVP_R_UPDATE_ERROR = 189;

const int EVP_R_WRAP_MODE_NOT_ALLOWED = 170;

const int EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;

const int EVP_R_XTS_DATA_UNIT_IS_TOO_LARGE = 191;

const int EVP_R_XTS_DUPLICATED_KEYS = 192;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_KEY_LENGTH = 64;

const int EVP_MAX_IV_LENGTH = 16;

const int EVP_MAX_BLOCK_LENGTH = 32;

const int EVP_MAX_AEAD_TAG_LENGTH = 16;

const int PKCS5_SALT_LEN = 8;

const int PKCS5_DEFAULT_ITER = 2048;

const String SN_undef = 'UNDEF';

const String LN_undef = 'undefined';

const int NID_undef = 0;

const int OBJ_undef = 0;

const String SN_itu_t = 'ITU-T';

const String LN_itu_t = 'itu-t';

const int NID_itu_t = 645;

const int OBJ_itu_t = 0;

const int NID_ccitt = 404;

const int OBJ_ccitt = 0;

const String SN_iso = 'ISO';

const String LN_iso = 'iso';

const int NID_iso = 181;

const int OBJ_iso = 1;

const String SN_joint_iso_itu_t = 'JOINT-ISO-ITU-T';

const String LN_joint_iso_itu_t = 'joint-iso-itu-t';

const int NID_joint_iso_itu_t = 646;

const int OBJ_joint_iso_itu_t = 2;

const int NID_joint_iso_ccitt = 393;

const int OBJ_joint_iso_ccitt = 2;

const String SN_member_body = 'member-body';

const String LN_member_body = 'ISO Member Body';

const int NID_member_body = 182;

const int OBJ_member_body = 1;

const String SN_identified_organization = 'identified-organization';

const int NID_identified_organization = 676;

const int OBJ_identified_organization = 1;

const String SN_gmac = 'GMAC';

const String LN_gmac = 'gmac';

const int NID_gmac = 1195;

const int OBJ_gmac = 1;

const String SN_hmac_md5 = 'HMAC-MD5';

const String LN_hmac_md5 = 'hmac-md5';

const int NID_hmac_md5 = 780;

const int OBJ_hmac_md5 = 1;

const String SN_hmac_sha1 = 'HMAC-SHA1';

const String LN_hmac_sha1 = 'hmac-sha1';

const int NID_hmac_sha1 = 781;

const int OBJ_hmac_sha1 = 1;

const String SN_x509ExtAdmission = 'x509ExtAdmission';

const String LN_x509ExtAdmission =
    'Professional Information or basis for Admission';

const int NID_x509ExtAdmission = 1093;

const int OBJ_x509ExtAdmission = 1;

const String SN_certicom_arc = 'certicom-arc';

const int NID_certicom_arc = 677;

const int OBJ_certicom_arc = 1;

const String SN_ieee = 'ieee';

const int NID_ieee = 1170;

const int OBJ_ieee = 1;

const String SN_ieee_siswg = 'ieee-siswg';

const String LN_ieee_siswg = 'IEEE Security in Storage Working Group';

const int NID_ieee_siswg = 1171;

const int OBJ_ieee_siswg = 1;

const String SN_international_organizations = 'international-organizations';

const String LN_international_organizations = 'International Organizations';

const int NID_international_organizations = 647;

const int OBJ_international_organizations = 2;

const String SN_wap = 'wap';

const int NID_wap = 678;

const int OBJ_wap = 2;

const String SN_wap_wsg = 'wap-wsg';

const int NID_wap_wsg = 679;

const int OBJ_wap_wsg = 2;

const String SN_selected_attribute_types = 'selected-attribute-types';

const String LN_selected_attribute_types = 'Selected Attribute Types';

const int NID_selected_attribute_types = 394;

const int OBJ_selected_attribute_types = 2;

const String SN_clearance = 'clearance';

const int NID_clearance = 395;

const int OBJ_clearance = 2;

const String SN_ISO_US = 'ISO-US';

const String LN_ISO_US = 'ISO US Member Body';

const int NID_ISO_US = 183;

const int OBJ_ISO_US = 1;

const String SN_X9_57 = 'X9-57';

const String LN_X9_57 = 'X9.57';

const int NID_X9_57 = 184;

const int OBJ_X9_57 = 1;

const String SN_X9cm = 'X9cm';

const String LN_X9cm = 'X9.57 CM ?';

const int NID_X9cm = 185;

const int OBJ_X9cm = 1;

const String SN_ISO_CN = 'ISO-CN';

const String LN_ISO_CN = 'ISO CN Member Body';

const int NID_ISO_CN = 1140;

const int OBJ_ISO_CN = 1;

const String SN_oscca = 'oscca';

const int NID_oscca = 1141;

const int OBJ_oscca = 1;

const String SN_sm_scheme = 'sm-scheme';

const int NID_sm_scheme = 1142;

const int OBJ_sm_scheme = 1;

const String SN_dsa = 'DSA';

const String LN_dsa = 'dsaEncryption';

const int NID_dsa = 116;

const int OBJ_dsa = 1;

const String SN_dsaWithSHA1 = 'DSA-SHA1';

const String LN_dsaWithSHA1 = 'dsaWithSHA1';

const int NID_dsaWithSHA1 = 113;

const int OBJ_dsaWithSHA1 = 1;

const String SN_ansi_X9_62 = 'ansi-X9-62';

const String LN_ansi_X9_62 = 'ANSI X9.62';

const int NID_ansi_X9_62 = 405;

const int OBJ_ansi_X9_62 = 1;

const int OBJ_X9_62_id_fieldType = 1;

const String SN_X9_62_prime_field = 'prime-field';

const int NID_X9_62_prime_field = 406;

const int OBJ_X9_62_prime_field = 1;

const String SN_X9_62_characteristic_two_field = 'characteristic-two-field';

const int NID_X9_62_characteristic_two_field = 407;

const int OBJ_X9_62_characteristic_two_field = 1;

const String SN_X9_62_id_characteristic_two_basis =
    'id-characteristic-two-basis';

const int NID_X9_62_id_characteristic_two_basis = 680;

const int OBJ_X9_62_id_characteristic_two_basis = 1;

const String SN_X9_62_onBasis = 'onBasis';

const int NID_X9_62_onBasis = 681;

const int OBJ_X9_62_onBasis = 1;

const String SN_X9_62_tpBasis = 'tpBasis';

const int NID_X9_62_tpBasis = 682;

const int OBJ_X9_62_tpBasis = 1;

const String SN_X9_62_ppBasis = 'ppBasis';

const int NID_X9_62_ppBasis = 683;

const int OBJ_X9_62_ppBasis = 1;

const int OBJ_X9_62_id_publicKeyType = 1;

const String SN_X9_62_id_ecPublicKey = 'id-ecPublicKey';

const int NID_X9_62_id_ecPublicKey = 408;

const int OBJ_X9_62_id_ecPublicKey = 1;

const int OBJ_X9_62_ellipticCurve = 1;

const int OBJ_X9_62_c_TwoCurve = 1;

const String SN_X9_62_c2pnb163v1 = 'c2pnb163v1';

const int NID_X9_62_c2pnb163v1 = 684;

const int OBJ_X9_62_c2pnb163v1 = 1;

const String SN_X9_62_c2pnb163v2 = 'c2pnb163v2';

const int NID_X9_62_c2pnb163v2 = 685;

const int OBJ_X9_62_c2pnb163v2 = 1;

const String SN_X9_62_c2pnb163v3 = 'c2pnb163v3';

const int NID_X9_62_c2pnb163v3 = 686;

const int OBJ_X9_62_c2pnb163v3 = 1;

const String SN_X9_62_c2pnb176v1 = 'c2pnb176v1';

const int NID_X9_62_c2pnb176v1 = 687;

const int OBJ_X9_62_c2pnb176v1 = 1;

const String SN_X9_62_c2tnb191v1 = 'c2tnb191v1';

const int NID_X9_62_c2tnb191v1 = 688;

const int OBJ_X9_62_c2tnb191v1 = 1;

const String SN_X9_62_c2tnb191v2 = 'c2tnb191v2';

const int NID_X9_62_c2tnb191v2 = 689;

const int OBJ_X9_62_c2tnb191v2 = 1;

const String SN_X9_62_c2tnb191v3 = 'c2tnb191v3';

const int NID_X9_62_c2tnb191v3 = 690;

const int OBJ_X9_62_c2tnb191v3 = 1;

const String SN_X9_62_c2onb191v4 = 'c2onb191v4';

const int NID_X9_62_c2onb191v4 = 691;

const int OBJ_X9_62_c2onb191v4 = 1;

const String SN_X9_62_c2onb191v5 = 'c2onb191v5';

const int NID_X9_62_c2onb191v5 = 692;

const int OBJ_X9_62_c2onb191v5 = 1;

const String SN_X9_62_c2pnb208w1 = 'c2pnb208w1';

const int NID_X9_62_c2pnb208w1 = 693;

const int OBJ_X9_62_c2pnb208w1 = 1;

const String SN_X9_62_c2tnb239v1 = 'c2tnb239v1';

const int NID_X9_62_c2tnb239v1 = 694;

const int OBJ_X9_62_c2tnb239v1 = 1;

const String SN_X9_62_c2tnb239v2 = 'c2tnb239v2';

const int NID_X9_62_c2tnb239v2 = 695;

const int OBJ_X9_62_c2tnb239v2 = 1;

const String SN_X9_62_c2tnb239v3 = 'c2tnb239v3';

const int NID_X9_62_c2tnb239v3 = 696;

const int OBJ_X9_62_c2tnb239v3 = 1;

const String SN_X9_62_c2onb239v4 = 'c2onb239v4';

const int NID_X9_62_c2onb239v4 = 697;

const int OBJ_X9_62_c2onb239v4 = 1;

const String SN_X9_62_c2onb239v5 = 'c2onb239v5';

const int NID_X9_62_c2onb239v5 = 698;

const int OBJ_X9_62_c2onb239v5 = 1;

const String SN_X9_62_c2pnb272w1 = 'c2pnb272w1';

const int NID_X9_62_c2pnb272w1 = 699;

const int OBJ_X9_62_c2pnb272w1 = 1;

const String SN_X9_62_c2pnb304w1 = 'c2pnb304w1';

const int NID_X9_62_c2pnb304w1 = 700;

const int OBJ_X9_62_c2pnb304w1 = 1;

const String SN_X9_62_c2tnb359v1 = 'c2tnb359v1';

const int NID_X9_62_c2tnb359v1 = 701;

const int OBJ_X9_62_c2tnb359v1 = 1;

const String SN_X9_62_c2pnb368w1 = 'c2pnb368w1';

const int NID_X9_62_c2pnb368w1 = 702;

const int OBJ_X9_62_c2pnb368w1 = 1;

const String SN_X9_62_c2tnb431r1 = 'c2tnb431r1';

const int NID_X9_62_c2tnb431r1 = 703;

const int OBJ_X9_62_c2tnb431r1 = 1;

const int OBJ_X9_62_primeCurve = 1;

const String SN_X9_62_prime192v1 = 'prime192v1';

const int NID_X9_62_prime192v1 = 409;

const int OBJ_X9_62_prime192v1 = 1;

const String SN_X9_62_prime192v2 = 'prime192v2';

const int NID_X9_62_prime192v2 = 410;

const int OBJ_X9_62_prime192v2 = 1;

const String SN_X9_62_prime192v3 = 'prime192v3';

const int NID_X9_62_prime192v3 = 411;

const int OBJ_X9_62_prime192v3 = 1;

const String SN_X9_62_prime239v1 = 'prime239v1';

const int NID_X9_62_prime239v1 = 412;

const int OBJ_X9_62_prime239v1 = 1;

const String SN_X9_62_prime239v2 = 'prime239v2';

const int NID_X9_62_prime239v2 = 413;

const int OBJ_X9_62_prime239v2 = 1;

const String SN_X9_62_prime239v3 = 'prime239v3';

const int NID_X9_62_prime239v3 = 414;

const int OBJ_X9_62_prime239v3 = 1;

const String SN_X9_62_prime256v1 = 'prime256v1';

const int NID_X9_62_prime256v1 = 415;

const int OBJ_X9_62_prime256v1 = 1;

const int OBJ_X9_62_id_ecSigType = 1;

const String SN_ecdsa_with_SHA1 = 'ecdsa-with-SHA1';

const int NID_ecdsa_with_SHA1 = 416;

const int OBJ_ecdsa_with_SHA1 = 1;

const String SN_ecdsa_with_Recommended = 'ecdsa-with-Recommended';

const int NID_ecdsa_with_Recommended = 791;

const int OBJ_ecdsa_with_Recommended = 1;

const String SN_ecdsa_with_Specified = 'ecdsa-with-Specified';

const int NID_ecdsa_with_Specified = 792;

const int OBJ_ecdsa_with_Specified = 1;

const String SN_ecdsa_with_SHA224 = 'ecdsa-with-SHA224';

const int NID_ecdsa_with_SHA224 = 793;

const int OBJ_ecdsa_with_SHA224 = 1;

const String SN_ecdsa_with_SHA256 = 'ecdsa-with-SHA256';

const int NID_ecdsa_with_SHA256 = 794;

const int OBJ_ecdsa_with_SHA256 = 1;

const String SN_ecdsa_with_SHA384 = 'ecdsa-with-SHA384';

const int NID_ecdsa_with_SHA384 = 795;

const int OBJ_ecdsa_with_SHA384 = 1;

const String SN_ecdsa_with_SHA512 = 'ecdsa-with-SHA512';

const int NID_ecdsa_with_SHA512 = 796;

const int OBJ_ecdsa_with_SHA512 = 1;

const int OBJ_secg_ellipticCurve = 1;

const String SN_secp112r1 = 'secp112r1';

const int NID_secp112r1 = 704;

const int OBJ_secp112r1 = 1;

const String SN_secp112r2 = 'secp112r2';

const int NID_secp112r2 = 705;

const int OBJ_secp112r2 = 1;

const String SN_secp128r1 = 'secp128r1';

const int NID_secp128r1 = 706;

const int OBJ_secp128r1 = 1;

const String SN_secp128r2 = 'secp128r2';

const int NID_secp128r2 = 707;

const int OBJ_secp128r2 = 1;

const String SN_secp160k1 = 'secp160k1';

const int NID_secp160k1 = 708;

const int OBJ_secp160k1 = 1;

const String SN_secp160r1 = 'secp160r1';

const int NID_secp160r1 = 709;

const int OBJ_secp160r1 = 1;

const String SN_secp160r2 = 'secp160r2';

const int NID_secp160r2 = 710;

const int OBJ_secp160r2 = 1;

const String SN_secp192k1 = 'secp192k1';

const int NID_secp192k1 = 711;

const int OBJ_secp192k1 = 1;

const String SN_secp224k1 = 'secp224k1';

const int NID_secp224k1 = 712;

const int OBJ_secp224k1 = 1;

const String SN_secp224r1 = 'secp224r1';

const int NID_secp224r1 = 713;

const int OBJ_secp224r1 = 1;

const String SN_secp256k1 = 'secp256k1';

const int NID_secp256k1 = 714;

const int OBJ_secp256k1 = 1;

const String SN_secp384r1 = 'secp384r1';

const int NID_secp384r1 = 715;

const int OBJ_secp384r1 = 1;

const String SN_secp521r1 = 'secp521r1';

const int NID_secp521r1 = 716;

const int OBJ_secp521r1 = 1;

const String SN_sect113r1 = 'sect113r1';

const int NID_sect113r1 = 717;

const int OBJ_sect113r1 = 1;

const String SN_sect113r2 = 'sect113r2';

const int NID_sect113r2 = 718;

const int OBJ_sect113r2 = 1;

const String SN_sect131r1 = 'sect131r1';

const int NID_sect131r1 = 719;

const int OBJ_sect131r1 = 1;

const String SN_sect131r2 = 'sect131r2';

const int NID_sect131r2 = 720;

const int OBJ_sect131r2 = 1;

const String SN_sect163k1 = 'sect163k1';

const int NID_sect163k1 = 721;

const int OBJ_sect163k1 = 1;

const String SN_sect163r1 = 'sect163r1';

const int NID_sect163r1 = 722;

const int OBJ_sect163r1 = 1;

const String SN_sect163r2 = 'sect163r2';

const int NID_sect163r2 = 723;

const int OBJ_sect163r2 = 1;

const String SN_sect193r1 = 'sect193r1';

const int NID_sect193r1 = 724;

const int OBJ_sect193r1 = 1;

const String SN_sect193r2 = 'sect193r2';

const int NID_sect193r2 = 725;

const int OBJ_sect193r2 = 1;

const String SN_sect233k1 = 'sect233k1';

const int NID_sect233k1 = 726;

const int OBJ_sect233k1 = 1;

const String SN_sect233r1 = 'sect233r1';

const int NID_sect233r1 = 727;

const int OBJ_sect233r1 = 1;

const String SN_sect239k1 = 'sect239k1';

const int NID_sect239k1 = 728;

const int OBJ_sect239k1 = 1;

const String SN_sect283k1 = 'sect283k1';

const int NID_sect283k1 = 729;

const int OBJ_sect283k1 = 1;

const String SN_sect283r1 = 'sect283r1';

const int NID_sect283r1 = 730;

const int OBJ_sect283r1 = 1;

const String SN_sect409k1 = 'sect409k1';

const int NID_sect409k1 = 731;

const int OBJ_sect409k1 = 1;

const String SN_sect409r1 = 'sect409r1';

const int NID_sect409r1 = 732;

const int OBJ_sect409r1 = 1;

const String SN_sect571k1 = 'sect571k1';

const int NID_sect571k1 = 733;

const int OBJ_sect571k1 = 1;

const String SN_sect571r1 = 'sect571r1';

const int NID_sect571r1 = 734;

const int OBJ_sect571r1 = 1;

const int OBJ_wap_wsg_idm_ecid = 2;

const String SN_wap_wsg_idm_ecid_wtls1 = 'wap-wsg-idm-ecid-wtls1';

const int NID_wap_wsg_idm_ecid_wtls1 = 735;

const int OBJ_wap_wsg_idm_ecid_wtls1 = 2;

const String SN_wap_wsg_idm_ecid_wtls3 = 'wap-wsg-idm-ecid-wtls3';

const int NID_wap_wsg_idm_ecid_wtls3 = 736;

const int OBJ_wap_wsg_idm_ecid_wtls3 = 2;

const String SN_wap_wsg_idm_ecid_wtls4 = 'wap-wsg-idm-ecid-wtls4';

const int NID_wap_wsg_idm_ecid_wtls4 = 737;

const int OBJ_wap_wsg_idm_ecid_wtls4 = 2;

const String SN_wap_wsg_idm_ecid_wtls5 = 'wap-wsg-idm-ecid-wtls5';

const int NID_wap_wsg_idm_ecid_wtls5 = 738;

const int OBJ_wap_wsg_idm_ecid_wtls5 = 2;

const String SN_wap_wsg_idm_ecid_wtls6 = 'wap-wsg-idm-ecid-wtls6';

const int NID_wap_wsg_idm_ecid_wtls6 = 739;

const int OBJ_wap_wsg_idm_ecid_wtls6 = 2;

const String SN_wap_wsg_idm_ecid_wtls7 = 'wap-wsg-idm-ecid-wtls7';

const int NID_wap_wsg_idm_ecid_wtls7 = 740;

const int OBJ_wap_wsg_idm_ecid_wtls7 = 2;

const String SN_wap_wsg_idm_ecid_wtls8 = 'wap-wsg-idm-ecid-wtls8';

const int NID_wap_wsg_idm_ecid_wtls8 = 741;

const int OBJ_wap_wsg_idm_ecid_wtls8 = 2;

const String SN_wap_wsg_idm_ecid_wtls9 = 'wap-wsg-idm-ecid-wtls9';

const int NID_wap_wsg_idm_ecid_wtls9 = 742;

const int OBJ_wap_wsg_idm_ecid_wtls9 = 2;

const String SN_wap_wsg_idm_ecid_wtls10 = 'wap-wsg-idm-ecid-wtls10';

const int NID_wap_wsg_idm_ecid_wtls10 = 743;

const int OBJ_wap_wsg_idm_ecid_wtls10 = 2;

const String SN_wap_wsg_idm_ecid_wtls11 = 'wap-wsg-idm-ecid-wtls11';

const int NID_wap_wsg_idm_ecid_wtls11 = 744;

const int OBJ_wap_wsg_idm_ecid_wtls11 = 2;

const String SN_wap_wsg_idm_ecid_wtls12 = 'wap-wsg-idm-ecid-wtls12';

const int NID_wap_wsg_idm_ecid_wtls12 = 745;

const int OBJ_wap_wsg_idm_ecid_wtls12 = 2;

const String SN_cast5_cbc = 'CAST5-CBC';

const String LN_cast5_cbc = 'cast5-cbc';

const int NID_cast5_cbc = 108;

const int OBJ_cast5_cbc = 1;

const String SN_cast5_ecb = 'CAST5-ECB';

const String LN_cast5_ecb = 'cast5-ecb';

const int NID_cast5_ecb = 109;

const String SN_cast5_cfb64 = 'CAST5-CFB';

const String LN_cast5_cfb64 = 'cast5-cfb';

const int NID_cast5_cfb64 = 110;

const String SN_cast5_ofb64 = 'CAST5-OFB';

const String LN_cast5_ofb64 = 'cast5-ofb';

const int NID_cast5_ofb64 = 111;

const String LN_pbeWithMD5AndCast5_CBC = 'pbeWithMD5AndCast5CBC';

const int NID_pbeWithMD5AndCast5_CBC = 112;

const int OBJ_pbeWithMD5AndCast5_CBC = 1;

const String SN_id_PasswordBasedMAC = 'id-PasswordBasedMAC';

const String LN_id_PasswordBasedMAC = 'password based MAC';

const int NID_id_PasswordBasedMAC = 782;

const int OBJ_id_PasswordBasedMAC = 1;

const String SN_id_DHBasedMac = 'id-DHBasedMac';

const String LN_id_DHBasedMac = 'Diffie-Hellman based MAC';

const int NID_id_DHBasedMac = 783;

const int OBJ_id_DHBasedMac = 1;

const String SN_rsadsi = 'rsadsi';

const String LN_rsadsi = 'RSA Data Security, Inc.';

const int NID_rsadsi = 1;

const int OBJ_rsadsi = 1;

const String SN_pkcs = 'pkcs';

const String LN_pkcs = 'RSA Data Security, Inc. PKCS';

const int NID_pkcs = 2;

const int OBJ_pkcs = 1;

const String SN_pkcs1 = 'pkcs1';

const int NID_pkcs1 = 186;

const int OBJ_pkcs1 = 1;

const String LN_rsaEncryption = 'rsaEncryption';

const int NID_rsaEncryption = 6;

const int OBJ_rsaEncryption = 1;

const String SN_md2WithRSAEncryption = 'RSA-MD2';

const String LN_md2WithRSAEncryption = 'md2WithRSAEncryption';

const int NID_md2WithRSAEncryption = 7;

const int OBJ_md2WithRSAEncryption = 1;

const String SN_md4WithRSAEncryption = 'RSA-MD4';

const String LN_md4WithRSAEncryption = 'md4WithRSAEncryption';

const int NID_md4WithRSAEncryption = 396;

const int OBJ_md4WithRSAEncryption = 1;

const String SN_md5WithRSAEncryption = 'RSA-MD5';

const String LN_md5WithRSAEncryption = 'md5WithRSAEncryption';

const int NID_md5WithRSAEncryption = 8;

const int OBJ_md5WithRSAEncryption = 1;

const String SN_sha1WithRSAEncryption = 'RSA-SHA1';

const String LN_sha1WithRSAEncryption = 'sha1WithRSAEncryption';

const int NID_sha1WithRSAEncryption = 65;

const int OBJ_sha1WithRSAEncryption = 1;

const String SN_rsaesOaep = 'RSAES-OAEP';

const String LN_rsaesOaep = 'rsaesOaep';

const int NID_rsaesOaep = 919;

const int OBJ_rsaesOaep = 1;

const String SN_mgf1 = 'MGF1';

const String LN_mgf1 = 'mgf1';

const int NID_mgf1 = 911;

const int OBJ_mgf1 = 1;

const String SN_pSpecified = 'PSPECIFIED';

const String LN_pSpecified = 'pSpecified';

const int NID_pSpecified = 935;

const int OBJ_pSpecified = 1;

const String SN_rsassaPss = 'RSASSA-PSS';

const String LN_rsassaPss = 'rsassaPss';

const int NID_rsassaPss = 912;

const int OBJ_rsassaPss = 1;

const String SN_sha256WithRSAEncryption = 'RSA-SHA256';

const String LN_sha256WithRSAEncryption = 'sha256WithRSAEncryption';

const int NID_sha256WithRSAEncryption = 668;

const int OBJ_sha256WithRSAEncryption = 1;

const String SN_sha384WithRSAEncryption = 'RSA-SHA384';

const String LN_sha384WithRSAEncryption = 'sha384WithRSAEncryption';

const int NID_sha384WithRSAEncryption = 669;

const int OBJ_sha384WithRSAEncryption = 1;

const String SN_sha512WithRSAEncryption = 'RSA-SHA512';

const String LN_sha512WithRSAEncryption = 'sha512WithRSAEncryption';

const int NID_sha512WithRSAEncryption = 670;

const int OBJ_sha512WithRSAEncryption = 1;

const String SN_sha224WithRSAEncryption = 'RSA-SHA224';

const String LN_sha224WithRSAEncryption = 'sha224WithRSAEncryption';

const int NID_sha224WithRSAEncryption = 671;

const int OBJ_sha224WithRSAEncryption = 1;

const String SN_sha512_224WithRSAEncryption = 'RSA-SHA512/224';

const String LN_sha512_224WithRSAEncryption = 'sha512-224WithRSAEncryption';

const int NID_sha512_224WithRSAEncryption = 1145;

const int OBJ_sha512_224WithRSAEncryption = 1;

const String SN_sha512_256WithRSAEncryption = 'RSA-SHA512/256';

const String LN_sha512_256WithRSAEncryption = 'sha512-256WithRSAEncryption';

const int NID_sha512_256WithRSAEncryption = 1146;

const int OBJ_sha512_256WithRSAEncryption = 1;

const String SN_pkcs3 = 'pkcs3';

const int NID_pkcs3 = 27;

const int OBJ_pkcs3 = 1;

const String LN_dhKeyAgreement = 'dhKeyAgreement';

const int NID_dhKeyAgreement = 28;

const int OBJ_dhKeyAgreement = 1;

const String SN_pkcs5 = 'pkcs5';

const int NID_pkcs5 = 187;

const int OBJ_pkcs5 = 1;

const String SN_pbeWithMD2AndDES_CBC = 'PBE-MD2-DES';

const String LN_pbeWithMD2AndDES_CBC = 'pbeWithMD2AndDES-CBC';

const int NID_pbeWithMD2AndDES_CBC = 9;

const int OBJ_pbeWithMD2AndDES_CBC = 1;

const String SN_pbeWithMD5AndDES_CBC = 'PBE-MD5-DES';

const String LN_pbeWithMD5AndDES_CBC = 'pbeWithMD5AndDES-CBC';

const int NID_pbeWithMD5AndDES_CBC = 10;

const int OBJ_pbeWithMD5AndDES_CBC = 1;

const String SN_pbeWithMD2AndRC2_CBC = 'PBE-MD2-RC2-64';

const String LN_pbeWithMD2AndRC2_CBC = 'pbeWithMD2AndRC2-CBC';

const int NID_pbeWithMD2AndRC2_CBC = 168;

const int OBJ_pbeWithMD2AndRC2_CBC = 1;

const String SN_pbeWithMD5AndRC2_CBC = 'PBE-MD5-RC2-64';

const String LN_pbeWithMD5AndRC2_CBC = 'pbeWithMD5AndRC2-CBC';

const int NID_pbeWithMD5AndRC2_CBC = 169;

const int OBJ_pbeWithMD5AndRC2_CBC = 1;

const String SN_pbeWithSHA1AndDES_CBC = 'PBE-SHA1-DES';

const String LN_pbeWithSHA1AndDES_CBC = 'pbeWithSHA1AndDES-CBC';

const int NID_pbeWithSHA1AndDES_CBC = 170;

const int OBJ_pbeWithSHA1AndDES_CBC = 1;

const String SN_pbeWithSHA1AndRC2_CBC = 'PBE-SHA1-RC2-64';

const String LN_pbeWithSHA1AndRC2_CBC = 'pbeWithSHA1AndRC2-CBC';

const int NID_pbeWithSHA1AndRC2_CBC = 68;

const int OBJ_pbeWithSHA1AndRC2_CBC = 1;

const String LN_id_pbkdf2 = 'PBKDF2';

const int NID_id_pbkdf2 = 69;

const int OBJ_id_pbkdf2 = 1;

const String LN_pbes2 = 'PBES2';

const int NID_pbes2 = 161;

const int OBJ_pbes2 = 1;

const String LN_pbmac1 = 'PBMAC1';

const int NID_pbmac1 = 162;

const int OBJ_pbmac1 = 1;

const String SN_pkcs7 = 'pkcs7';

const int NID_pkcs7 = 20;

const int OBJ_pkcs7 = 1;

const String LN_pkcs7_data = 'pkcs7-data';

const int NID_pkcs7_data = 21;

const int OBJ_pkcs7_data = 1;

const String LN_pkcs7_signed = 'pkcs7-signedData';

const int NID_pkcs7_signed = 22;

const int OBJ_pkcs7_signed = 1;

const String LN_pkcs7_enveloped = 'pkcs7-envelopedData';

const int NID_pkcs7_enveloped = 23;

const int OBJ_pkcs7_enveloped = 1;

const String LN_pkcs7_signedAndEnveloped = 'pkcs7-signedAndEnvelopedData';

const int NID_pkcs7_signedAndEnveloped = 24;

const int OBJ_pkcs7_signedAndEnveloped = 1;

const String LN_pkcs7_digest = 'pkcs7-digestData';

const int NID_pkcs7_digest = 25;

const int OBJ_pkcs7_digest = 1;

const String LN_pkcs7_encrypted = 'pkcs7-encryptedData';

const int NID_pkcs7_encrypted = 26;

const int OBJ_pkcs7_encrypted = 1;

const String SN_pkcs9 = 'pkcs9';

const int NID_pkcs9 = 47;

const int OBJ_pkcs9 = 1;

const String LN_pkcs9_emailAddress = 'emailAddress';

const int NID_pkcs9_emailAddress = 48;

const int OBJ_pkcs9_emailAddress = 1;

const String LN_pkcs9_unstructuredName = 'unstructuredName';

const int NID_pkcs9_unstructuredName = 49;

const int OBJ_pkcs9_unstructuredName = 1;

const String LN_pkcs9_contentType = 'contentType';

const int NID_pkcs9_contentType = 50;

const int OBJ_pkcs9_contentType = 1;

const String LN_pkcs9_messageDigest = 'messageDigest';

const int NID_pkcs9_messageDigest = 51;

const int OBJ_pkcs9_messageDigest = 1;

const String LN_pkcs9_signingTime = 'signingTime';

const int NID_pkcs9_signingTime = 52;

const int OBJ_pkcs9_signingTime = 1;

const String LN_pkcs9_countersignature = 'countersignature';

const int NID_pkcs9_countersignature = 53;

const int OBJ_pkcs9_countersignature = 1;

const String LN_pkcs9_challengePassword = 'challengePassword';

const int NID_pkcs9_challengePassword = 54;

const int OBJ_pkcs9_challengePassword = 1;

const String LN_pkcs9_unstructuredAddress = 'unstructuredAddress';

const int NID_pkcs9_unstructuredAddress = 55;

const int OBJ_pkcs9_unstructuredAddress = 1;

const String LN_pkcs9_extCertAttributes = 'extendedCertificateAttributes';

const int NID_pkcs9_extCertAttributes = 56;

const int OBJ_pkcs9_extCertAttributes = 1;

const String SN_ext_req = 'extReq';

const String LN_ext_req = 'Extension Request';

const int NID_ext_req = 172;

const int OBJ_ext_req = 1;

const String SN_SMIMECapabilities = 'SMIME-CAPS';

const String LN_SMIMECapabilities = 'S/MIME Capabilities';

const int NID_SMIMECapabilities = 167;

const int OBJ_SMIMECapabilities = 1;

const String SN_SMIME = 'SMIME';

const String LN_SMIME = 'S/MIME';

const int NID_SMIME = 188;

const int OBJ_SMIME = 1;

const String SN_id_smime_mod = 'id-smime-mod';

const int NID_id_smime_mod = 189;

const int OBJ_id_smime_mod = 1;

const String SN_id_smime_ct = 'id-smime-ct';

const int NID_id_smime_ct = 190;

const int OBJ_id_smime_ct = 1;

const String SN_id_smime_aa = 'id-smime-aa';

const int NID_id_smime_aa = 191;

const int OBJ_id_smime_aa = 1;

const String SN_id_smime_alg = 'id-smime-alg';

const int NID_id_smime_alg = 192;

const int OBJ_id_smime_alg = 1;

const String SN_id_smime_cd = 'id-smime-cd';

const int NID_id_smime_cd = 193;

const int OBJ_id_smime_cd = 1;

const String SN_id_smime_spq = 'id-smime-spq';

const int NID_id_smime_spq = 194;

const int OBJ_id_smime_spq = 1;

const String SN_id_smime_cti = 'id-smime-cti';

const int NID_id_smime_cti = 195;

const int OBJ_id_smime_cti = 1;

const String SN_id_smime_mod_cms = 'id-smime-mod-cms';

const int NID_id_smime_mod_cms = 196;

const int OBJ_id_smime_mod_cms = 1;

const String SN_id_smime_mod_ess = 'id-smime-mod-ess';

const int NID_id_smime_mod_ess = 197;

const int OBJ_id_smime_mod_ess = 1;

const String SN_id_smime_mod_oid = 'id-smime-mod-oid';

const int NID_id_smime_mod_oid = 198;

const int OBJ_id_smime_mod_oid = 1;

const String SN_id_smime_mod_msg_v3 = 'id-smime-mod-msg-v3';

const int NID_id_smime_mod_msg_v3 = 199;

const int OBJ_id_smime_mod_msg_v3 = 1;

const String SN_id_smime_mod_ets_eSignature_88 =
    'id-smime-mod-ets-eSignature-88';

const int NID_id_smime_mod_ets_eSignature_88 = 200;

const int OBJ_id_smime_mod_ets_eSignature_88 = 1;

const String SN_id_smime_mod_ets_eSignature_97 =
    'id-smime-mod-ets-eSignature-97';

const int NID_id_smime_mod_ets_eSignature_97 = 201;

const int OBJ_id_smime_mod_ets_eSignature_97 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_88 =
    'id-smime-mod-ets-eSigPolicy-88';

const int NID_id_smime_mod_ets_eSigPolicy_88 = 202;

const int OBJ_id_smime_mod_ets_eSigPolicy_88 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_97 =
    'id-smime-mod-ets-eSigPolicy-97';

const int NID_id_smime_mod_ets_eSigPolicy_97 = 203;

const int OBJ_id_smime_mod_ets_eSigPolicy_97 = 1;

const String SN_id_smime_ct_receipt = 'id-smime-ct-receipt';

const int NID_id_smime_ct_receipt = 204;

const int OBJ_id_smime_ct_receipt = 1;

const String SN_id_smime_ct_authData = 'id-smime-ct-authData';

const int NID_id_smime_ct_authData = 205;

const int OBJ_id_smime_ct_authData = 1;

const String SN_id_smime_ct_publishCert = 'id-smime-ct-publishCert';

const int NID_id_smime_ct_publishCert = 206;

const int OBJ_id_smime_ct_publishCert = 1;

const String SN_id_smime_ct_TSTInfo = 'id-smime-ct-TSTInfo';

const int NID_id_smime_ct_TSTInfo = 207;

const int OBJ_id_smime_ct_TSTInfo = 1;

const String SN_id_smime_ct_TDTInfo = 'id-smime-ct-TDTInfo';

const int NID_id_smime_ct_TDTInfo = 208;

const int OBJ_id_smime_ct_TDTInfo = 1;

const String SN_id_smime_ct_contentInfo = 'id-smime-ct-contentInfo';

const int NID_id_smime_ct_contentInfo = 209;

const int OBJ_id_smime_ct_contentInfo = 1;

const String SN_id_smime_ct_DVCSRequestData = 'id-smime-ct-DVCSRequestData';

const int NID_id_smime_ct_DVCSRequestData = 210;

const int OBJ_id_smime_ct_DVCSRequestData = 1;

const String SN_id_smime_ct_DVCSResponseData = 'id-smime-ct-DVCSResponseData';

const int NID_id_smime_ct_DVCSResponseData = 211;

const int OBJ_id_smime_ct_DVCSResponseData = 1;

const String SN_id_smime_ct_compressedData = 'id-smime-ct-compressedData';

const int NID_id_smime_ct_compressedData = 786;

const int OBJ_id_smime_ct_compressedData = 1;

const String SN_id_smime_ct_contentCollection = 'id-smime-ct-contentCollection';

const int NID_id_smime_ct_contentCollection = 1058;

const int OBJ_id_smime_ct_contentCollection = 1;

const String SN_id_smime_ct_authEnvelopedData = 'id-smime-ct-authEnvelopedData';

const int NID_id_smime_ct_authEnvelopedData = 1059;

const int OBJ_id_smime_ct_authEnvelopedData = 1;

const String SN_id_ct_routeOriginAuthz = 'id-ct-routeOriginAuthz';

const int NID_id_ct_routeOriginAuthz = 1234;

const int OBJ_id_ct_routeOriginAuthz = 1;

const String SN_id_ct_rpkiManifest = 'id-ct-rpkiManifest';

const int NID_id_ct_rpkiManifest = 1235;

const int OBJ_id_ct_rpkiManifest = 1;

const String SN_id_ct_asciiTextWithCRLF = 'id-ct-asciiTextWithCRLF';

const int NID_id_ct_asciiTextWithCRLF = 787;

const int OBJ_id_ct_asciiTextWithCRLF = 1;

const String SN_id_ct_xml = 'id-ct-xml';

const int NID_id_ct_xml = 1060;

const int OBJ_id_ct_xml = 1;

const String SN_id_ct_rpkiGhostbusters = 'id-ct-rpkiGhostbusters';

const int NID_id_ct_rpkiGhostbusters = 1236;

const int OBJ_id_ct_rpkiGhostbusters = 1;

const String SN_id_ct_resourceTaggedAttest = 'id-ct-resourceTaggedAttest';

const int NID_id_ct_resourceTaggedAttest = 1237;

const int OBJ_id_ct_resourceTaggedAttest = 1;

const String SN_id_ct_geofeedCSVwithCRLF = 'id-ct-geofeedCSVwithCRLF';

const int NID_id_ct_geofeedCSVwithCRLF = 1246;

const int OBJ_id_ct_geofeedCSVwithCRLF = 1;

const String SN_id_ct_signedChecklist = 'id-ct-signedChecklist';

const int NID_id_ct_signedChecklist = 1247;

const int OBJ_id_ct_signedChecklist = 1;

const String SN_id_ct_ASPA = 'id-ct-ASPA';

const int NID_id_ct_ASPA = 1250;

const int OBJ_id_ct_ASPA = 1;

const String SN_id_ct_signedTAL = 'id-ct-signedTAL';

const int NID_id_ct_signedTAL = 1284;

const int OBJ_id_ct_signedTAL = 1;

const String SN_id_ct_rpkiSignedPrefixList = 'id-ct-rpkiSignedPrefixList';

const int NID_id_ct_rpkiSignedPrefixList = 1320;

const int OBJ_id_ct_rpkiSignedPrefixList = 1;

const String SN_id_smime_aa_receiptRequest = 'id-smime-aa-receiptRequest';

const int NID_id_smime_aa_receiptRequest = 212;

const int OBJ_id_smime_aa_receiptRequest = 1;

const String SN_id_smime_aa_securityLabel = 'id-smime-aa-securityLabel';

const int NID_id_smime_aa_securityLabel = 213;

const int OBJ_id_smime_aa_securityLabel = 1;

const String SN_id_smime_aa_mlExpandHistory = 'id-smime-aa-mlExpandHistory';

const int NID_id_smime_aa_mlExpandHistory = 214;

const int OBJ_id_smime_aa_mlExpandHistory = 1;

const String SN_id_smime_aa_contentHint = 'id-smime-aa-contentHint';

const int NID_id_smime_aa_contentHint = 215;

const int OBJ_id_smime_aa_contentHint = 1;

const String SN_id_smime_aa_msgSigDigest = 'id-smime-aa-msgSigDigest';

const int NID_id_smime_aa_msgSigDigest = 216;

const int OBJ_id_smime_aa_msgSigDigest = 1;

const String SN_id_smime_aa_encapContentType = 'id-smime-aa-encapContentType';

const int NID_id_smime_aa_encapContentType = 217;

const int OBJ_id_smime_aa_encapContentType = 1;

const String SN_id_smime_aa_contentIdentifier = 'id-smime-aa-contentIdentifier';

const int NID_id_smime_aa_contentIdentifier = 218;

const int OBJ_id_smime_aa_contentIdentifier = 1;

const String SN_id_smime_aa_macValue = 'id-smime-aa-macValue';

const int NID_id_smime_aa_macValue = 219;

const int OBJ_id_smime_aa_macValue = 1;

const String SN_id_smime_aa_equivalentLabels = 'id-smime-aa-equivalentLabels';

const int NID_id_smime_aa_equivalentLabels = 220;

const int OBJ_id_smime_aa_equivalentLabels = 1;

const String SN_id_smime_aa_contentReference = 'id-smime-aa-contentReference';

const int NID_id_smime_aa_contentReference = 221;

const int OBJ_id_smime_aa_contentReference = 1;

const String SN_id_smime_aa_encrypKeyPref = 'id-smime-aa-encrypKeyPref';

const int NID_id_smime_aa_encrypKeyPref = 222;

const int OBJ_id_smime_aa_encrypKeyPref = 1;

const String SN_id_smime_aa_signingCertificate =
    'id-smime-aa-signingCertificate';

const int NID_id_smime_aa_signingCertificate = 223;

const int OBJ_id_smime_aa_signingCertificate = 1;

const String SN_id_smime_aa_smimeEncryptCerts = 'id-smime-aa-smimeEncryptCerts';

const int NID_id_smime_aa_smimeEncryptCerts = 224;

const int OBJ_id_smime_aa_smimeEncryptCerts = 1;

const String SN_id_smime_aa_timeStampToken = 'id-smime-aa-timeStampToken';

const int NID_id_smime_aa_timeStampToken = 225;

const int OBJ_id_smime_aa_timeStampToken = 1;

const String SN_id_smime_aa_ets_sigPolicyId = 'id-smime-aa-ets-sigPolicyId';

const int NID_id_smime_aa_ets_sigPolicyId = 226;

const int OBJ_id_smime_aa_ets_sigPolicyId = 1;

const String SN_id_smime_aa_ets_commitmentType =
    'id-smime-aa-ets-commitmentType';

const int NID_id_smime_aa_ets_commitmentType = 227;

const int OBJ_id_smime_aa_ets_commitmentType = 1;

const String SN_id_smime_aa_ets_signerLocation =
    'id-smime-aa-ets-signerLocation';

const int NID_id_smime_aa_ets_signerLocation = 228;

const int OBJ_id_smime_aa_ets_signerLocation = 1;

const String SN_id_smime_aa_ets_signerAttr = 'id-smime-aa-ets-signerAttr';

const int NID_id_smime_aa_ets_signerAttr = 229;

const int OBJ_id_smime_aa_ets_signerAttr = 1;

const String SN_id_smime_aa_ets_otherSigCert = 'id-smime-aa-ets-otherSigCert';

const int NID_id_smime_aa_ets_otherSigCert = 230;

const int OBJ_id_smime_aa_ets_otherSigCert = 1;

const String SN_id_smime_aa_ets_contentTimestamp =
    'id-smime-aa-ets-contentTimestamp';

const int NID_id_smime_aa_ets_contentTimestamp = 231;

const int OBJ_id_smime_aa_ets_contentTimestamp = 1;

const String SN_id_smime_aa_ets_CertificateRefs =
    'id-smime-aa-ets-CertificateRefs';

const int NID_id_smime_aa_ets_CertificateRefs = 232;

const int OBJ_id_smime_aa_ets_CertificateRefs = 1;

const String SN_id_smime_aa_ets_RevocationRefs =
    'id-smime-aa-ets-RevocationRefs';

const int NID_id_smime_aa_ets_RevocationRefs = 233;

const int OBJ_id_smime_aa_ets_RevocationRefs = 1;

const String SN_id_smime_aa_ets_certValues = 'id-smime-aa-ets-certValues';

const int NID_id_smime_aa_ets_certValues = 234;

const int OBJ_id_smime_aa_ets_certValues = 1;

const String SN_id_smime_aa_ets_revocationValues =
    'id-smime-aa-ets-revocationValues';

const int NID_id_smime_aa_ets_revocationValues = 235;

const int OBJ_id_smime_aa_ets_revocationValues = 1;

const String SN_id_smime_aa_ets_escTimeStamp = 'id-smime-aa-ets-escTimeStamp';

const int NID_id_smime_aa_ets_escTimeStamp = 236;

const int OBJ_id_smime_aa_ets_escTimeStamp = 1;

const String SN_id_smime_aa_ets_certCRLTimestamp =
    'id-smime-aa-ets-certCRLTimestamp';

const int NID_id_smime_aa_ets_certCRLTimestamp = 237;

const int OBJ_id_smime_aa_ets_certCRLTimestamp = 1;

const String SN_id_smime_aa_ets_archiveTimeStamp =
    'id-smime-aa-ets-archiveTimeStamp';

const int NID_id_smime_aa_ets_archiveTimeStamp = 238;

const int OBJ_id_smime_aa_ets_archiveTimeStamp = 1;

const String SN_id_smime_aa_signatureType = 'id-smime-aa-signatureType';

const int NID_id_smime_aa_signatureType = 239;

const int OBJ_id_smime_aa_signatureType = 1;

const String SN_id_smime_aa_dvcs_dvc = 'id-smime-aa-dvcs-dvc';

const int NID_id_smime_aa_dvcs_dvc = 240;

const int OBJ_id_smime_aa_dvcs_dvc = 1;

const String SN_id_aa_ets_attrCertificateRefs = 'id-aa-ets-attrCertificateRefs';

const int NID_id_aa_ets_attrCertificateRefs = 1261;

const int OBJ_id_aa_ets_attrCertificateRefs = 1;

const String SN_id_aa_ets_attrRevocationRefs = 'id-aa-ets-attrRevocationRefs';

const int NID_id_aa_ets_attrRevocationRefs = 1262;

const int OBJ_id_aa_ets_attrRevocationRefs = 1;

const String SN_id_smime_aa_signingCertificateV2 =
    'id-smime-aa-signingCertificateV2';

const int NID_id_smime_aa_signingCertificateV2 = 1086;

const int OBJ_id_smime_aa_signingCertificateV2 = 1;

const String SN_id_aa_ets_archiveTimestampV2 = 'id-aa-ets-archiveTimestampV2';

const int NID_id_aa_ets_archiveTimestampV2 = 1280;

const int OBJ_id_aa_ets_archiveTimestampV2 = 1;

const String SN_id_smime_alg_ESDHwith3DES = 'id-smime-alg-ESDHwith3DES';

const int NID_id_smime_alg_ESDHwith3DES = 241;

const int OBJ_id_smime_alg_ESDHwith3DES = 1;

const String SN_id_smime_alg_ESDHwithRC2 = 'id-smime-alg-ESDHwithRC2';

const int NID_id_smime_alg_ESDHwithRC2 = 242;

const int OBJ_id_smime_alg_ESDHwithRC2 = 1;

const String SN_id_smime_alg_3DESwrap = 'id-smime-alg-3DESwrap';

const int NID_id_smime_alg_3DESwrap = 243;

const int OBJ_id_smime_alg_3DESwrap = 1;

const String SN_id_smime_alg_RC2wrap = 'id-smime-alg-RC2wrap';

const int NID_id_smime_alg_RC2wrap = 244;

const int OBJ_id_smime_alg_RC2wrap = 1;

const String SN_id_smime_alg_ESDH = 'id-smime-alg-ESDH';

const int NID_id_smime_alg_ESDH = 245;

const int OBJ_id_smime_alg_ESDH = 1;

const String SN_id_smime_alg_CMS3DESwrap = 'id-smime-alg-CMS3DESwrap';

const int NID_id_smime_alg_CMS3DESwrap = 246;

const int OBJ_id_smime_alg_CMS3DESwrap = 1;

const String SN_id_smime_alg_CMSRC2wrap = 'id-smime-alg-CMSRC2wrap';

const int NID_id_smime_alg_CMSRC2wrap = 247;

const int OBJ_id_smime_alg_CMSRC2wrap = 1;

const String SN_id_alg_PWRI_KEK = 'id-alg-PWRI-KEK';

const int NID_id_alg_PWRI_KEK = 893;

const int OBJ_id_alg_PWRI_KEK = 1;

const String SN_id_smime_cd_ldap = 'id-smime-cd-ldap';

const int NID_id_smime_cd_ldap = 248;

const int OBJ_id_smime_cd_ldap = 1;

const String SN_id_smime_spq_ets_sqt_uri = 'id-smime-spq-ets-sqt-uri';

const int NID_id_smime_spq_ets_sqt_uri = 249;

const int OBJ_id_smime_spq_ets_sqt_uri = 1;

const String SN_id_smime_spq_ets_sqt_unotice = 'id-smime-spq-ets-sqt-unotice';

const int NID_id_smime_spq_ets_sqt_unotice = 250;

const int OBJ_id_smime_spq_ets_sqt_unotice = 1;

const String SN_id_smime_cti_ets_proofOfOrigin =
    'id-smime-cti-ets-proofOfOrigin';

const int NID_id_smime_cti_ets_proofOfOrigin = 251;

const int OBJ_id_smime_cti_ets_proofOfOrigin = 1;

const String SN_id_smime_cti_ets_proofOfReceipt =
    'id-smime-cti-ets-proofOfReceipt';

const int NID_id_smime_cti_ets_proofOfReceipt = 252;

const int OBJ_id_smime_cti_ets_proofOfReceipt = 1;

const String SN_id_smime_cti_ets_proofOfDelivery =
    'id-smime-cti-ets-proofOfDelivery';

const int NID_id_smime_cti_ets_proofOfDelivery = 253;

const int OBJ_id_smime_cti_ets_proofOfDelivery = 1;

const String SN_id_smime_cti_ets_proofOfSender =
    'id-smime-cti-ets-proofOfSender';

const int NID_id_smime_cti_ets_proofOfSender = 254;

const int OBJ_id_smime_cti_ets_proofOfSender = 1;

const String SN_id_smime_cti_ets_proofOfApproval =
    'id-smime-cti-ets-proofOfApproval';

const int NID_id_smime_cti_ets_proofOfApproval = 255;

const int OBJ_id_smime_cti_ets_proofOfApproval = 1;

const String SN_id_smime_cti_ets_proofOfCreation =
    'id-smime-cti-ets-proofOfCreation';

const int NID_id_smime_cti_ets_proofOfCreation = 256;

const int OBJ_id_smime_cti_ets_proofOfCreation = 1;

const String LN_friendlyName = 'friendlyName';

const int NID_friendlyName = 156;

const int OBJ_friendlyName = 1;

const String LN_localKeyID = 'localKeyID';

const int NID_localKeyID = 157;

const int OBJ_localKeyID = 1;

const int OBJ_ms_corp = 1;

const String SN_ms_csp_name = 'CSPName';

const String LN_ms_csp_name = 'Microsoft CSP Name';

const int NID_ms_csp_name = 417;

const int OBJ_ms_csp_name = 1;

const String SN_LocalKeySet = 'LocalKeySet';

const String LN_LocalKeySet = 'Microsoft Local Key set';

const int NID_LocalKeySet = 856;

const int OBJ_LocalKeySet = 1;

const int OBJ_certTypes = 1;

const String LN_x509Certificate = 'x509Certificate';

const int NID_x509Certificate = 158;

const int OBJ_x509Certificate = 1;

const String LN_sdsiCertificate = 'sdsiCertificate';

const int NID_sdsiCertificate = 159;

const int OBJ_sdsiCertificate = 1;

const int OBJ_crlTypes = 1;

const String LN_x509Crl = 'x509Crl';

const int NID_x509Crl = 160;

const int OBJ_x509Crl = 1;

const String SN_id_aa_CMSAlgorithmProtection = 'id-aa-CMSAlgorithmProtection';

const int NID_id_aa_CMSAlgorithmProtection = 1263;

const int OBJ_id_aa_CMSAlgorithmProtection = 1;

const int OBJ_pkcs12 = 1;

const int OBJ_pkcs12_pbeids = 1;

const String SN_pbe_WithSHA1And128BitRC4 = 'PBE-SHA1-RC4-128';

const String LN_pbe_WithSHA1And128BitRC4 = 'pbeWithSHA1And128BitRC4';

const int NID_pbe_WithSHA1And128BitRC4 = 144;

const int OBJ_pbe_WithSHA1And128BitRC4 = 1;

const String SN_pbe_WithSHA1And40BitRC4 = 'PBE-SHA1-RC4-40';

const String LN_pbe_WithSHA1And40BitRC4 = 'pbeWithSHA1And40BitRC4';

const int NID_pbe_WithSHA1And40BitRC4 = 145;

const int OBJ_pbe_WithSHA1And40BitRC4 = 1;

const String SN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'PBE-SHA1-3DES';

const String LN_pbe_WithSHA1And3_Key_TripleDES_CBC =
    'pbeWithSHA1And3-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;

const int OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'PBE-SHA1-2DES';

const String LN_pbe_WithSHA1And2_Key_TripleDES_CBC =
    'pbeWithSHA1And2-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;

const int OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And128BitRC2_CBC = 'PBE-SHA1-RC2-128';

const String LN_pbe_WithSHA1And128BitRC2_CBC = 'pbeWithSHA1And128BitRC2-CBC';

const int NID_pbe_WithSHA1And128BitRC2_CBC = 148;

const int OBJ_pbe_WithSHA1And128BitRC2_CBC = 1;

const String SN_pbe_WithSHA1And40BitRC2_CBC = 'PBE-SHA1-RC2-40';

const String LN_pbe_WithSHA1And40BitRC2_CBC = 'pbeWithSHA1And40BitRC2-CBC';

const int NID_pbe_WithSHA1And40BitRC2_CBC = 149;

const int OBJ_pbe_WithSHA1And40BitRC2_CBC = 1;

const int OBJ_pkcs12_Version1 = 1;

const int OBJ_pkcs12_BagIds = 1;

const String LN_keyBag = 'keyBag';

const int NID_keyBag = 150;

const int OBJ_keyBag = 1;

const String LN_pkcs8ShroudedKeyBag = 'pkcs8ShroudedKeyBag';

const int NID_pkcs8ShroudedKeyBag = 151;

const int OBJ_pkcs8ShroudedKeyBag = 1;

const String LN_certBag = 'certBag';

const int NID_certBag = 152;

const int OBJ_certBag = 1;

const String LN_crlBag = 'crlBag';

const int NID_crlBag = 153;

const int OBJ_crlBag = 1;

const String LN_secretBag = 'secretBag';

const int NID_secretBag = 154;

const int OBJ_secretBag = 1;

const String LN_safeContentsBag = 'safeContentsBag';

const int NID_safeContentsBag = 155;

const int OBJ_safeContentsBag = 1;

const String SN_md2 = 'MD2';

const String LN_md2 = 'md2';

const int NID_md2 = 3;

const int OBJ_md2 = 1;

const String SN_md4 = 'MD4';

const String LN_md4 = 'md4';

const int NID_md4 = 257;

const int OBJ_md4 = 1;

const String SN_md5 = 'MD5';

const String LN_md5 = 'md5';

const int NID_md5 = 4;

const int OBJ_md5 = 1;

const String SN_md5_sha1 = 'MD5-SHA1';

const String LN_md5_sha1 = 'md5-sha1';

const int NID_md5_sha1 = 114;

const String LN_hmacWithMD5 = 'hmacWithMD5';

const int NID_hmacWithMD5 = 797;

const int OBJ_hmacWithMD5 = 1;

const String LN_hmacWithSHA1 = 'hmacWithSHA1';

const int NID_hmacWithSHA1 = 163;

const int OBJ_hmacWithSHA1 = 1;

const String SN_sm2 = 'SM2';

const String LN_sm2 = 'sm2';

const int NID_sm2 = 1172;

const int OBJ_sm2 = 1;

const String SN_sm3 = 'SM3';

const String LN_sm3 = 'sm3';

const int NID_sm3 = 1143;

const int OBJ_sm3 = 1;

const String SN_sm3WithRSAEncryption = 'RSA-SM3';

const String LN_sm3WithRSAEncryption = 'sm3WithRSAEncryption';

const int NID_sm3WithRSAEncryption = 1144;

const int OBJ_sm3WithRSAEncryption = 1;

const String SN_SM2_with_SM3 = 'SM2-SM3';

const String LN_SM2_with_SM3 = 'SM2-with-SM3';

const int NID_SM2_with_SM3 = 1204;

const int OBJ_SM2_with_SM3 = 1;

const String LN_hmacWithSM3 = 'hmacWithSM3';

const int NID_hmacWithSM3 = 1281;

const int OBJ_hmacWithSM3 = 1;

const String LN_hmacWithSHA224 = 'hmacWithSHA224';

const int NID_hmacWithSHA224 = 798;

const int OBJ_hmacWithSHA224 = 1;

const String LN_hmacWithSHA256 = 'hmacWithSHA256';

const int NID_hmacWithSHA256 = 799;

const int OBJ_hmacWithSHA256 = 1;

const String LN_hmacWithSHA384 = 'hmacWithSHA384';

const int NID_hmacWithSHA384 = 800;

const int OBJ_hmacWithSHA384 = 1;

const String LN_hmacWithSHA512 = 'hmacWithSHA512';

const int NID_hmacWithSHA512 = 801;

const int OBJ_hmacWithSHA512 = 1;

const String LN_hmacWithSHA512_224 = 'hmacWithSHA512-224';

const int NID_hmacWithSHA512_224 = 1193;

const int OBJ_hmacWithSHA512_224 = 1;

const String LN_hmacWithSHA512_256 = 'hmacWithSHA512-256';

const int NID_hmacWithSHA512_256 = 1194;

const int OBJ_hmacWithSHA512_256 = 1;

const String SN_rc2_cbc = 'RC2-CBC';

const String LN_rc2_cbc = 'rc2-cbc';

const int NID_rc2_cbc = 37;

const int OBJ_rc2_cbc = 1;

const String SN_rc2_ecb = 'RC2-ECB';

const String LN_rc2_ecb = 'rc2-ecb';

const int NID_rc2_ecb = 38;

const String SN_rc2_cfb64 = 'RC2-CFB';

const String LN_rc2_cfb64 = 'rc2-cfb';

const int NID_rc2_cfb64 = 39;

const String SN_rc2_ofb64 = 'RC2-OFB';

const String LN_rc2_ofb64 = 'rc2-ofb';

const int NID_rc2_ofb64 = 40;

const String SN_rc2_40_cbc = 'RC2-40-CBC';

const String LN_rc2_40_cbc = 'rc2-40-cbc';

const int NID_rc2_40_cbc = 98;

const String SN_rc2_64_cbc = 'RC2-64-CBC';

const String LN_rc2_64_cbc = 'rc2-64-cbc';

const int NID_rc2_64_cbc = 166;

const String SN_rc4 = 'RC4';

const String LN_rc4 = 'rc4';

const int NID_rc4 = 5;

const int OBJ_rc4 = 1;

const String SN_rc4_40 = 'RC4-40';

const String LN_rc4_40 = 'rc4-40';

const int NID_rc4_40 = 97;

const String SN_des_ede3_cbc = 'DES-EDE3-CBC';

const String LN_des_ede3_cbc = 'des-ede3-cbc';

const int NID_des_ede3_cbc = 44;

const int OBJ_des_ede3_cbc = 1;

const String SN_rc5_cbc = 'RC5-CBC';

const String LN_rc5_cbc = 'rc5-cbc';

const int NID_rc5_cbc = 120;

const int OBJ_rc5_cbc = 1;

const String SN_rc5_ecb = 'RC5-ECB';

const String LN_rc5_ecb = 'rc5-ecb';

const int NID_rc5_ecb = 121;

const String SN_rc5_cfb64 = 'RC5-CFB';

const String LN_rc5_cfb64 = 'rc5-cfb';

const int NID_rc5_cfb64 = 122;

const String SN_rc5_ofb64 = 'RC5-OFB';

const String LN_rc5_ofb64 = 'rc5-ofb';

const int NID_rc5_ofb64 = 123;

const String SN_ms_ext_req = 'msExtReq';

const String LN_ms_ext_req = 'Microsoft Extension Request';

const int NID_ms_ext_req = 171;

const int OBJ_ms_ext_req = 1;

const String SN_ms_code_ind = 'msCodeInd';

const String LN_ms_code_ind = 'Microsoft Individual Code Signing';

const int NID_ms_code_ind = 134;

const int OBJ_ms_code_ind = 1;

const String SN_ms_code_com = 'msCodeCom';

const String LN_ms_code_com = 'Microsoft Commercial Code Signing';

const int NID_ms_code_com = 135;

const int OBJ_ms_code_com = 1;

const String SN_ms_ctl_sign = 'msCTLSign';

const String LN_ms_ctl_sign = 'Microsoft Trust List Signing';

const int NID_ms_ctl_sign = 136;

const int OBJ_ms_ctl_sign = 1;

const String SN_ms_sgc = 'msSGC';

const String LN_ms_sgc = 'Microsoft Server Gated Crypto';

const int NID_ms_sgc = 137;

const int OBJ_ms_sgc = 1;

const String SN_ms_efs = 'msEFS';

const String LN_ms_efs = 'Microsoft Encrypted File System';

const int NID_ms_efs = 138;

const int OBJ_ms_efs = 1;

const String SN_ms_smartcard_login = 'msSmartcardLogin';

const String LN_ms_smartcard_login = 'Microsoft Smartcard Login';

const int NID_ms_smartcard_login = 648;

const int OBJ_ms_smartcard_login = 1;

const String SN_ms_upn = 'msUPN';

const String LN_ms_upn = 'Microsoft User Principal Name';

const int NID_ms_upn = 649;

const int OBJ_ms_upn = 1;

const String SN_ms_ntds_sec_ext = 'ms-ntds-sec-ext';

const String LN_ms_ntds_sec_ext = 'Microsoft NTDS CA Extension';

const int NID_ms_ntds_sec_ext = 1292;

const int OBJ_ms_ntds_sec_ext = 1;

const String SN_ms_ntds_obj_sid = 'ms-ntds-obj-sid';

const String LN_ms_ntds_obj_sid = 'Microsoft NTDS AD objectSid';

const int NID_ms_ntds_obj_sid = 1291;

const int OBJ_ms_ntds_obj_sid = 1;

const String SN_ms_cert_templ = 'ms-cert-templ';

const String LN_ms_cert_templ = 'Microsoft certificate template';

const int NID_ms_cert_templ = 1293;

const int OBJ_ms_cert_templ = 1;

const String SN_ms_app_policies = 'ms-app-policies';

const String LN_ms_app_policies = 'Microsoft Application Policies Extension';

const int NID_ms_app_policies = 1294;

const int OBJ_ms_app_policies = 1;

const String SN_idea_cbc = 'IDEA-CBC';

const String LN_idea_cbc = 'idea-cbc';

const int NID_idea_cbc = 34;

const int OBJ_idea_cbc = 1;

const String SN_idea_ecb = 'IDEA-ECB';

const String LN_idea_ecb = 'idea-ecb';

const int NID_idea_ecb = 36;

const String SN_idea_cfb64 = 'IDEA-CFB';

const String LN_idea_cfb64 = 'idea-cfb';

const int NID_idea_cfb64 = 35;

const String SN_idea_ofb64 = 'IDEA-OFB';

const String LN_idea_ofb64 = 'idea-ofb';

const int NID_idea_ofb64 = 46;

const String SN_bf_cbc = 'BF-CBC';

const String LN_bf_cbc = 'bf-cbc';

const int NID_bf_cbc = 91;

const int OBJ_bf_cbc = 1;

const String SN_bf_ecb = 'BF-ECB';

const String LN_bf_ecb = 'bf-ecb';

const int NID_bf_ecb = 92;

const String SN_bf_cfb64 = 'BF-CFB';

const String LN_bf_cfb64 = 'bf-cfb';

const int NID_bf_cfb64 = 93;

const String SN_bf_ofb64 = 'BF-OFB';

const String LN_bf_ofb64 = 'bf-ofb';

const int NID_bf_ofb64 = 94;

const String SN_id_pkix = 'PKIX';

const int NID_id_pkix = 127;

const int OBJ_id_pkix = 1;

const String SN_id_pkix_mod = 'id-pkix-mod';

const int NID_id_pkix_mod = 258;

const int OBJ_id_pkix_mod = 1;

const String SN_id_pe = 'id-pe';

const int NID_id_pe = 175;

const int OBJ_id_pe = 1;

const String SN_id_qt = 'id-qt';

const int NID_id_qt = 259;

const int OBJ_id_qt = 1;

const String SN_id_kp = 'id-kp';

const int NID_id_kp = 128;

const int OBJ_id_kp = 1;

const String SN_id_it = 'id-it';

const int NID_id_it = 260;

const int OBJ_id_it = 1;

const String SN_id_pkip = 'id-pkip';

const int NID_id_pkip = 261;

const int OBJ_id_pkip = 1;

const String SN_id_alg = 'id-alg';

const int NID_id_alg = 262;

const int OBJ_id_alg = 1;

const String SN_id_cmc = 'id-cmc';

const int NID_id_cmc = 263;

const int OBJ_id_cmc = 1;

const String SN_id_on = 'id-on';

const int NID_id_on = 264;

const int OBJ_id_on = 1;

const String SN_id_pda = 'id-pda';

const int NID_id_pda = 265;

const int OBJ_id_pda = 1;

const String SN_id_aca = 'id-aca';

const int NID_id_aca = 266;

const int OBJ_id_aca = 1;

const String SN_id_qcs = 'id-qcs';

const int NID_id_qcs = 267;

const int OBJ_id_qcs = 1;

const String SN_id_cp = 'id-cp';

const int NID_id_cp = 1238;

const int OBJ_id_cp = 1;

const String SN_id_cct = 'id-cct';

const int NID_id_cct = 268;

const int OBJ_id_cct = 1;

const String SN_id_ppl = 'id-ppl';

const int NID_id_ppl = 662;

const int OBJ_id_ppl = 1;

const String SN_id_ad = 'id-ad';

const int NID_id_ad = 176;

const int OBJ_id_ad = 1;

const String SN_id_pkix1_explicit_88 = 'id-pkix1-explicit-88';

const int NID_id_pkix1_explicit_88 = 269;

const int OBJ_id_pkix1_explicit_88 = 1;

const String SN_id_pkix1_implicit_88 = 'id-pkix1-implicit-88';

const int NID_id_pkix1_implicit_88 = 270;

const int OBJ_id_pkix1_implicit_88 = 1;

const String SN_id_pkix1_explicit_93 = 'id-pkix1-explicit-93';

const int NID_id_pkix1_explicit_93 = 271;

const int OBJ_id_pkix1_explicit_93 = 1;

const String SN_id_pkix1_implicit_93 = 'id-pkix1-implicit-93';

const int NID_id_pkix1_implicit_93 = 272;

const int OBJ_id_pkix1_implicit_93 = 1;

const String SN_id_mod_crmf = 'id-mod-crmf';

const int NID_id_mod_crmf = 273;

const int OBJ_id_mod_crmf = 1;

const String SN_id_mod_cmc = 'id-mod-cmc';

const int NID_id_mod_cmc = 274;

const int OBJ_id_mod_cmc = 1;

const String SN_id_mod_kea_profile_88 = 'id-mod-kea-profile-88';

const int NID_id_mod_kea_profile_88 = 275;

const int OBJ_id_mod_kea_profile_88 = 1;

const String SN_id_mod_kea_profile_93 = 'id-mod-kea-profile-93';

const int NID_id_mod_kea_profile_93 = 276;

const int OBJ_id_mod_kea_profile_93 = 1;

const String SN_id_mod_cmp = 'id-mod-cmp';

const int NID_id_mod_cmp = 277;

const int OBJ_id_mod_cmp = 1;

const String SN_id_mod_qualified_cert_88 = 'id-mod-qualified-cert-88';

const int NID_id_mod_qualified_cert_88 = 278;

const int OBJ_id_mod_qualified_cert_88 = 1;

const String SN_id_mod_qualified_cert_93 = 'id-mod-qualified-cert-93';

const int NID_id_mod_qualified_cert_93 = 279;

const int OBJ_id_mod_qualified_cert_93 = 1;

const String SN_id_mod_attribute_cert = 'id-mod-attribute-cert';

const int NID_id_mod_attribute_cert = 280;

const int OBJ_id_mod_attribute_cert = 1;

const String SN_id_mod_timestamp_protocol = 'id-mod-timestamp-protocol';

const int NID_id_mod_timestamp_protocol = 281;

const int OBJ_id_mod_timestamp_protocol = 1;

const String SN_id_mod_ocsp = 'id-mod-ocsp';

const int NID_id_mod_ocsp = 282;

const int OBJ_id_mod_ocsp = 1;

const String SN_id_mod_dvcs = 'id-mod-dvcs';

const int NID_id_mod_dvcs = 283;

const int OBJ_id_mod_dvcs = 1;

const String SN_id_mod_cmp2000 = 'id-mod-cmp2000';

const int NID_id_mod_cmp2000 = 284;

const int OBJ_id_mod_cmp2000 = 1;

const String SN_id_mod_cmp2000_02 = 'id-mod-cmp2000-02';

const int NID_id_mod_cmp2000_02 = 1251;

const int OBJ_id_mod_cmp2000_02 = 1;

const String SN_id_mod_cmp2021_88 = 'id-mod-cmp2021-88';

const int NID_id_mod_cmp2021_88 = 1252;

const int OBJ_id_mod_cmp2021_88 = 1;

const String SN_id_mod_cmp2021_02 = 'id-mod-cmp2021-02';

const int NID_id_mod_cmp2021_02 = 1253;

const int OBJ_id_mod_cmp2021_02 = 1;

const String SN_info_access = 'authorityInfoAccess';

const String LN_info_access = 'Authority Information Access';

const int NID_info_access = 177;

const int OBJ_info_access = 1;

const String SN_biometricInfo = 'biometricInfo';

const String LN_biometricInfo = 'Biometric Info';

const int NID_biometricInfo = 285;

const int OBJ_biometricInfo = 1;

const String SN_qcStatements = 'qcStatements';

const int NID_qcStatements = 286;

const int OBJ_qcStatements = 1;

const String SN_ac_auditIdentity = 'ac-auditIdentity';

const String LN_ac_auditIdentity = 'X509v3 Audit Identity';

const int NID_ac_auditIdentity = 287;

const int OBJ_ac_auditIdentity = 1;

const int NID_ac_auditEntity = 1323;

const int OBJ_ac_auditEntity = 1;

const String SN_ac_targeting = 'ac-targeting';

const int NID_ac_targeting = 288;

const int OBJ_ac_targeting = 1;

const String SN_aaControls = 'aaControls';

const int NID_aaControls = 289;

const int OBJ_aaControls = 1;

const String SN_sbgp_ipAddrBlock = 'sbgp-ipAddrBlock';

const int NID_sbgp_ipAddrBlock = 290;

const int OBJ_sbgp_ipAddrBlock = 1;

const String SN_sbgp_autonomousSysNum = 'sbgp-autonomousSysNum';

const int NID_sbgp_autonomousSysNum = 291;

const int OBJ_sbgp_autonomousSysNum = 1;

const String SN_sbgp_routerIdentifier = 'sbgp-routerIdentifier';

const int NID_sbgp_routerIdentifier = 292;

const int OBJ_sbgp_routerIdentifier = 1;

const String SN_ac_proxying = 'ac-proxying';

const int NID_ac_proxying = 397;

const int OBJ_ac_proxying = 1;

const String SN_sinfo_access = 'subjectInfoAccess';

const String LN_sinfo_access = 'Subject Information Access';

const int NID_sinfo_access = 398;

const int OBJ_sinfo_access = 1;

const String SN_proxyCertInfo = 'proxyCertInfo';

const String LN_proxyCertInfo = 'Proxy Certificate Information';

const int NID_proxyCertInfo = 663;

const int OBJ_proxyCertInfo = 1;

const String SN_tlsfeature = 'tlsfeature';

const String LN_tlsfeature = 'TLS Feature';

const int NID_tlsfeature = 1020;

const int OBJ_tlsfeature = 1;

const String SN_sbgp_ipAddrBlockv2 = 'sbgp-ipAddrBlockv2';

const int NID_sbgp_ipAddrBlockv2 = 1239;

const int OBJ_sbgp_ipAddrBlockv2 = 1;

const String SN_sbgp_autonomousSysNumv2 = 'sbgp-autonomousSysNumv2';

const int NID_sbgp_autonomousSysNumv2 = 1240;

const int OBJ_sbgp_autonomousSysNumv2 = 1;

const String SN_id_qt_cps = 'id-qt-cps';

const String LN_id_qt_cps = 'Policy Qualifier CPS';

const int NID_id_qt_cps = 164;

const int OBJ_id_qt_cps = 1;

const String SN_id_qt_unotice = 'id-qt-unotice';

const String LN_id_qt_unotice = 'Policy Qualifier User Notice';

const int NID_id_qt_unotice = 165;

const int OBJ_id_qt_unotice = 1;

const String SN_textNotice = 'textNotice';

const int NID_textNotice = 293;

const int OBJ_textNotice = 1;

const String SN_server_auth = 'serverAuth';

const String LN_server_auth = 'TLS Web Server Authentication';

const int NID_server_auth = 129;

const int OBJ_server_auth = 1;

const String SN_client_auth = 'clientAuth';

const String LN_client_auth = 'TLS Web Client Authentication';

const int NID_client_auth = 130;

const int OBJ_client_auth = 1;

const String SN_code_sign = 'codeSigning';

const String LN_code_sign = 'Code Signing';

const int NID_code_sign = 131;

const int OBJ_code_sign = 1;

const String SN_email_protect = 'emailProtection';

const String LN_email_protect = 'E-mail Protection';

const int NID_email_protect = 132;

const int OBJ_email_protect = 1;

const String SN_ipsecEndSystem = 'ipsecEndSystem';

const String LN_ipsecEndSystem = 'IPSec End System';

const int NID_ipsecEndSystem = 294;

const int OBJ_ipsecEndSystem = 1;

const String SN_ipsecTunnel = 'ipsecTunnel';

const String LN_ipsecTunnel = 'IPSec Tunnel';

const int NID_ipsecTunnel = 295;

const int OBJ_ipsecTunnel = 1;

const String SN_ipsecUser = 'ipsecUser';

const String LN_ipsecUser = 'IPSec User';

const int NID_ipsecUser = 296;

const int OBJ_ipsecUser = 1;

const String SN_time_stamp = 'timeStamping';

const String LN_time_stamp = 'Time Stamping';

const int NID_time_stamp = 133;

const int OBJ_time_stamp = 1;

const String SN_OCSP_sign = 'OCSPSigning';

const String LN_OCSP_sign = 'OCSP Signing';

const int NID_OCSP_sign = 180;

const int OBJ_OCSP_sign = 1;

const String SN_dvcs = 'DVCS';

const String LN_dvcs = 'dvcs';

const int NID_dvcs = 297;

const int OBJ_dvcs = 1;

const String SN_ipsec_IKE = 'ipsecIKE';

const String LN_ipsec_IKE = 'ipsec Internet Key Exchange';

const int NID_ipsec_IKE = 1022;

const int OBJ_ipsec_IKE = 1;

const String SN_capwapAC = 'capwapAC';

const String LN_capwapAC = 'Ctrl/provision WAP Access';

const int NID_capwapAC = 1023;

const int OBJ_capwapAC = 1;

const String SN_capwapWTP = 'capwapWTP';

const String LN_capwapWTP = 'Ctrl/Provision WAP Termination';

const int NID_capwapWTP = 1024;

const int OBJ_capwapWTP = 1;

const String SN_sshClient = 'secureShellClient';

const String LN_sshClient = 'SSH Client';

const int NID_sshClient = 1025;

const int OBJ_sshClient = 1;

const String SN_sshServer = 'secureShellServer';

const String LN_sshServer = 'SSH Server';

const int NID_sshServer = 1026;

const int OBJ_sshServer = 1;

const String SN_sendRouter = 'sendRouter';

const String LN_sendRouter = 'Send Router';

const int NID_sendRouter = 1027;

const int OBJ_sendRouter = 1;

const String SN_sendProxiedRouter = 'sendProxiedRouter';

const String LN_sendProxiedRouter = 'Send Proxied Router';

const int NID_sendProxiedRouter = 1028;

const int OBJ_sendProxiedRouter = 1;

const String SN_sendOwner = 'sendOwner';

const String LN_sendOwner = 'Send Owner';

const int NID_sendOwner = 1029;

const int OBJ_sendOwner = 1;

const String SN_sendProxiedOwner = 'sendProxiedOwner';

const String LN_sendProxiedOwner = 'Send Proxied Owner';

const int NID_sendProxiedOwner = 1030;

const int OBJ_sendProxiedOwner = 1;

const String SN_cmcCA = 'cmcCA';

const String LN_cmcCA = 'CMC Certificate Authority';

const int NID_cmcCA = 1131;

const int OBJ_cmcCA = 1;

const String SN_cmcRA = 'cmcRA';

const String LN_cmcRA = 'CMC Registration Authority';

const int NID_cmcRA = 1132;

const int OBJ_cmcRA = 1;

const String SN_cmcArchive = 'cmcArchive';

const String LN_cmcArchive = 'CMC Archive Server';

const int NID_cmcArchive = 1219;

const int OBJ_cmcArchive = 1;

const String SN_id_kp_bgpsec_router = 'id-kp-bgpsec-router';

const String LN_id_kp_bgpsec_router = 'BGPsec Router';

const int NID_id_kp_bgpsec_router = 1220;

const int OBJ_id_kp_bgpsec_router = 1;

const String SN_id_kp_BrandIndicatorforMessageIdentification =
    'id-kp-BrandIndicatorforMessageIdentification';

const String LN_id_kp_BrandIndicatorforMessageIdentification =
    'Brand Indicator for Message Identification';

const int NID_id_kp_BrandIndicatorforMessageIdentification = 1221;

const int OBJ_id_kp_BrandIndicatorforMessageIdentification = 1;

const String SN_cmKGA = 'cmKGA';

const String LN_cmKGA = 'Certificate Management Key Generation Authority';

const int NID_cmKGA = 1222;

const int OBJ_cmKGA = 1;

const String SN_id_it_caProtEncCert = 'id-it-caProtEncCert';

const int NID_id_it_caProtEncCert = 298;

const int OBJ_id_it_caProtEncCert = 1;

const String SN_id_it_signKeyPairTypes = 'id-it-signKeyPairTypes';

const int NID_id_it_signKeyPairTypes = 299;

const int OBJ_id_it_signKeyPairTypes = 1;

const String SN_id_it_encKeyPairTypes = 'id-it-encKeyPairTypes';

const int NID_id_it_encKeyPairTypes = 300;

const int OBJ_id_it_encKeyPairTypes = 1;

const String SN_id_it_preferredSymmAlg = 'id-it-preferredSymmAlg';

const int NID_id_it_preferredSymmAlg = 301;

const int OBJ_id_it_preferredSymmAlg = 1;

const String SN_id_it_caKeyUpdateInfo = 'id-it-caKeyUpdateInfo';

const int NID_id_it_caKeyUpdateInfo = 302;

const int OBJ_id_it_caKeyUpdateInfo = 1;

const String SN_id_it_currentCRL = 'id-it-currentCRL';

const int NID_id_it_currentCRL = 303;

const int OBJ_id_it_currentCRL = 1;

const String SN_id_it_unsupportedOIDs = 'id-it-unsupportedOIDs';

const int NID_id_it_unsupportedOIDs = 304;

const int OBJ_id_it_unsupportedOIDs = 1;

const String SN_id_it_subscriptionRequest = 'id-it-subscriptionRequest';

const int NID_id_it_subscriptionRequest = 305;

const int OBJ_id_it_subscriptionRequest = 1;

const String SN_id_it_subscriptionResponse = 'id-it-subscriptionResponse';

const int NID_id_it_subscriptionResponse = 306;

const int OBJ_id_it_subscriptionResponse = 1;

const String SN_id_it_keyPairParamReq = 'id-it-keyPairParamReq';

const int NID_id_it_keyPairParamReq = 307;

const int OBJ_id_it_keyPairParamReq = 1;

const String SN_id_it_keyPairParamRep = 'id-it-keyPairParamRep';

const int NID_id_it_keyPairParamRep = 308;

const int OBJ_id_it_keyPairParamRep = 1;

const String SN_id_it_revPassphrase = 'id-it-revPassphrase';

const int NID_id_it_revPassphrase = 309;

const int OBJ_id_it_revPassphrase = 1;

const String SN_id_it_implicitConfirm = 'id-it-implicitConfirm';

const int NID_id_it_implicitConfirm = 310;

const int OBJ_id_it_implicitConfirm = 1;

const String SN_id_it_confirmWaitTime = 'id-it-confirmWaitTime';

const int NID_id_it_confirmWaitTime = 311;

const int OBJ_id_it_confirmWaitTime = 1;

const String SN_id_it_origPKIMessage = 'id-it-origPKIMessage';

const int NID_id_it_origPKIMessage = 312;

const int OBJ_id_it_origPKIMessage = 1;

const String SN_id_it_suppLangTags = 'id-it-suppLangTags';

const int NID_id_it_suppLangTags = 784;

const int OBJ_id_it_suppLangTags = 1;

const String SN_id_it_caCerts = 'id-it-caCerts';

const int NID_id_it_caCerts = 1223;

const int OBJ_id_it_caCerts = 1;

const String SN_id_it_rootCaKeyUpdate = 'id-it-rootCaKeyUpdate';

const int NID_id_it_rootCaKeyUpdate = 1224;

const int OBJ_id_it_rootCaKeyUpdate = 1;

const String SN_id_it_certReqTemplate = 'id-it-certReqTemplate';

const int NID_id_it_certReqTemplate = 1225;

const int OBJ_id_it_certReqTemplate = 1;

const String SN_id_it_rootCaCert = 'id-it-rootCaCert';

const int NID_id_it_rootCaCert = 1254;

const int OBJ_id_it_rootCaCert = 1;

const String SN_id_it_certProfile = 'id-it-certProfile';

const int NID_id_it_certProfile = 1255;

const int OBJ_id_it_certProfile = 1;

const String SN_id_it_crlStatusList = 'id-it-crlStatusList';

const int NID_id_it_crlStatusList = 1256;

const int OBJ_id_it_crlStatusList = 1;

const String SN_id_it_crls = 'id-it-crls';

const int NID_id_it_crls = 1257;

const int OBJ_id_it_crls = 1;

const String SN_id_regCtrl = 'id-regCtrl';

const int NID_id_regCtrl = 313;

const int OBJ_id_regCtrl = 1;

const String SN_id_regInfo = 'id-regInfo';

const int NID_id_regInfo = 314;

const int OBJ_id_regInfo = 1;

const String SN_id_regCtrl_regToken = 'id-regCtrl-regToken';

const int NID_id_regCtrl_regToken = 315;

const int OBJ_id_regCtrl_regToken = 1;

const String SN_id_regCtrl_authenticator = 'id-regCtrl-authenticator';

const int NID_id_regCtrl_authenticator = 316;

const int OBJ_id_regCtrl_authenticator = 1;

const String SN_id_regCtrl_pkiPublicationInfo = 'id-regCtrl-pkiPublicationInfo';

const int NID_id_regCtrl_pkiPublicationInfo = 317;

const int OBJ_id_regCtrl_pkiPublicationInfo = 1;

const String SN_id_regCtrl_pkiArchiveOptions = 'id-regCtrl-pkiArchiveOptions';

const int NID_id_regCtrl_pkiArchiveOptions = 318;

const int OBJ_id_regCtrl_pkiArchiveOptions = 1;

const String SN_id_regCtrl_oldCertID = 'id-regCtrl-oldCertID';

const int NID_id_regCtrl_oldCertID = 319;

const int OBJ_id_regCtrl_oldCertID = 1;

const String SN_id_regCtrl_protocolEncrKey = 'id-regCtrl-protocolEncrKey';

const int NID_id_regCtrl_protocolEncrKey = 320;

const int OBJ_id_regCtrl_protocolEncrKey = 1;

const String SN_id_regCtrl_altCertTemplate = 'id-regCtrl-altCertTemplate';

const int NID_id_regCtrl_altCertTemplate = 1258;

const int OBJ_id_regCtrl_altCertTemplate = 1;

const String SN_id_regCtrl_algId = 'id-regCtrl-algId';

const int NID_id_regCtrl_algId = 1259;

const int OBJ_id_regCtrl_algId = 1;

const String SN_id_regCtrl_rsaKeyLen = 'id-regCtrl-rsaKeyLen';

const int NID_id_regCtrl_rsaKeyLen = 1260;

const int OBJ_id_regCtrl_rsaKeyLen = 1;

const String SN_id_regInfo_utf8Pairs = 'id-regInfo-utf8Pairs';

const int NID_id_regInfo_utf8Pairs = 321;

const int OBJ_id_regInfo_utf8Pairs = 1;

const String SN_id_regInfo_certReq = 'id-regInfo-certReq';

const int NID_id_regInfo_certReq = 322;

const int OBJ_id_regInfo_certReq = 1;

const String SN_id_alg_des40 = 'id-alg-des40';

const int NID_id_alg_des40 = 323;

const int OBJ_id_alg_des40 = 1;

const String SN_id_alg_noSignature = 'id-alg-noSignature';

const int NID_id_alg_noSignature = 324;

const int OBJ_id_alg_noSignature = 1;

const String SN_id_alg_dh_sig_hmac_sha1 = 'id-alg-dh-sig-hmac-sha1';

const int NID_id_alg_dh_sig_hmac_sha1 = 325;

const int OBJ_id_alg_dh_sig_hmac_sha1 = 1;

const String SN_id_alg_dh_pop = 'id-alg-dh-pop';

const int NID_id_alg_dh_pop = 326;

const int OBJ_id_alg_dh_pop = 1;

const String SN_id_cmc_statusInfo = 'id-cmc-statusInfo';

const int NID_id_cmc_statusInfo = 327;

const int OBJ_id_cmc_statusInfo = 1;

const String SN_id_cmc_identification = 'id-cmc-identification';

const int NID_id_cmc_identification = 328;

const int OBJ_id_cmc_identification = 1;

const String SN_id_cmc_identityProof = 'id-cmc-identityProof';

const int NID_id_cmc_identityProof = 329;

const int OBJ_id_cmc_identityProof = 1;

const String SN_id_cmc_dataReturn = 'id-cmc-dataReturn';

const int NID_id_cmc_dataReturn = 330;

const int OBJ_id_cmc_dataReturn = 1;

const String SN_id_cmc_transactionId = 'id-cmc-transactionId';

const int NID_id_cmc_transactionId = 331;

const int OBJ_id_cmc_transactionId = 1;

const String SN_id_cmc_senderNonce = 'id-cmc-senderNonce';

const int NID_id_cmc_senderNonce = 332;

const int OBJ_id_cmc_senderNonce = 1;

const String SN_id_cmc_recipientNonce = 'id-cmc-recipientNonce';

const int NID_id_cmc_recipientNonce = 333;

const int OBJ_id_cmc_recipientNonce = 1;

const String SN_id_cmc_addExtensions = 'id-cmc-addExtensions';

const int NID_id_cmc_addExtensions = 334;

const int OBJ_id_cmc_addExtensions = 1;

const String SN_id_cmc_encryptedPOP = 'id-cmc-encryptedPOP';

const int NID_id_cmc_encryptedPOP = 335;

const int OBJ_id_cmc_encryptedPOP = 1;

const String SN_id_cmc_decryptedPOP = 'id-cmc-decryptedPOP';

const int NID_id_cmc_decryptedPOP = 336;

const int OBJ_id_cmc_decryptedPOP = 1;

const String SN_id_cmc_lraPOPWitness = 'id-cmc-lraPOPWitness';

const int NID_id_cmc_lraPOPWitness = 337;

const int OBJ_id_cmc_lraPOPWitness = 1;

const String SN_id_cmc_getCert = 'id-cmc-getCert';

const int NID_id_cmc_getCert = 338;

const int OBJ_id_cmc_getCert = 1;

const String SN_id_cmc_getCRL = 'id-cmc-getCRL';

const int NID_id_cmc_getCRL = 339;

const int OBJ_id_cmc_getCRL = 1;

const String SN_id_cmc_revokeRequest = 'id-cmc-revokeRequest';

const int NID_id_cmc_revokeRequest = 340;

const int OBJ_id_cmc_revokeRequest = 1;

const String SN_id_cmc_regInfo = 'id-cmc-regInfo';

const int NID_id_cmc_regInfo = 341;

const int OBJ_id_cmc_regInfo = 1;

const String SN_id_cmc_responseInfo = 'id-cmc-responseInfo';

const int NID_id_cmc_responseInfo = 342;

const int OBJ_id_cmc_responseInfo = 1;

const String SN_id_cmc_queryPending = 'id-cmc-queryPending';

const int NID_id_cmc_queryPending = 343;

const int OBJ_id_cmc_queryPending = 1;

const String SN_id_cmc_popLinkRandom = 'id-cmc-popLinkRandom';

const int NID_id_cmc_popLinkRandom = 344;

const int OBJ_id_cmc_popLinkRandom = 1;

const String SN_id_cmc_popLinkWitness = 'id-cmc-popLinkWitness';

const int NID_id_cmc_popLinkWitness = 345;

const int OBJ_id_cmc_popLinkWitness = 1;

const String SN_id_cmc_confirmCertAcceptance = 'id-cmc-confirmCertAcceptance';

const int NID_id_cmc_confirmCertAcceptance = 346;

const int OBJ_id_cmc_confirmCertAcceptance = 1;

const String SN_id_on_personalData = 'id-on-personalData';

const int NID_id_on_personalData = 347;

const int OBJ_id_on_personalData = 1;

const String SN_id_on_permanentIdentifier = 'id-on-permanentIdentifier';

const String LN_id_on_permanentIdentifier = 'Permanent Identifier';

const int NID_id_on_permanentIdentifier = 858;

const int OBJ_id_on_permanentIdentifier = 1;

const String SN_id_on_hardwareModuleName = 'id-on-hardwareModuleName';

const String LN_id_on_hardwareModuleName = 'Hardware Module Name';

const int NID_id_on_hardwareModuleName = 1321;

const int OBJ_id_on_hardwareModuleName = 1;

const String SN_XmppAddr = 'id-on-xmppAddr';

const String LN_XmppAddr = 'XmppAddr';

const int NID_XmppAddr = 1209;

const int OBJ_XmppAddr = 1;

const String SN_SRVName = 'id-on-dnsSRV';

const String LN_SRVName = 'SRVName';

const int NID_SRVName = 1210;

const int OBJ_SRVName = 1;

const String SN_NAIRealm = 'id-on-NAIRealm';

const String LN_NAIRealm = 'NAIRealm';

const int NID_NAIRealm = 1211;

const int OBJ_NAIRealm = 1;

const String SN_id_on_SmtpUTF8Mailbox = 'id-on-SmtpUTF8Mailbox';

const String LN_id_on_SmtpUTF8Mailbox = 'Smtp UTF8 Mailbox';

const int NID_id_on_SmtpUTF8Mailbox = 1208;

const int OBJ_id_on_SmtpUTF8Mailbox = 1;

const String SN_id_pda_dateOfBirth = 'id-pda-dateOfBirth';

const int NID_id_pda_dateOfBirth = 348;

const int OBJ_id_pda_dateOfBirth = 1;

const String SN_id_pda_placeOfBirth = 'id-pda-placeOfBirth';

const int NID_id_pda_placeOfBirth = 349;

const int OBJ_id_pda_placeOfBirth = 1;

const String SN_id_pda_gender = 'id-pda-gender';

const int NID_id_pda_gender = 351;

const int OBJ_id_pda_gender = 1;

const String SN_id_pda_countryOfCitizenship = 'id-pda-countryOfCitizenship';

const int NID_id_pda_countryOfCitizenship = 352;

const int OBJ_id_pda_countryOfCitizenship = 1;

const String SN_id_pda_countryOfResidence = 'id-pda-countryOfResidence';

const int NID_id_pda_countryOfResidence = 353;

const int OBJ_id_pda_countryOfResidence = 1;

const String SN_id_aca_authenticationInfo = 'id-aca-authenticationInfo';

const int NID_id_aca_authenticationInfo = 354;

const int OBJ_id_aca_authenticationInfo = 1;

const String SN_id_aca_accessIdentity = 'id-aca-accessIdentity';

const int NID_id_aca_accessIdentity = 355;

const int OBJ_id_aca_accessIdentity = 1;

const String SN_id_aca_chargingIdentity = 'id-aca-chargingIdentity';

const int NID_id_aca_chargingIdentity = 356;

const int OBJ_id_aca_chargingIdentity = 1;

const String SN_id_aca_group = 'id-aca-group';

const int NID_id_aca_group = 357;

const int OBJ_id_aca_group = 1;

const String SN_id_aca_role = 'id-aca-role';

const int NID_id_aca_role = 358;

const int OBJ_id_aca_role = 1;

const String SN_id_aca_encAttrs = 'id-aca-encAttrs';

const int NID_id_aca_encAttrs = 399;

const int OBJ_id_aca_encAttrs = 1;

const String SN_id_qcs_pkixQCSyntax_v1 = 'id-qcs-pkixQCSyntax-v1';

const int NID_id_qcs_pkixQCSyntax_v1 = 359;

const int OBJ_id_qcs_pkixQCSyntax_v1 = 1;

const String SN_ipAddr_asNumber = 'ipAddr-asNumber';

const int NID_ipAddr_asNumber = 1241;

const int OBJ_ipAddr_asNumber = 1;

const String SN_ipAddr_asNumberv2 = 'ipAddr-asNumberv2';

const int NID_ipAddr_asNumberv2 = 1242;

const int OBJ_ipAddr_asNumberv2 = 1;

const String SN_id_cct_crs = 'id-cct-crs';

const int NID_id_cct_crs = 360;

const int OBJ_id_cct_crs = 1;

const String SN_id_cct_PKIData = 'id-cct-PKIData';

const int NID_id_cct_PKIData = 361;

const int OBJ_id_cct_PKIData = 1;

const String SN_id_cct_PKIResponse = 'id-cct-PKIResponse';

const int NID_id_cct_PKIResponse = 362;

const int OBJ_id_cct_PKIResponse = 1;

const String SN_id_ppl_anyLanguage = 'id-ppl-anyLanguage';

const String LN_id_ppl_anyLanguage = 'Any language';

const int NID_id_ppl_anyLanguage = 664;

const int OBJ_id_ppl_anyLanguage = 1;

const String SN_id_ppl_inheritAll = 'id-ppl-inheritAll';

const String LN_id_ppl_inheritAll = 'Inherit all';

const int NID_id_ppl_inheritAll = 665;

const int OBJ_id_ppl_inheritAll = 1;

const String SN_Independent = 'id-ppl-independent';

const String LN_Independent = 'Independent';

const int NID_Independent = 667;

const int OBJ_Independent = 1;

const String SN_ad_OCSP = 'OCSP';

const String LN_ad_OCSP = 'OCSP';

const int NID_ad_OCSP = 178;

const int OBJ_ad_OCSP = 1;

const String SN_ad_ca_issuers = 'caIssuers';

const String LN_ad_ca_issuers = 'CA Issuers';

const int NID_ad_ca_issuers = 179;

const int OBJ_ad_ca_issuers = 1;

const String SN_ad_timeStamping = 'ad_timestamping';

const String LN_ad_timeStamping = 'AD Time Stamping';

const int NID_ad_timeStamping = 363;

const int OBJ_ad_timeStamping = 1;

const String SN_ad_dvcs = 'AD_DVCS';

const String LN_ad_dvcs = 'ad dvcs';

const int NID_ad_dvcs = 364;

const int OBJ_ad_dvcs = 1;

const String SN_caRepository = 'caRepository';

const String LN_caRepository = 'CA Repository';

const int NID_caRepository = 785;

const int OBJ_caRepository = 1;

const String SN_rpkiManifest = 'rpkiManifest';

const String LN_rpkiManifest = 'RPKI Manifest';

const int NID_rpkiManifest = 1243;

const int OBJ_rpkiManifest = 1;

const String SN_signedObject = 'signedObject';

const String LN_signedObject = 'Signed Object';

const int NID_signedObject = 1244;

const int OBJ_signedObject = 1;

const String SN_rpkiNotify = 'rpkiNotify';

const String LN_rpkiNotify = 'RPKI Notify';

const int NID_rpkiNotify = 1245;

const int OBJ_rpkiNotify = 1;

const int OBJ_id_pkix_OCSP = 1;

const String SN_id_pkix_OCSP_basic = 'basicOCSPResponse';

const String LN_id_pkix_OCSP_basic = 'Basic OCSP Response';

const int NID_id_pkix_OCSP_basic = 365;

const int OBJ_id_pkix_OCSP_basic = 1;

const String SN_id_pkix_OCSP_Nonce = 'Nonce';

const String LN_id_pkix_OCSP_Nonce = 'OCSP Nonce';

const int NID_id_pkix_OCSP_Nonce = 366;

const int OBJ_id_pkix_OCSP_Nonce = 1;

const String SN_id_pkix_OCSP_CrlID = 'CrlID';

const String LN_id_pkix_OCSP_CrlID = 'OCSP CRL ID';

const int NID_id_pkix_OCSP_CrlID = 367;

const int OBJ_id_pkix_OCSP_CrlID = 1;

const String SN_id_pkix_OCSP_acceptableResponses = 'acceptableResponses';

const String LN_id_pkix_OCSP_acceptableResponses = 'Acceptable OCSP Responses';

const int NID_id_pkix_OCSP_acceptableResponses = 368;

const int OBJ_id_pkix_OCSP_acceptableResponses = 1;

const String SN_id_pkix_OCSP_noCheck = 'noCheck';

const String LN_id_pkix_OCSP_noCheck = 'OCSP No Check';

const int NID_id_pkix_OCSP_noCheck = 369;

const int OBJ_id_pkix_OCSP_noCheck = 1;

const String SN_id_pkix_OCSP_archiveCutoff = 'archiveCutoff';

const String LN_id_pkix_OCSP_archiveCutoff = 'OCSP Archive Cutoff';

const int NID_id_pkix_OCSP_archiveCutoff = 370;

const int OBJ_id_pkix_OCSP_archiveCutoff = 1;

const String SN_id_pkix_OCSP_serviceLocator = 'serviceLocator';

const String LN_id_pkix_OCSP_serviceLocator = 'OCSP Service Locator';

const int NID_id_pkix_OCSP_serviceLocator = 371;

const int OBJ_id_pkix_OCSP_serviceLocator = 1;

const String SN_id_pkix_OCSP_extendedStatus = 'extendedStatus';

const String LN_id_pkix_OCSP_extendedStatus = 'Extended OCSP Status';

const int NID_id_pkix_OCSP_extendedStatus = 372;

const int OBJ_id_pkix_OCSP_extendedStatus = 1;

const String SN_id_pkix_OCSP_valid = 'valid';

const int NID_id_pkix_OCSP_valid = 373;

const int OBJ_id_pkix_OCSP_valid = 1;

const String SN_id_pkix_OCSP_path = 'path';

const int NID_id_pkix_OCSP_path = 374;

const int OBJ_id_pkix_OCSP_path = 1;

const String SN_id_pkix_OCSP_trustRoot = 'trustRoot';

const String LN_id_pkix_OCSP_trustRoot = 'Trust Root';

const int NID_id_pkix_OCSP_trustRoot = 375;

const int OBJ_id_pkix_OCSP_trustRoot = 1;

const String SN_algorithm = 'algorithm';

const String LN_algorithm = 'algorithm';

const int NID_algorithm = 376;

const int OBJ_algorithm = 1;

const String SN_md5WithRSA = 'RSA-NP-MD5';

const String LN_md5WithRSA = 'md5WithRSA';

const int NID_md5WithRSA = 104;

const int OBJ_md5WithRSA = 1;

const String SN_des_ecb = 'DES-ECB';

const String LN_des_ecb = 'des-ecb';

const int NID_des_ecb = 29;

const int OBJ_des_ecb = 1;

const String SN_des_cbc = 'DES-CBC';

const String LN_des_cbc = 'des-cbc';

const int NID_des_cbc = 31;

const int OBJ_des_cbc = 1;

const String SN_des_ofb64 = 'DES-OFB';

const String LN_des_ofb64 = 'des-ofb';

const int NID_des_ofb64 = 45;

const int OBJ_des_ofb64 = 1;

const String SN_des_cfb64 = 'DES-CFB';

const String LN_des_cfb64 = 'des-cfb';

const int NID_des_cfb64 = 30;

const int OBJ_des_cfb64 = 1;

const String SN_rsaSignature = 'rsaSignature';

const int NID_rsaSignature = 377;

const int OBJ_rsaSignature = 1;

const String SN_dsa_2 = 'DSA-old';

const String LN_dsa_2 = 'dsaEncryption-old';

const int NID_dsa_2 = 67;

const int OBJ_dsa_2 = 1;

const String SN_dsaWithSHA = 'DSA-SHA';

const String LN_dsaWithSHA = 'dsaWithSHA';

const int NID_dsaWithSHA = 66;

const int OBJ_dsaWithSHA = 1;

const String SN_shaWithRSAEncryption = 'RSA-SHA';

const String LN_shaWithRSAEncryption = 'shaWithRSAEncryption';

const int NID_shaWithRSAEncryption = 42;

const int OBJ_shaWithRSAEncryption = 1;

const String SN_des_ede_ecb = 'DES-EDE';

const String LN_des_ede_ecb = 'des-ede';

const int NID_des_ede_ecb = 32;

const int OBJ_des_ede_ecb = 1;

const String SN_des_ede3_ecb = 'DES-EDE3';

const String LN_des_ede3_ecb = 'des-ede3';

const int NID_des_ede3_ecb = 33;

const String SN_des_ede_cbc = 'DES-EDE-CBC';

const String LN_des_ede_cbc = 'des-ede-cbc';

const int NID_des_ede_cbc = 43;

const String SN_des_ede_cfb64 = 'DES-EDE-CFB';

const String LN_des_ede_cfb64 = 'des-ede-cfb';

const int NID_des_ede_cfb64 = 60;

const String SN_des_ede3_cfb64 = 'DES-EDE3-CFB';

const String LN_des_ede3_cfb64 = 'des-ede3-cfb';

const int NID_des_ede3_cfb64 = 61;

const String SN_des_ede_ofb64 = 'DES-EDE-OFB';

const String LN_des_ede_ofb64 = 'des-ede-ofb';

const int NID_des_ede_ofb64 = 62;

const String SN_des_ede3_ofb64 = 'DES-EDE3-OFB';

const String LN_des_ede3_ofb64 = 'des-ede3-ofb';

const int NID_des_ede3_ofb64 = 63;

const String SN_desx_cbc = 'DESX-CBC';

const String LN_desx_cbc = 'desx-cbc';

const int NID_desx_cbc = 80;

const String SN_sha = 'SHA';

const String LN_sha = 'sha';

const int NID_sha = 41;

const int OBJ_sha = 1;

const String SN_sha1 = 'SHA1';

const String LN_sha1 = 'sha1';

const int NID_sha1 = 64;

const int OBJ_sha1 = 1;

const String SN_dsaWithSHA1_2 = 'DSA-SHA1-old';

const String LN_dsaWithSHA1_2 = 'dsaWithSHA1-old';

const int NID_dsaWithSHA1_2 = 70;

const int OBJ_dsaWithSHA1_2 = 1;

const String SN_sha1WithRSA = 'RSA-SHA1-2';

const String LN_sha1WithRSA = 'sha1WithRSA';

const int NID_sha1WithRSA = 115;

const int OBJ_sha1WithRSA = 1;

const String SN_ripemd160 = 'RIPEMD160';

const String LN_ripemd160 = 'ripemd160';

const int NID_ripemd160 = 117;

const int OBJ_ripemd160 = 1;

const String SN_ripemd160WithRSA = 'RSA-RIPEMD160';

const String LN_ripemd160WithRSA = 'ripemd160WithRSA';

const int NID_ripemd160WithRSA = 119;

const int OBJ_ripemd160WithRSA = 1;

const String SN_blake2bmac = 'BLAKE2BMAC';

const String LN_blake2bmac = 'blake2bmac';

const int NID_blake2bmac = 1201;

const int OBJ_blake2bmac = 1;

const String SN_blake2smac = 'BLAKE2SMAC';

const String LN_blake2smac = 'blake2smac';

const int NID_blake2smac = 1202;

const int OBJ_blake2smac = 1;

const String SN_blake2b512 = 'BLAKE2b512';

const String LN_blake2b512 = 'blake2b512';

const int NID_blake2b512 = 1056;

const int OBJ_blake2b512 = 1;

const String SN_blake2s256 = 'BLAKE2s256';

const String LN_blake2s256 = 'blake2s256';

const int NID_blake2s256 = 1057;

const int OBJ_blake2s256 = 1;

const String SN_sxnet = 'SXNetID';

const String LN_sxnet = 'Strong Extranet ID';

const int NID_sxnet = 143;

const int OBJ_sxnet = 1;

const String SN_X500 = 'X500';

const String LN_X500 = 'directory services (X.500)';

const int NID_X500 = 11;

const int OBJ_X500 = 2;

const String SN_X509 = 'X509';

const int NID_X509 = 12;

const int OBJ_X509 = 2;

const String SN_commonName = 'CN';

const String LN_commonName = 'commonName';

const int NID_commonName = 13;

const int OBJ_commonName = 2;

const String SN_surname = 'SN';

const String LN_surname = 'surname';

const int NID_surname = 100;

const int OBJ_surname = 2;

const String LN_serialNumber = 'serialNumber';

const int NID_serialNumber = 105;

const int OBJ_serialNumber = 2;

const String SN_countryName = 'C';

const String LN_countryName = 'countryName';

const int NID_countryName = 14;

const int OBJ_countryName = 2;

const String SN_localityName = 'L';

const String LN_localityName = 'localityName';

const int NID_localityName = 15;

const int OBJ_localityName = 2;

const String SN_stateOrProvinceName = 'ST';

const String LN_stateOrProvinceName = 'stateOrProvinceName';

const int NID_stateOrProvinceName = 16;

const int OBJ_stateOrProvinceName = 2;

const String SN_streetAddress = 'street';

const String LN_streetAddress = 'streetAddress';

const int NID_streetAddress = 660;

const int OBJ_streetAddress = 2;

const String SN_organizationName = 'O';

const String LN_organizationName = 'organizationName';

const int NID_organizationName = 17;

const int OBJ_organizationName = 2;

const String SN_organizationalUnitName = 'OU';

const String LN_organizationalUnitName = 'organizationalUnitName';

const int NID_organizationalUnitName = 18;

const int OBJ_organizationalUnitName = 2;

const String SN_title = 'title';

const String LN_title = 'title';

const int NID_title = 106;

const int OBJ_title = 2;

const String LN_description = 'description';

const int NID_description = 107;

const int OBJ_description = 2;

const String LN_searchGuide = 'searchGuide';

const int NID_searchGuide = 859;

const int OBJ_searchGuide = 2;

const String LN_businessCategory = 'businessCategory';

const int NID_businessCategory = 860;

const int OBJ_businessCategory = 2;

const String LN_postalAddress = 'postalAddress';

const int NID_postalAddress = 861;

const int OBJ_postalAddress = 2;

const String LN_postalCode = 'postalCode';

const int NID_postalCode = 661;

const int OBJ_postalCode = 2;

const String LN_postOfficeBox = 'postOfficeBox';

const int NID_postOfficeBox = 862;

const int OBJ_postOfficeBox = 2;

const String LN_physicalDeliveryOfficeName = 'physicalDeliveryOfficeName';

const int NID_physicalDeliveryOfficeName = 863;

const int OBJ_physicalDeliveryOfficeName = 2;

const String LN_telephoneNumber = 'telephoneNumber';

const int NID_telephoneNumber = 864;

const int OBJ_telephoneNumber = 2;

const String LN_telexNumber = 'telexNumber';

const int NID_telexNumber = 865;

const int OBJ_telexNumber = 2;

const String LN_teletexTerminalIdentifier = 'teletexTerminalIdentifier';

const int NID_teletexTerminalIdentifier = 866;

const int OBJ_teletexTerminalIdentifier = 2;

const String LN_facsimileTelephoneNumber = 'facsimileTelephoneNumber';

const int NID_facsimileTelephoneNumber = 867;

const int OBJ_facsimileTelephoneNumber = 2;

const String LN_x121Address = 'x121Address';

const int NID_x121Address = 868;

const int OBJ_x121Address = 2;

const String LN_internationaliSDNNumber = 'internationaliSDNNumber';

const int NID_internationaliSDNNumber = 869;

const int OBJ_internationaliSDNNumber = 2;

const String LN_registeredAddress = 'registeredAddress';

const int NID_registeredAddress = 870;

const int OBJ_registeredAddress = 2;

const String LN_destinationIndicator = 'destinationIndicator';

const int NID_destinationIndicator = 871;

const int OBJ_destinationIndicator = 2;

const String LN_preferredDeliveryMethod = 'preferredDeliveryMethod';

const int NID_preferredDeliveryMethod = 872;

const int OBJ_preferredDeliveryMethod = 2;

const String LN_presentationAddress = 'presentationAddress';

const int NID_presentationAddress = 873;

const int OBJ_presentationAddress = 2;

const String LN_supportedApplicationContext = 'supportedApplicationContext';

const int NID_supportedApplicationContext = 874;

const int OBJ_supportedApplicationContext = 2;

const String SN_member = 'member';

const int NID_member = 875;

const int OBJ_member = 2;

const String SN_owner = 'owner';

const int NID_owner = 876;

const int OBJ_owner = 2;

const String LN_roleOccupant = 'roleOccupant';

const int NID_roleOccupant = 877;

const int OBJ_roleOccupant = 2;

const String SN_seeAlso = 'seeAlso';

const int NID_seeAlso = 878;

const int OBJ_seeAlso = 2;

const String LN_userPassword = 'userPassword';

const int NID_userPassword = 879;

const int OBJ_userPassword = 2;

const String LN_userCertificate = 'userCertificate';

const int NID_userCertificate = 880;

const int OBJ_userCertificate = 2;

const String LN_cACertificate = 'cACertificate';

const int NID_cACertificate = 881;

const int OBJ_cACertificate = 2;

const String LN_authorityRevocationList = 'authorityRevocationList';

const int NID_authorityRevocationList = 882;

const int OBJ_authorityRevocationList = 2;

const String LN_certificateRevocationList = 'certificateRevocationList';

const int NID_certificateRevocationList = 883;

const int OBJ_certificateRevocationList = 2;

const String LN_crossCertificatePair = 'crossCertificatePair';

const int NID_crossCertificatePair = 884;

const int OBJ_crossCertificatePair = 2;

const String SN_name = 'name';

const String LN_name = 'name';

const int NID_name = 173;

const int OBJ_name = 2;

const String SN_givenName = 'GN';

const String LN_givenName = 'givenName';

const int NID_givenName = 99;

const int OBJ_givenName = 2;

const String SN_initials = 'initials';

const String LN_initials = 'initials';

const int NID_initials = 101;

const int OBJ_initials = 2;

const String LN_generationQualifier = 'generationQualifier';

const int NID_generationQualifier = 509;

const int OBJ_generationQualifier = 2;

const String LN_x500UniqueIdentifier = 'x500UniqueIdentifier';

const int NID_x500UniqueIdentifier = 503;

const int OBJ_x500UniqueIdentifier = 2;

const String SN_dnQualifier = 'dnQualifier';

const String LN_dnQualifier = 'dnQualifier';

const int NID_dnQualifier = 174;

const int OBJ_dnQualifier = 2;

const String LN_enhancedSearchGuide = 'enhancedSearchGuide';

const int NID_enhancedSearchGuide = 885;

const int OBJ_enhancedSearchGuide = 2;

const String LN_protocolInformation = 'protocolInformation';

const int NID_protocolInformation = 886;

const int OBJ_protocolInformation = 2;

const String LN_distinguishedName = 'distinguishedName';

const int NID_distinguishedName = 887;

const int OBJ_distinguishedName = 2;

const String LN_uniqueMember = 'uniqueMember';

const int NID_uniqueMember = 888;

const int OBJ_uniqueMember = 2;

const String LN_houseIdentifier = 'houseIdentifier';

const int NID_houseIdentifier = 889;

const int OBJ_houseIdentifier = 2;

const String LN_supportedAlgorithms = 'supportedAlgorithms';

const int NID_supportedAlgorithms = 890;

const int OBJ_supportedAlgorithms = 2;

const String LN_deltaRevocationList = 'deltaRevocationList';

const int NID_deltaRevocationList = 891;

const int OBJ_deltaRevocationList = 2;

const String SN_dmdName = 'dmdName';

const int NID_dmdName = 892;

const int OBJ_dmdName = 2;

const String LN_pseudonym = 'pseudonym';

const int NID_pseudonym = 510;

const int OBJ_pseudonym = 2;

const String SN_role = 'role';

const String LN_role = 'role';

const int NID_role = 400;

const int OBJ_role = 2;

const String LN_organizationIdentifier = 'organizationIdentifier';

const int NID_organizationIdentifier = 1089;

const int OBJ_organizationIdentifier = 2;

const String SN_countryCode3c = 'c3';

const String LN_countryCode3c = 'countryCode3c';

const int NID_countryCode3c = 1090;

const int OBJ_countryCode3c = 2;

const String SN_countryCode3n = 'n3';

const String LN_countryCode3n = 'countryCode3n';

const int NID_countryCode3n = 1091;

const int OBJ_countryCode3n = 2;

const String LN_dnsName = 'dnsName';

const int NID_dnsName = 1092;

const int OBJ_dnsName = 2;

const String SN_X500algorithms = 'X500algorithms';

const String LN_X500algorithms = 'directory services - algorithms';

const int NID_X500algorithms = 378;

const int OBJ_X500algorithms = 2;

const String SN_rsa = 'RSA';

const String LN_rsa = 'rsa';

const int NID_rsa = 19;

const int OBJ_rsa = 2;

const String SN_mdc2WithRSA = 'RSA-MDC2';

const String LN_mdc2WithRSA = 'mdc2WithRSA';

const int NID_mdc2WithRSA = 96;

const int OBJ_mdc2WithRSA = 2;

const String SN_mdc2 = 'MDC2';

const String LN_mdc2 = 'mdc2';

const int NID_mdc2 = 95;

const int OBJ_mdc2 = 2;

const String SN_id_ce = 'id-ce';

const int NID_id_ce = 81;

const int OBJ_id_ce = 2;

const String SN_subject_directory_attributes = 'subjectDirectoryAttributes';

const String LN_subject_directory_attributes =
    'X509v3 Subject Directory Attributes';

const int NID_subject_directory_attributes = 769;

const int OBJ_subject_directory_attributes = 2;

const String SN_subject_key_identifier = 'subjectKeyIdentifier';

const String LN_subject_key_identifier = 'X509v3 Subject Key Identifier';

const int NID_subject_key_identifier = 82;

const int OBJ_subject_key_identifier = 2;

const String SN_key_usage = 'keyUsage';

const String LN_key_usage = 'X509v3 Key Usage';

const int NID_key_usage = 83;

const int OBJ_key_usage = 2;

const String SN_private_key_usage_period = 'privateKeyUsagePeriod';

const String LN_private_key_usage_period = 'X509v3 Private Key Usage Period';

const int NID_private_key_usage_period = 84;

const int OBJ_private_key_usage_period = 2;

const String SN_subject_alt_name = 'subjectAltName';

const String LN_subject_alt_name = 'X509v3 Subject Alternative Name';

const int NID_subject_alt_name = 85;

const int OBJ_subject_alt_name = 2;

const String SN_issuer_alt_name = 'issuerAltName';

const String LN_issuer_alt_name = 'X509v3 Issuer Alternative Name';

const int NID_issuer_alt_name = 86;

const int OBJ_issuer_alt_name = 2;

const String SN_basic_constraints = 'basicConstraints';

const String LN_basic_constraints = 'X509v3 Basic Constraints';

const int NID_basic_constraints = 87;

const int OBJ_basic_constraints = 2;

const String SN_crl_number = 'crlNumber';

const String LN_crl_number = 'X509v3 CRL Number';

const int NID_crl_number = 88;

const int OBJ_crl_number = 2;

const String SN_crl_reason = 'CRLReason';

const String LN_crl_reason = 'X509v3 CRL Reason Code';

const int NID_crl_reason = 141;

const int OBJ_crl_reason = 2;

const String SN_invalidity_date = 'invalidityDate';

const String LN_invalidity_date = 'Invalidity Date';

const int NID_invalidity_date = 142;

const int OBJ_invalidity_date = 2;

const String SN_delta_crl = 'deltaCRL';

const String LN_delta_crl = 'X509v3 Delta CRL Indicator';

const int NID_delta_crl = 140;

const int OBJ_delta_crl = 2;

const String SN_issuing_distribution_point = 'issuingDistributionPoint';

const String LN_issuing_distribution_point =
    'X509v3 Issuing Distribution Point';

const int NID_issuing_distribution_point = 770;

const int OBJ_issuing_distribution_point = 2;

const String SN_certificate_issuer = 'certificateIssuer';

const String LN_certificate_issuer = 'X509v3 Certificate Issuer';

const int NID_certificate_issuer = 771;

const int OBJ_certificate_issuer = 2;

const String SN_name_constraints = 'nameConstraints';

const String LN_name_constraints = 'X509v3 Name Constraints';

const int NID_name_constraints = 666;

const int OBJ_name_constraints = 2;

const String SN_crl_distribution_points = 'crlDistributionPoints';

const String LN_crl_distribution_points = 'X509v3 CRL Distribution Points';

const int NID_crl_distribution_points = 103;

const int OBJ_crl_distribution_points = 2;

const String SN_certificate_policies = 'certificatePolicies';

const String LN_certificate_policies = 'X509v3 Certificate Policies';

const int NID_certificate_policies = 89;

const int OBJ_certificate_policies = 2;

const String SN_any_policy = 'anyPolicy';

const String LN_any_policy = 'X509v3 Any Policy';

const int NID_any_policy = 746;

const int OBJ_any_policy = 2;

const String SN_policy_mappings = 'policyMappings';

const String LN_policy_mappings = 'X509v3 Policy Mappings';

const int NID_policy_mappings = 747;

const int OBJ_policy_mappings = 2;

const String SN_authority_key_identifier = 'authorityKeyIdentifier';

const String LN_authority_key_identifier = 'X509v3 Authority Key Identifier';

const int NID_authority_key_identifier = 90;

const int OBJ_authority_key_identifier = 2;

const String SN_policy_constraints = 'policyConstraints';

const String LN_policy_constraints = 'X509v3 Policy Constraints';

const int NID_policy_constraints = 401;

const int OBJ_policy_constraints = 2;

const String SN_ext_key_usage = 'extendedKeyUsage';

const String LN_ext_key_usage = 'X509v3 Extended Key Usage';

const int NID_ext_key_usage = 126;

const int OBJ_ext_key_usage = 2;

const String SN_authority_attribute_identifier = 'authorityAttributeIdentifier';

const String LN_authority_attribute_identifier =
    'X509v3 Authority Attribute Identifier';

const int NID_authority_attribute_identifier = 1295;

const int OBJ_authority_attribute_identifier = 2;

const String SN_role_spec_cert_identifier = 'roleSpecCertIdentifier';

const String LN_role_spec_cert_identifier =
    'X509v3 Role Specification Certificate Identifier';

const int NID_role_spec_cert_identifier = 1296;

const int OBJ_role_spec_cert_identifier = 2;

const String SN_basic_att_constraints = 'basicAttConstraints';

const String LN_basic_att_constraints =
    'X509v3 Basic Attribute Certificate Constraints';

const int NID_basic_att_constraints = 1297;

const int OBJ_basic_att_constraints = 2;

const String SN_delegated_name_constraints = 'delegatedNameConstraints';

const String LN_delegated_name_constraints =
    'X509v3 Delegated Name Constraints';

const int NID_delegated_name_constraints = 1298;

const int OBJ_delegated_name_constraints = 2;

const String SN_time_specification = 'timeSpecification';

const String LN_time_specification = 'X509v3 Time Specification';

const int NID_time_specification = 1299;

const int OBJ_time_specification = 2;

const String SN_freshest_crl = 'freshestCRL';

const String LN_freshest_crl = 'X509v3 Freshest CRL';

const int NID_freshest_crl = 857;

const int OBJ_freshest_crl = 2;

const String SN_attribute_descriptor = 'attributeDescriptor';

const String LN_attribute_descriptor = 'X509v3 Attribute Descriptor';

const int NID_attribute_descriptor = 1300;

const int OBJ_attribute_descriptor = 2;

const String SN_user_notice = 'userNotice';

const String LN_user_notice = 'X509v3 User Notice';

const int NID_user_notice = 1301;

const int OBJ_user_notice = 2;

const String SN_soa_identifier = 'sOAIdentifier';

const String LN_soa_identifier = 'X509v3 Source of Authority Identifier';

const int NID_soa_identifier = 1302;

const int OBJ_soa_identifier = 2;

const String SN_acceptable_cert_policies = 'acceptableCertPolicies';

const String LN_acceptable_cert_policies =
    'X509v3 Acceptable Certification Policies';

const int NID_acceptable_cert_policies = 1303;

const int OBJ_acceptable_cert_policies = 2;

const String SN_inhibit_any_policy = 'inhibitAnyPolicy';

const String LN_inhibit_any_policy = 'X509v3 Inhibit Any Policy';

const int NID_inhibit_any_policy = 748;

const int OBJ_inhibit_any_policy = 2;

const String SN_target_information = 'targetInformation';

const String LN_target_information = 'X509v3 AC Targeting';

const int NID_target_information = 402;

const int OBJ_target_information = 2;

const String SN_no_rev_avail = 'noRevAvail';

const String LN_no_rev_avail = 'X509v3 No Revocation Available';

const int NID_no_rev_avail = 403;

const int OBJ_no_rev_avail = 2;

const String SN_acceptable_privilege_policies = 'acceptablePrivPolicies';

const String LN_acceptable_privilege_policies =
    'X509v3 Acceptable Privilege Policies';

const int NID_acceptable_privilege_policies = 1304;

const int OBJ_acceptable_privilege_policies = 2;

const String SN_indirect_issuer = 'indirectIssuer';

const String LN_indirect_issuer = 'X509v3 Indirect Issuer';

const int NID_indirect_issuer = 1305;

const int OBJ_indirect_issuer = 2;

const String SN_no_assertion = 'noAssertion';

const String LN_no_assertion = 'X509v3 No Assertion';

const int NID_no_assertion = 1306;

const int OBJ_no_assertion = 2;

const String SN_id_aa_issuing_distribution_point = 'aAissuingDistributionPoint';

const String LN_id_aa_issuing_distribution_point =
    'X509v3 Attribute Authority Issuing Distribution Point';

const int NID_id_aa_issuing_distribution_point = 1307;

const int OBJ_id_aa_issuing_distribution_point = 2;

const String SN_issued_on_behalf_of = 'issuedOnBehalfOf';

const String LN_issued_on_behalf_of = 'X509v3 Issued On Behalf Of';

const int NID_issued_on_behalf_of = 1308;

const int OBJ_issued_on_behalf_of = 2;

const String SN_single_use = 'singleUse';

const String LN_single_use = 'X509v3 Single Use';

const int NID_single_use = 1309;

const int OBJ_single_use = 2;

const String SN_group_ac = 'groupAC';

const String LN_group_ac = 'X509v3 Group Attribute Certificate';

const int NID_group_ac = 1310;

const int OBJ_group_ac = 2;

const String SN_allowed_attribute_assignments = 'allowedAttributeAssignments';

const String LN_allowed_attribute_assignments =
    'X509v3 Allowed Attribute Assignments';

const int NID_allowed_attribute_assignments = 1311;

const int OBJ_allowed_attribute_assignments = 2;

const String SN_attribute_mappings = 'attributeMappings';

const String LN_attribute_mappings = 'X509v3 Attribute Mappings';

const int NID_attribute_mappings = 1312;

const int OBJ_attribute_mappings = 2;

const String SN_holder_name_constraints = 'holderNameConstraints';

const String LN_holder_name_constraints = 'X509v3 Holder Name Constraints';

const int NID_holder_name_constraints = 1313;

const int OBJ_holder_name_constraints = 2;

const String SN_authorization_validation = 'authorizationValidation';

const String LN_authorization_validation = 'X509v3 Authorization Validation';

const int NID_authorization_validation = 1314;

const int OBJ_authorization_validation = 2;

const String SN_prot_restrict = 'protRestrict';

const String LN_prot_restrict = 'X509v3 Protocol Restriction';

const int NID_prot_restrict = 1315;

const int OBJ_prot_restrict = 2;

const String SN_subject_alt_public_key_info = 'subjectAltPublicKeyInfo';

const String LN_subject_alt_public_key_info =
    'X509v3 Subject Alternative Public Key Info';

const int NID_subject_alt_public_key_info = 1316;

const int OBJ_subject_alt_public_key_info = 2;

const String SN_alt_signature_algorithm = 'altSignatureAlgorithm';

const String LN_alt_signature_algorithm =
    'X509v3 Alternative Signature Algorithm';

const int NID_alt_signature_algorithm = 1317;

const int OBJ_alt_signature_algorithm = 2;

const String SN_alt_signature_value = 'altSignatureValue';

const String LN_alt_signature_value = 'X509v3 Alternative Signature Value';

const int NID_alt_signature_value = 1318;

const int OBJ_alt_signature_value = 2;

const String SN_associated_information = 'associatedInformation';

const String LN_associated_information = 'X509v3 Associated Information';

const int NID_associated_information = 1319;

const int OBJ_associated_information = 2;

const String SN_anyExtendedKeyUsage = 'anyExtendedKeyUsage';

const String LN_anyExtendedKeyUsage = 'Any Extended Key Usage';

const int NID_anyExtendedKeyUsage = 910;

const int OBJ_anyExtendedKeyUsage = 2;

const String SN_netscape = 'Netscape';

const String LN_netscape = 'Netscape Communications Corp.';

const int NID_netscape = 57;

const int OBJ_netscape = 2;

const String SN_netscape_cert_extension = 'nsCertExt';

const String LN_netscape_cert_extension = 'Netscape Certificate Extension';

const int NID_netscape_cert_extension = 58;

const int OBJ_netscape_cert_extension = 2;

const String SN_netscape_data_type = 'nsDataType';

const String LN_netscape_data_type = 'Netscape Data Type';

const int NID_netscape_data_type = 59;

const int OBJ_netscape_data_type = 2;

const String SN_netscape_cert_type = 'nsCertType';

const String LN_netscape_cert_type = 'Netscape Cert Type';

const int NID_netscape_cert_type = 71;

const int OBJ_netscape_cert_type = 2;

const String SN_netscape_base_url = 'nsBaseUrl';

const String LN_netscape_base_url = 'Netscape Base Url';

const int NID_netscape_base_url = 72;

const int OBJ_netscape_base_url = 2;

const String SN_netscape_revocation_url = 'nsRevocationUrl';

const String LN_netscape_revocation_url = 'Netscape Revocation Url';

const int NID_netscape_revocation_url = 73;

const int OBJ_netscape_revocation_url = 2;

const String SN_netscape_ca_revocation_url = 'nsCaRevocationUrl';

const String LN_netscape_ca_revocation_url = 'Netscape CA Revocation Url';

const int NID_netscape_ca_revocation_url = 74;

const int OBJ_netscape_ca_revocation_url = 2;

const String SN_netscape_renewal_url = 'nsRenewalUrl';

const String LN_netscape_renewal_url = 'Netscape Renewal Url';

const int NID_netscape_renewal_url = 75;

const int OBJ_netscape_renewal_url = 2;

const String SN_netscape_ca_policy_url = 'nsCaPolicyUrl';

const String LN_netscape_ca_policy_url = 'Netscape CA Policy Url';

const int NID_netscape_ca_policy_url = 76;

const int OBJ_netscape_ca_policy_url = 2;

const String SN_netscape_ssl_server_name = 'nsSslServerName';

const String LN_netscape_ssl_server_name = 'Netscape SSL Server Name';

const int NID_netscape_ssl_server_name = 77;

const int OBJ_netscape_ssl_server_name = 2;

const String SN_netscape_comment = 'nsComment';

const String LN_netscape_comment = 'Netscape Comment';

const int NID_netscape_comment = 78;

const int OBJ_netscape_comment = 2;

const String SN_netscape_cert_sequence = 'nsCertSequence';

const String LN_netscape_cert_sequence = 'Netscape Certificate Sequence';

const int NID_netscape_cert_sequence = 79;

const int OBJ_netscape_cert_sequence = 2;

const String SN_ns_sgc = 'nsSGC';

const String LN_ns_sgc = 'Netscape Server Gated Crypto';

const int NID_ns_sgc = 139;

const int OBJ_ns_sgc = 2;

const String SN_org = 'ORG';

const String LN_org = 'org';

const int NID_org = 379;

const int OBJ_org = 1;

const String SN_dod = 'DOD';

const String LN_dod = 'dod';

const int NID_dod = 380;

const int OBJ_dod = 1;

const String SN_iana = 'IANA';

const String LN_iana = 'iana';

const int NID_iana = 381;

const int OBJ_iana = 1;

const int OBJ_internet = 1;

const String SN_Directory = 'directory';

const String LN_Directory = 'Directory';

const int NID_Directory = 382;

const int OBJ_Directory = 1;

const String SN_Management = 'mgmt';

const String LN_Management = 'Management';

const int NID_Management = 383;

const int OBJ_Management = 1;

const String SN_Experimental = 'experimental';

const String LN_Experimental = 'Experimental';

const int NID_Experimental = 384;

const int OBJ_Experimental = 1;

const String SN_Private = 'private';

const String LN_Private = 'Private';

const int NID_Private = 385;

const int OBJ_Private = 1;

const String SN_Security = 'security';

const String LN_Security = 'Security';

const int NID_Security = 386;

const int OBJ_Security = 1;

const String SN_SNMPv2 = 'snmpv2';

const String LN_SNMPv2 = 'SNMPv2';

const int NID_SNMPv2 = 387;

const int OBJ_SNMPv2 = 1;

const String LN_Mail = 'Mail';

const int NID_Mail = 388;

const int OBJ_Mail = 1;

const String SN_Enterprises = 'enterprises';

const String LN_Enterprises = 'Enterprises';

const int NID_Enterprises = 389;

const int OBJ_Enterprises = 1;

const String SN_dcObject = 'dcobject';

const String LN_dcObject = 'dcObject';

const int NID_dcObject = 390;

const int OBJ_dcObject = 1;

const String SN_id_kp_wisun_fan_device = 'id-kp-wisun-fan-device';

const String LN_id_kp_wisun_fan_device =
    'Wi-SUN Alliance Field Area Network (FAN)';

const int NID_id_kp_wisun_fan_device = 1322;

const int OBJ_id_kp_wisun_fan_device = 1;

const String SN_mime_mhs = 'mime-mhs';

const String LN_mime_mhs = 'MIME MHS';

const int NID_mime_mhs = 504;

const int OBJ_mime_mhs = 1;

const String SN_mime_mhs_headings = 'mime-mhs-headings';

const String LN_mime_mhs_headings = 'mime-mhs-headings';

const int NID_mime_mhs_headings = 505;

const int OBJ_mime_mhs_headings = 1;

const String SN_mime_mhs_bodies = 'mime-mhs-bodies';

const String LN_mime_mhs_bodies = 'mime-mhs-bodies';

const int NID_mime_mhs_bodies = 506;

const int OBJ_mime_mhs_bodies = 1;

const String SN_id_hex_partial_message = 'id-hex-partial-message';

const String LN_id_hex_partial_message = 'id-hex-partial-message';

const int NID_id_hex_partial_message = 507;

const int OBJ_id_hex_partial_message = 1;

const String SN_id_hex_multipart_message = 'id-hex-multipart-message';

const String LN_id_hex_multipart_message = 'id-hex-multipart-message';

const int NID_id_hex_multipart_message = 508;

const int OBJ_id_hex_multipart_message = 1;

const String SN_zlib_compression = 'ZLIB';

const String LN_zlib_compression = 'zlib compression';

const int NID_zlib_compression = 125;

const int OBJ_zlib_compression = 1;

const int OBJ_csor = 2;

const int OBJ_nistAlgorithms = 2;

const int OBJ_aes = 2;

const String SN_aes_128_ecb = 'AES-128-ECB';

const String LN_aes_128_ecb = 'aes-128-ecb';

const int NID_aes_128_ecb = 418;

const int OBJ_aes_128_ecb = 2;

const String SN_aes_128_cbc = 'AES-128-CBC';

const String LN_aes_128_cbc = 'aes-128-cbc';

const int NID_aes_128_cbc = 419;

const int OBJ_aes_128_cbc = 2;

const String SN_aes_128_ofb128 = 'AES-128-OFB';

const String LN_aes_128_ofb128 = 'aes-128-ofb';

const int NID_aes_128_ofb128 = 420;

const int OBJ_aes_128_ofb128 = 2;

const String SN_aes_128_cfb128 = 'AES-128-CFB';

const String LN_aes_128_cfb128 = 'aes-128-cfb';

const int NID_aes_128_cfb128 = 421;

const int OBJ_aes_128_cfb128 = 2;

const String SN_id_aes128_wrap = 'id-aes128-wrap';

const int NID_id_aes128_wrap = 788;

const int OBJ_id_aes128_wrap = 2;

const String SN_aes_128_gcm = 'id-aes128-GCM';

const String LN_aes_128_gcm = 'aes-128-gcm';

const int NID_aes_128_gcm = 895;

const int OBJ_aes_128_gcm = 2;

const String SN_aes_128_ccm = 'id-aes128-CCM';

const String LN_aes_128_ccm = 'aes-128-ccm';

const int NID_aes_128_ccm = 896;

const int OBJ_aes_128_ccm = 2;

const String SN_id_aes128_wrap_pad = 'id-aes128-wrap-pad';

const int NID_id_aes128_wrap_pad = 897;

const int OBJ_id_aes128_wrap_pad = 2;

const String SN_aes_192_ecb = 'AES-192-ECB';

const String LN_aes_192_ecb = 'aes-192-ecb';

const int NID_aes_192_ecb = 422;

const int OBJ_aes_192_ecb = 2;

const String SN_aes_192_cbc = 'AES-192-CBC';

const String LN_aes_192_cbc = 'aes-192-cbc';

const int NID_aes_192_cbc = 423;

const int OBJ_aes_192_cbc = 2;

const String SN_aes_192_ofb128 = 'AES-192-OFB';

const String LN_aes_192_ofb128 = 'aes-192-ofb';

const int NID_aes_192_ofb128 = 424;

const int OBJ_aes_192_ofb128 = 2;

const String SN_aes_192_cfb128 = 'AES-192-CFB';

const String LN_aes_192_cfb128 = 'aes-192-cfb';

const int NID_aes_192_cfb128 = 425;

const int OBJ_aes_192_cfb128 = 2;

const String SN_id_aes192_wrap = 'id-aes192-wrap';

const int NID_id_aes192_wrap = 789;

const int OBJ_id_aes192_wrap = 2;

const String SN_aes_192_gcm = 'id-aes192-GCM';

const String LN_aes_192_gcm = 'aes-192-gcm';

const int NID_aes_192_gcm = 898;

const int OBJ_aes_192_gcm = 2;

const String SN_aes_192_ccm = 'id-aes192-CCM';

const String LN_aes_192_ccm = 'aes-192-ccm';

const int NID_aes_192_ccm = 899;

const int OBJ_aes_192_ccm = 2;

const String SN_id_aes192_wrap_pad = 'id-aes192-wrap-pad';

const int NID_id_aes192_wrap_pad = 900;

const int OBJ_id_aes192_wrap_pad = 2;

const String SN_aes_256_ecb = 'AES-256-ECB';

const String LN_aes_256_ecb = 'aes-256-ecb';

const int NID_aes_256_ecb = 426;

const int OBJ_aes_256_ecb = 2;

const String SN_aes_256_cbc = 'AES-256-CBC';

const String LN_aes_256_cbc = 'aes-256-cbc';

const int NID_aes_256_cbc = 427;

const int OBJ_aes_256_cbc = 2;

const String SN_aes_256_ofb128 = 'AES-256-OFB';

const String LN_aes_256_ofb128 = 'aes-256-ofb';

const int NID_aes_256_ofb128 = 428;

const int OBJ_aes_256_ofb128 = 2;

const String SN_aes_256_cfb128 = 'AES-256-CFB';

const String LN_aes_256_cfb128 = 'aes-256-cfb';

const int NID_aes_256_cfb128 = 429;

const int OBJ_aes_256_cfb128 = 2;

const String SN_id_aes256_wrap = 'id-aes256-wrap';

const int NID_id_aes256_wrap = 790;

const int OBJ_id_aes256_wrap = 2;

const String SN_aes_256_gcm = 'id-aes256-GCM';

const String LN_aes_256_gcm = 'aes-256-gcm';

const int NID_aes_256_gcm = 901;

const int OBJ_aes_256_gcm = 2;

const String SN_aes_256_ccm = 'id-aes256-CCM';

const String LN_aes_256_ccm = 'aes-256-ccm';

const int NID_aes_256_ccm = 902;

const int OBJ_aes_256_ccm = 2;

const String SN_id_aes256_wrap_pad = 'id-aes256-wrap-pad';

const int NID_id_aes256_wrap_pad = 903;

const int OBJ_id_aes256_wrap_pad = 2;

const String SN_aes_128_xts = 'AES-128-XTS';

const String LN_aes_128_xts = 'aes-128-xts';

const int NID_aes_128_xts = 913;

const int OBJ_aes_128_xts = 1;

const String SN_aes_256_xts = 'AES-256-XTS';

const String LN_aes_256_xts = 'aes-256-xts';

const int NID_aes_256_xts = 914;

const int OBJ_aes_256_xts = 1;

const String SN_aes_128_cfb1 = 'AES-128-CFB1';

const String LN_aes_128_cfb1 = 'aes-128-cfb1';

const int NID_aes_128_cfb1 = 650;

const String SN_aes_192_cfb1 = 'AES-192-CFB1';

const String LN_aes_192_cfb1 = 'aes-192-cfb1';

const int NID_aes_192_cfb1 = 651;

const String SN_aes_256_cfb1 = 'AES-256-CFB1';

const String LN_aes_256_cfb1 = 'aes-256-cfb1';

const int NID_aes_256_cfb1 = 652;

const String SN_aes_128_cfb8 = 'AES-128-CFB8';

const String LN_aes_128_cfb8 = 'aes-128-cfb8';

const int NID_aes_128_cfb8 = 653;

const String SN_aes_192_cfb8 = 'AES-192-CFB8';

const String LN_aes_192_cfb8 = 'aes-192-cfb8';

const int NID_aes_192_cfb8 = 654;

const String SN_aes_256_cfb8 = 'AES-256-CFB8';

const String LN_aes_256_cfb8 = 'aes-256-cfb8';

const int NID_aes_256_cfb8 = 655;

const String SN_aes_128_ctr = 'AES-128-CTR';

const String LN_aes_128_ctr = 'aes-128-ctr';

const int NID_aes_128_ctr = 904;

const String SN_aes_192_ctr = 'AES-192-CTR';

const String LN_aes_192_ctr = 'aes-192-ctr';

const int NID_aes_192_ctr = 905;

const String SN_aes_256_ctr = 'AES-256-CTR';

const String LN_aes_256_ctr = 'aes-256-ctr';

const int NID_aes_256_ctr = 906;

const String SN_aes_128_ocb = 'AES-128-OCB';

const String LN_aes_128_ocb = 'aes-128-ocb';

const int NID_aes_128_ocb = 958;

const String SN_aes_192_ocb = 'AES-192-OCB';

const String LN_aes_192_ocb = 'aes-192-ocb';

const int NID_aes_192_ocb = 959;

const String SN_aes_256_ocb = 'AES-256-OCB';

const String LN_aes_256_ocb = 'aes-256-ocb';

const int NID_aes_256_ocb = 960;

const String SN_des_cfb1 = 'DES-CFB1';

const String LN_des_cfb1 = 'des-cfb1';

const int NID_des_cfb1 = 656;

const String SN_des_cfb8 = 'DES-CFB8';

const String LN_des_cfb8 = 'des-cfb8';

const int NID_des_cfb8 = 657;

const String SN_des_ede3_cfb1 = 'DES-EDE3-CFB1';

const String LN_des_ede3_cfb1 = 'des-ede3-cfb1';

const int NID_des_ede3_cfb1 = 658;

const String SN_des_ede3_cfb8 = 'DES-EDE3-CFB8';

const String LN_des_ede3_cfb8 = 'des-ede3-cfb8';

const int NID_des_ede3_cfb8 = 659;

const int OBJ_nist_hashalgs = 2;

const String SN_sha256 = 'SHA256';

const String LN_sha256 = 'sha256';

const int NID_sha256 = 672;

const int OBJ_sha256 = 2;

const String SN_sha384 = 'SHA384';

const String LN_sha384 = 'sha384';

const int NID_sha384 = 673;

const int OBJ_sha384 = 2;

const String SN_sha512 = 'SHA512';

const String LN_sha512 = 'sha512';

const int NID_sha512 = 674;

const int OBJ_sha512 = 2;

const String SN_sha224 = 'SHA224';

const String LN_sha224 = 'sha224';

const int NID_sha224 = 675;

const int OBJ_sha224 = 2;

const String SN_sha512_224 = 'SHA512-224';

const String LN_sha512_224 = 'sha512-224';

const int NID_sha512_224 = 1094;

const int OBJ_sha512_224 = 2;

const String SN_sha512_256 = 'SHA512-256';

const String LN_sha512_256 = 'sha512-256';

const int NID_sha512_256 = 1095;

const int OBJ_sha512_256 = 2;

const String SN_sha3_224 = 'SHA3-224';

const String LN_sha3_224 = 'sha3-224';

const int NID_sha3_224 = 1096;

const int OBJ_sha3_224 = 2;

const String SN_sha3_256 = 'SHA3-256';

const String LN_sha3_256 = 'sha3-256';

const int NID_sha3_256 = 1097;

const int OBJ_sha3_256 = 2;

const String SN_sha3_384 = 'SHA3-384';

const String LN_sha3_384 = 'sha3-384';

const int NID_sha3_384 = 1098;

const int OBJ_sha3_384 = 2;

const String SN_sha3_512 = 'SHA3-512';

const String LN_sha3_512 = 'sha3-512';

const int NID_sha3_512 = 1099;

const int OBJ_sha3_512 = 2;

const String SN_shake128 = 'SHAKE128';

const String LN_shake128 = 'shake128';

const int NID_shake128 = 1100;

const int OBJ_shake128 = 2;

const String SN_shake256 = 'SHAKE256';

const String LN_shake256 = 'shake256';

const int NID_shake256 = 1101;

const int OBJ_shake256 = 2;

const String SN_hmac_sha3_224 = 'id-hmacWithSHA3-224';

const String LN_hmac_sha3_224 = 'hmac-sha3-224';

const int NID_hmac_sha3_224 = 1102;

const int OBJ_hmac_sha3_224 = 2;

const String SN_hmac_sha3_256 = 'id-hmacWithSHA3-256';

const String LN_hmac_sha3_256 = 'hmac-sha3-256';

const int NID_hmac_sha3_256 = 1103;

const int OBJ_hmac_sha3_256 = 2;

const String SN_hmac_sha3_384 = 'id-hmacWithSHA3-384';

const String LN_hmac_sha3_384 = 'hmac-sha3-384';

const int NID_hmac_sha3_384 = 1104;

const int OBJ_hmac_sha3_384 = 2;

const String SN_hmac_sha3_512 = 'id-hmacWithSHA3-512';

const String LN_hmac_sha3_512 = 'hmac-sha3-512';

const int NID_hmac_sha3_512 = 1105;

const int OBJ_hmac_sha3_512 = 2;

const String SN_kmac128 = 'KMAC128';

const String LN_kmac128 = 'kmac128';

const int NID_kmac128 = 1196;

const int OBJ_kmac128 = 2;

const String SN_kmac256 = 'KMAC256';

const String LN_kmac256 = 'kmac256';

const int NID_kmac256 = 1197;

const int OBJ_kmac256 = 2;

const int OBJ_dsa_with_sha2 = 2;

const String SN_dsa_with_SHA224 = 'dsa_with_SHA224';

const int NID_dsa_with_SHA224 = 802;

const int OBJ_dsa_with_SHA224 = 2;

const String SN_dsa_with_SHA256 = 'dsa_with_SHA256';

const int NID_dsa_with_SHA256 = 803;

const int OBJ_dsa_with_SHA256 = 2;

const int OBJ_sigAlgs = 2;

const String SN_dsa_with_SHA384 = 'id-dsa-with-sha384';

const String LN_dsa_with_SHA384 = 'dsa_with_SHA384';

const int NID_dsa_with_SHA384 = 1106;

const int OBJ_dsa_with_SHA384 = 2;

const String SN_dsa_with_SHA512 = 'id-dsa-with-sha512';

const String LN_dsa_with_SHA512 = 'dsa_with_SHA512';

const int NID_dsa_with_SHA512 = 1107;

const int OBJ_dsa_with_SHA512 = 2;

const String SN_dsa_with_SHA3_224 = 'id-dsa-with-sha3-224';

const String LN_dsa_with_SHA3_224 = 'dsa_with_SHA3-224';

const int NID_dsa_with_SHA3_224 = 1108;

const int OBJ_dsa_with_SHA3_224 = 2;

const String SN_dsa_with_SHA3_256 = 'id-dsa-with-sha3-256';

const String LN_dsa_with_SHA3_256 = 'dsa_with_SHA3-256';

const int NID_dsa_with_SHA3_256 = 1109;

const int OBJ_dsa_with_SHA3_256 = 2;

const String SN_dsa_with_SHA3_384 = 'id-dsa-with-sha3-384';

const String LN_dsa_with_SHA3_384 = 'dsa_with_SHA3-384';

const int NID_dsa_with_SHA3_384 = 1110;

const int OBJ_dsa_with_SHA3_384 = 2;

const String SN_dsa_with_SHA3_512 = 'id-dsa-with-sha3-512';

const String LN_dsa_with_SHA3_512 = 'dsa_with_SHA3-512';

const int NID_dsa_with_SHA3_512 = 1111;

const int OBJ_dsa_with_SHA3_512 = 2;

const String SN_ecdsa_with_SHA3_224 = 'id-ecdsa-with-sha3-224';

const String LN_ecdsa_with_SHA3_224 = 'ecdsa_with_SHA3-224';

const int NID_ecdsa_with_SHA3_224 = 1112;

const int OBJ_ecdsa_with_SHA3_224 = 2;

const String SN_ecdsa_with_SHA3_256 = 'id-ecdsa-with-sha3-256';

const String LN_ecdsa_with_SHA3_256 = 'ecdsa_with_SHA3-256';

const int NID_ecdsa_with_SHA3_256 = 1113;

const int OBJ_ecdsa_with_SHA3_256 = 2;

const String SN_ecdsa_with_SHA3_384 = 'id-ecdsa-with-sha3-384';

const String LN_ecdsa_with_SHA3_384 = 'ecdsa_with_SHA3-384';

const int NID_ecdsa_with_SHA3_384 = 1114;

const int OBJ_ecdsa_with_SHA3_384 = 2;

const String SN_ecdsa_with_SHA3_512 = 'id-ecdsa-with-sha3-512';

const String LN_ecdsa_with_SHA3_512 = 'ecdsa_with_SHA3-512';

const int NID_ecdsa_with_SHA3_512 = 1115;

const int OBJ_ecdsa_with_SHA3_512 = 2;

const String SN_RSA_SHA3_224 = 'id-rsassa-pkcs1-v1_5-with-sha3-224';

const String LN_RSA_SHA3_224 = 'RSA-SHA3-224';

const int NID_RSA_SHA3_224 = 1116;

const int OBJ_RSA_SHA3_224 = 2;

const String SN_RSA_SHA3_256 = 'id-rsassa-pkcs1-v1_5-with-sha3-256';

const String LN_RSA_SHA3_256 = 'RSA-SHA3-256';

const int NID_RSA_SHA3_256 = 1117;

const int OBJ_RSA_SHA3_256 = 2;

const String SN_RSA_SHA3_384 = 'id-rsassa-pkcs1-v1_5-with-sha3-384';

const String LN_RSA_SHA3_384 = 'RSA-SHA3-384';

const int NID_RSA_SHA3_384 = 1118;

const int OBJ_RSA_SHA3_384 = 2;

const String SN_RSA_SHA3_512 = 'id-rsassa-pkcs1-v1_5-with-sha3-512';

const String LN_RSA_SHA3_512 = 'RSA-SHA3-512';

const int NID_RSA_SHA3_512 = 1119;

const int OBJ_RSA_SHA3_512 = 2;

const String SN_hold_instruction_code = 'holdInstructionCode';

const String LN_hold_instruction_code = 'Hold Instruction Code';

const int NID_hold_instruction_code = 430;

const int OBJ_hold_instruction_code = 2;

const int OBJ_holdInstruction = 1;

const String SN_hold_instruction_none = 'holdInstructionNone';

const String LN_hold_instruction_none = 'Hold Instruction None';

const int NID_hold_instruction_none = 431;

const int OBJ_hold_instruction_none = 1;

const String SN_hold_instruction_call_issuer = 'holdInstructionCallIssuer';

const String LN_hold_instruction_call_issuer = 'Hold Instruction Call Issuer';

const int NID_hold_instruction_call_issuer = 432;

const int OBJ_hold_instruction_call_issuer = 1;

const String SN_hold_instruction_reject = 'holdInstructionReject';

const String LN_hold_instruction_reject = 'Hold Instruction Reject';

const int NID_hold_instruction_reject = 433;

const int OBJ_hold_instruction_reject = 1;

const String SN_itu_t_identified_organization = 'itu-t-identified-organization';

const int NID_itu_t_identified_organization = 1264;

const int OBJ_itu_t_identified_organization = 0;

const String SN_etsi = 'etsi';

const int NID_etsi = 1265;

const int OBJ_etsi = 0;

const String SN_electronic_signature_standard = 'electronic-signature-standard';

const int NID_electronic_signature_standard = 1266;

const int OBJ_electronic_signature_standard = 0;

const String SN_ess_attributes = 'ess-attributes';

const int NID_ess_attributes = 1267;

const int OBJ_ess_attributes = 0;

const String SN_id_aa_ets_mimeType = 'id-aa-ets-mimeType';

const int NID_id_aa_ets_mimeType = 1268;

const int OBJ_id_aa_ets_mimeType = 0;

const String SN_id_aa_ets_longTermValidation = 'id-aa-ets-longTermValidation';

const int NID_id_aa_ets_longTermValidation = 1269;

const int OBJ_id_aa_ets_longTermValidation = 0;

const String SN_id_aa_ets_SignaturePolicyDocument =
    'id-aa-ets-SignaturePolicyDocument';

const int NID_id_aa_ets_SignaturePolicyDocument = 1270;

const int OBJ_id_aa_ets_SignaturePolicyDocument = 0;

const String SN_id_aa_ets_archiveTimestampV3 = 'id-aa-ets-archiveTimestampV3';

const int NID_id_aa_ets_archiveTimestampV3 = 1271;

const int OBJ_id_aa_ets_archiveTimestampV3 = 0;

const String SN_id_aa_ATSHashIndex = 'id-aa-ATSHashIndex';

const int NID_id_aa_ATSHashIndex = 1272;

const int OBJ_id_aa_ATSHashIndex = 0;

const String SN_cades = 'cades';

const int NID_cades = 1273;

const int OBJ_cades = 0;

const String SN_cades_attributes = 'cades-attributes';

const int NID_cades_attributes = 1274;

const int OBJ_cades_attributes = 0;

const String SN_id_aa_ets_signerAttrV2 = 'id-aa-ets-signerAttrV2';

const int NID_id_aa_ets_signerAttrV2 = 1275;

const int OBJ_id_aa_ets_signerAttrV2 = 0;

const String SN_id_aa_ets_sigPolicyStore = 'id-aa-ets-sigPolicyStore';

const int NID_id_aa_ets_sigPolicyStore = 1276;

const int OBJ_id_aa_ets_sigPolicyStore = 0;

const String SN_id_aa_ATSHashIndex_v2 = 'id-aa-ATSHashIndex-v2';

const int NID_id_aa_ATSHashIndex_v2 = 1277;

const int OBJ_id_aa_ATSHashIndex_v2 = 0;

const String SN_id_aa_ATSHashIndex_v3 = 'id-aa-ATSHashIndex-v3';

const int NID_id_aa_ATSHashIndex_v3 = 1278;

const int OBJ_id_aa_ATSHashIndex_v3 = 0;

const String SN_signedAssertion = 'signedAssertion';

const int NID_signedAssertion = 1279;

const int OBJ_signedAssertion = 0;

const String SN_data = 'data';

const int NID_data = 434;

const int OBJ_data = 0;

const String SN_pss = 'pss';

const int NID_pss = 435;

const int OBJ_pss = 0;

const String SN_ucl = 'ucl';

const int NID_ucl = 436;

const int OBJ_ucl = 0;

const String SN_pilot = 'pilot';

const int NID_pilot = 437;

const int OBJ_pilot = 0;

const String LN_pilotAttributeType = 'pilotAttributeType';

const int NID_pilotAttributeType = 438;

const int OBJ_pilotAttributeType = 0;

const String LN_pilotAttributeSyntax = 'pilotAttributeSyntax';

const int NID_pilotAttributeSyntax = 439;

const int OBJ_pilotAttributeSyntax = 0;

const String LN_pilotObjectClass = 'pilotObjectClass';

const int NID_pilotObjectClass = 440;

const int OBJ_pilotObjectClass = 0;

const String LN_pilotGroups = 'pilotGroups';

const int NID_pilotGroups = 441;

const int OBJ_pilotGroups = 0;

const String LN_iA5StringSyntax = 'iA5StringSyntax';

const int NID_iA5StringSyntax = 442;

const int OBJ_iA5StringSyntax = 0;

const String LN_caseIgnoreIA5StringSyntax = 'caseIgnoreIA5StringSyntax';

const int NID_caseIgnoreIA5StringSyntax = 443;

const int OBJ_caseIgnoreIA5StringSyntax = 0;

const String LN_pilotObject = 'pilotObject';

const int NID_pilotObject = 444;

const int OBJ_pilotObject = 0;

const String LN_pilotPerson = 'pilotPerson';

const int NID_pilotPerson = 445;

const int OBJ_pilotPerson = 0;

const String SN_account = 'account';

const int NID_account = 446;

const int OBJ_account = 0;

const String SN_document = 'document';

const int NID_document = 447;

const int OBJ_document = 0;

const String SN_room = 'room';

const int NID_room = 448;

const int OBJ_room = 0;

const String LN_documentSeries = 'documentSeries';

const int NID_documentSeries = 449;

const int OBJ_documentSeries = 0;

const String SN_Domain = 'domain';

const String LN_Domain = 'Domain';

const int NID_Domain = 392;

const int OBJ_Domain = 0;

const String LN_rFC822localPart = 'rFC822localPart';

const int NID_rFC822localPart = 450;

const int OBJ_rFC822localPart = 0;

const String LN_dNSDomain = 'dNSDomain';

const int NID_dNSDomain = 451;

const int OBJ_dNSDomain = 0;

const String LN_domainRelatedObject = 'domainRelatedObject';

const int NID_domainRelatedObject = 452;

const int OBJ_domainRelatedObject = 0;

const String LN_friendlyCountry = 'friendlyCountry';

const int NID_friendlyCountry = 453;

const int OBJ_friendlyCountry = 0;

const String LN_simpleSecurityObject = 'simpleSecurityObject';

const int NID_simpleSecurityObject = 454;

const int OBJ_simpleSecurityObject = 0;

const String LN_pilotOrganization = 'pilotOrganization';

const int NID_pilotOrganization = 455;

const int OBJ_pilotOrganization = 0;

const String LN_pilotDSA = 'pilotDSA';

const int NID_pilotDSA = 456;

const int OBJ_pilotDSA = 0;

const String LN_qualityLabelledData = 'qualityLabelledData';

const int NID_qualityLabelledData = 457;

const int OBJ_qualityLabelledData = 0;

const String SN_userId = 'UID';

const String LN_userId = 'userId';

const int NID_userId = 458;

const int OBJ_userId = 0;

const String LN_textEncodedORAddress = 'textEncodedORAddress';

const int NID_textEncodedORAddress = 459;

const int OBJ_textEncodedORAddress = 0;

const String SN_rfc822Mailbox = 'mail';

const String LN_rfc822Mailbox = 'rfc822Mailbox';

const int NID_rfc822Mailbox = 460;

const int OBJ_rfc822Mailbox = 0;

const String SN_info = 'info';

const int NID_info = 461;

const int OBJ_info = 0;

const String LN_favouriteDrink = 'favouriteDrink';

const int NID_favouriteDrink = 462;

const int OBJ_favouriteDrink = 0;

const String LN_roomNumber = 'roomNumber';

const int NID_roomNumber = 463;

const int OBJ_roomNumber = 0;

const String SN_photo = 'photo';

const int NID_photo = 464;

const int OBJ_photo = 0;

const String LN_userClass = 'userClass';

const int NID_userClass = 465;

const int OBJ_userClass = 0;

const String SN_host = 'host';

const int NID_host = 466;

const int OBJ_host = 0;

const String SN_manager = 'manager';

const int NID_manager = 467;

const int OBJ_manager = 0;

const String LN_documentIdentifier = 'documentIdentifier';

const int NID_documentIdentifier = 468;

const int OBJ_documentIdentifier = 0;

const String LN_documentTitle = 'documentTitle';

const int NID_documentTitle = 469;

const int OBJ_documentTitle = 0;

const String LN_documentVersion = 'documentVersion';

const int NID_documentVersion = 470;

const int OBJ_documentVersion = 0;

const String LN_documentAuthor = 'documentAuthor';

const int NID_documentAuthor = 471;

const int OBJ_documentAuthor = 0;

const String LN_documentLocation = 'documentLocation';

const int NID_documentLocation = 472;

const int OBJ_documentLocation = 0;

const String LN_homeTelephoneNumber = 'homeTelephoneNumber';

const int NID_homeTelephoneNumber = 473;

const int OBJ_homeTelephoneNumber = 0;

const String SN_secretary = 'secretary';

const int NID_secretary = 474;

const int OBJ_secretary = 0;

const String LN_otherMailbox = 'otherMailbox';

const int NID_otherMailbox = 475;

const int OBJ_otherMailbox = 0;

const String LN_lastModifiedTime = 'lastModifiedTime';

const int NID_lastModifiedTime = 476;

const int OBJ_lastModifiedTime = 0;

const String LN_lastModifiedBy = 'lastModifiedBy';

const int NID_lastModifiedBy = 477;

const int OBJ_lastModifiedBy = 0;

const String SN_domainComponent = 'DC';

const String LN_domainComponent = 'domainComponent';

const int NID_domainComponent = 391;

const int OBJ_domainComponent = 0;

const String LN_aRecord = 'aRecord';

const int NID_aRecord = 478;

const int OBJ_aRecord = 0;

const String LN_pilotAttributeType27 = 'pilotAttributeType27';

const int NID_pilotAttributeType27 = 479;

const int OBJ_pilotAttributeType27 = 0;

const String LN_mXRecord = 'mXRecord';

const int NID_mXRecord = 480;

const int OBJ_mXRecord = 0;

const String LN_nSRecord = 'nSRecord';

const int NID_nSRecord = 481;

const int OBJ_nSRecord = 0;

const String LN_sOARecord = 'sOARecord';

const int NID_sOARecord = 482;

const int OBJ_sOARecord = 0;

const String LN_cNAMERecord = 'cNAMERecord';

const int NID_cNAMERecord = 483;

const int OBJ_cNAMERecord = 0;

const String LN_associatedDomain = 'associatedDomain';

const int NID_associatedDomain = 484;

const int OBJ_associatedDomain = 0;

const String LN_associatedName = 'associatedName';

const int NID_associatedName = 485;

const int OBJ_associatedName = 0;

const String LN_homePostalAddress = 'homePostalAddress';

const int NID_homePostalAddress = 486;

const int OBJ_homePostalAddress = 0;

const String LN_personalTitle = 'personalTitle';

const int NID_personalTitle = 487;

const int OBJ_personalTitle = 0;

const String LN_mobileTelephoneNumber = 'mobileTelephoneNumber';

const int NID_mobileTelephoneNumber = 488;

const int OBJ_mobileTelephoneNumber = 0;

const String LN_pagerTelephoneNumber = 'pagerTelephoneNumber';

const int NID_pagerTelephoneNumber = 489;

const int OBJ_pagerTelephoneNumber = 0;

const String LN_friendlyCountryName = 'friendlyCountryName';

const int NID_friendlyCountryName = 490;

const int OBJ_friendlyCountryName = 0;

const String SN_uniqueIdentifier = 'uid';

const String LN_uniqueIdentifier = 'uniqueIdentifier';

const int NID_uniqueIdentifier = 102;

const int OBJ_uniqueIdentifier = 0;

const String LN_organizationalStatus = 'organizationalStatus';

const int NID_organizationalStatus = 491;

const int OBJ_organizationalStatus = 0;

const String LN_janetMailbox = 'janetMailbox';

const int NID_janetMailbox = 492;

const int OBJ_janetMailbox = 0;

const String LN_mailPreferenceOption = 'mailPreferenceOption';

const int NID_mailPreferenceOption = 493;

const int OBJ_mailPreferenceOption = 0;

const String LN_buildingName = 'buildingName';

const int NID_buildingName = 494;

const int OBJ_buildingName = 0;

const String LN_dSAQuality = 'dSAQuality';

const int NID_dSAQuality = 495;

const int OBJ_dSAQuality = 0;

const String LN_singleLevelQuality = 'singleLevelQuality';

const int NID_singleLevelQuality = 496;

const int OBJ_singleLevelQuality = 0;

const String LN_subtreeMinimumQuality = 'subtreeMinimumQuality';

const int NID_subtreeMinimumQuality = 497;

const int OBJ_subtreeMinimumQuality = 0;

const String LN_subtreeMaximumQuality = 'subtreeMaximumQuality';

const int NID_subtreeMaximumQuality = 498;

const int OBJ_subtreeMaximumQuality = 0;

const String LN_personalSignature = 'personalSignature';

const int NID_personalSignature = 499;

const int OBJ_personalSignature = 0;

const String LN_dITRedirect = 'dITRedirect';

const int NID_dITRedirect = 500;

const int OBJ_dITRedirect = 0;

const String SN_audio = 'audio';

const int NID_audio = 501;

const int OBJ_audio = 0;

const String LN_documentPublisher = 'documentPublisher';

const int NID_documentPublisher = 502;

const int OBJ_documentPublisher = 0;

const String SN_id_set = 'id-set';

const String LN_id_set = 'Secure Electronic Transactions';

const int NID_id_set = 512;

const int OBJ_id_set = 2;

const String SN_set_ctype = 'set-ctype';

const String LN_set_ctype = 'content types';

const int NID_set_ctype = 513;

const int OBJ_set_ctype = 2;

const String SN_set_msgExt = 'set-msgExt';

const String LN_set_msgExt = 'message extensions';

const int NID_set_msgExt = 514;

const int OBJ_set_msgExt = 2;

const String SN_set_attr = 'set-attr';

const int NID_set_attr = 515;

const int OBJ_set_attr = 2;

const String SN_set_policy = 'set-policy';

const int NID_set_policy = 516;

const int OBJ_set_policy = 2;

const String SN_set_certExt = 'set-certExt';

const String LN_set_certExt = 'certificate extensions';

const int NID_set_certExt = 517;

const int OBJ_set_certExt = 2;

const String SN_set_brand = 'set-brand';

const int NID_set_brand = 518;

const int OBJ_set_brand = 2;

const String SN_setct_PANData = 'setct-PANData';

const int NID_setct_PANData = 519;

const int OBJ_setct_PANData = 2;

const String SN_setct_PANToken = 'setct-PANToken';

const int NID_setct_PANToken = 520;

const int OBJ_setct_PANToken = 2;

const String SN_setct_PANOnly = 'setct-PANOnly';

const int NID_setct_PANOnly = 521;

const int OBJ_setct_PANOnly = 2;

const String SN_setct_OIData = 'setct-OIData';

const int NID_setct_OIData = 522;

const int OBJ_setct_OIData = 2;

const String SN_setct_PI = 'setct-PI';

const int NID_setct_PI = 523;

const int OBJ_setct_PI = 2;

const String SN_setct_PIData = 'setct-PIData';

const int NID_setct_PIData = 524;

const int OBJ_setct_PIData = 2;

const String SN_setct_PIDataUnsigned = 'setct-PIDataUnsigned';

const int NID_setct_PIDataUnsigned = 525;

const int OBJ_setct_PIDataUnsigned = 2;

const String SN_setct_HODInput = 'setct-HODInput';

const int NID_setct_HODInput = 526;

const int OBJ_setct_HODInput = 2;

const String SN_setct_AuthResBaggage = 'setct-AuthResBaggage';

const int NID_setct_AuthResBaggage = 527;

const int OBJ_setct_AuthResBaggage = 2;

const String SN_setct_AuthRevReqBaggage = 'setct-AuthRevReqBaggage';

const int NID_setct_AuthRevReqBaggage = 528;

const int OBJ_setct_AuthRevReqBaggage = 2;

const String SN_setct_AuthRevResBaggage = 'setct-AuthRevResBaggage';

const int NID_setct_AuthRevResBaggage = 529;

const int OBJ_setct_AuthRevResBaggage = 2;

const String SN_setct_CapTokenSeq = 'setct-CapTokenSeq';

const int NID_setct_CapTokenSeq = 530;

const int OBJ_setct_CapTokenSeq = 2;

const String SN_setct_PInitResData = 'setct-PInitResData';

const int NID_setct_PInitResData = 531;

const int OBJ_setct_PInitResData = 2;

const String SN_setct_PI_TBS = 'setct-PI-TBS';

const int NID_setct_PI_TBS = 532;

const int OBJ_setct_PI_TBS = 2;

const String SN_setct_PResData = 'setct-PResData';

const int NID_setct_PResData = 533;

const int OBJ_setct_PResData = 2;

const String SN_setct_AuthReqTBS = 'setct-AuthReqTBS';

const int NID_setct_AuthReqTBS = 534;

const int OBJ_setct_AuthReqTBS = 2;

const String SN_setct_AuthResTBS = 'setct-AuthResTBS';

const int NID_setct_AuthResTBS = 535;

const int OBJ_setct_AuthResTBS = 2;

const String SN_setct_AuthResTBSX = 'setct-AuthResTBSX';

const int NID_setct_AuthResTBSX = 536;

const int OBJ_setct_AuthResTBSX = 2;

const String SN_setct_AuthTokenTBS = 'setct-AuthTokenTBS';

const int NID_setct_AuthTokenTBS = 537;

const int OBJ_setct_AuthTokenTBS = 2;

const String SN_setct_CapTokenData = 'setct-CapTokenData';

const int NID_setct_CapTokenData = 538;

const int OBJ_setct_CapTokenData = 2;

const String SN_setct_CapTokenTBS = 'setct-CapTokenTBS';

const int NID_setct_CapTokenTBS = 539;

const int OBJ_setct_CapTokenTBS = 2;

const String SN_setct_AcqCardCodeMsg = 'setct-AcqCardCodeMsg';

const int NID_setct_AcqCardCodeMsg = 540;

const int OBJ_setct_AcqCardCodeMsg = 2;

const String SN_setct_AuthRevReqTBS = 'setct-AuthRevReqTBS';

const int NID_setct_AuthRevReqTBS = 541;

const int OBJ_setct_AuthRevReqTBS = 2;

const String SN_setct_AuthRevResData = 'setct-AuthRevResData';

const int NID_setct_AuthRevResData = 542;

const int OBJ_setct_AuthRevResData = 2;

const String SN_setct_AuthRevResTBS = 'setct-AuthRevResTBS';

const int NID_setct_AuthRevResTBS = 543;

const int OBJ_setct_AuthRevResTBS = 2;

const String SN_setct_CapReqTBS = 'setct-CapReqTBS';

const int NID_setct_CapReqTBS = 544;

const int OBJ_setct_CapReqTBS = 2;

const String SN_setct_CapReqTBSX = 'setct-CapReqTBSX';

const int NID_setct_CapReqTBSX = 545;

const int OBJ_setct_CapReqTBSX = 2;

const String SN_setct_CapResData = 'setct-CapResData';

const int NID_setct_CapResData = 546;

const int OBJ_setct_CapResData = 2;

const String SN_setct_CapRevReqTBS = 'setct-CapRevReqTBS';

const int NID_setct_CapRevReqTBS = 547;

const int OBJ_setct_CapRevReqTBS = 2;

const String SN_setct_CapRevReqTBSX = 'setct-CapRevReqTBSX';

const int NID_setct_CapRevReqTBSX = 548;

const int OBJ_setct_CapRevReqTBSX = 2;

const String SN_setct_CapRevResData = 'setct-CapRevResData';

const int NID_setct_CapRevResData = 549;

const int OBJ_setct_CapRevResData = 2;

const String SN_setct_CredReqTBS = 'setct-CredReqTBS';

const int NID_setct_CredReqTBS = 550;

const int OBJ_setct_CredReqTBS = 2;

const String SN_setct_CredReqTBSX = 'setct-CredReqTBSX';

const int NID_setct_CredReqTBSX = 551;

const int OBJ_setct_CredReqTBSX = 2;

const String SN_setct_CredResData = 'setct-CredResData';

const int NID_setct_CredResData = 552;

const int OBJ_setct_CredResData = 2;

const String SN_setct_CredRevReqTBS = 'setct-CredRevReqTBS';

const int NID_setct_CredRevReqTBS = 553;

const int OBJ_setct_CredRevReqTBS = 2;

const String SN_setct_CredRevReqTBSX = 'setct-CredRevReqTBSX';

const int NID_setct_CredRevReqTBSX = 554;

const int OBJ_setct_CredRevReqTBSX = 2;

const String SN_setct_CredRevResData = 'setct-CredRevResData';

const int NID_setct_CredRevResData = 555;

const int OBJ_setct_CredRevResData = 2;

const String SN_setct_PCertReqData = 'setct-PCertReqData';

const int NID_setct_PCertReqData = 556;

const int OBJ_setct_PCertReqData = 2;

const String SN_setct_PCertResTBS = 'setct-PCertResTBS';

const int NID_setct_PCertResTBS = 557;

const int OBJ_setct_PCertResTBS = 2;

const String SN_setct_BatchAdminReqData = 'setct-BatchAdminReqData';

const int NID_setct_BatchAdminReqData = 558;

const int OBJ_setct_BatchAdminReqData = 2;

const String SN_setct_BatchAdminResData = 'setct-BatchAdminResData';

const int NID_setct_BatchAdminResData = 559;

const int OBJ_setct_BatchAdminResData = 2;

const String SN_setct_CardCInitResTBS = 'setct-CardCInitResTBS';

const int NID_setct_CardCInitResTBS = 560;

const int OBJ_setct_CardCInitResTBS = 2;

const String SN_setct_MeAqCInitResTBS = 'setct-MeAqCInitResTBS';

const int NID_setct_MeAqCInitResTBS = 561;

const int OBJ_setct_MeAqCInitResTBS = 2;

const String SN_setct_RegFormResTBS = 'setct-RegFormResTBS';

const int NID_setct_RegFormResTBS = 562;

const int OBJ_setct_RegFormResTBS = 2;

const String SN_setct_CertReqData = 'setct-CertReqData';

const int NID_setct_CertReqData = 563;

const int OBJ_setct_CertReqData = 2;

const String SN_setct_CertReqTBS = 'setct-CertReqTBS';

const int NID_setct_CertReqTBS = 564;

const int OBJ_setct_CertReqTBS = 2;

const String SN_setct_CertResData = 'setct-CertResData';

const int NID_setct_CertResData = 565;

const int OBJ_setct_CertResData = 2;

const String SN_setct_CertInqReqTBS = 'setct-CertInqReqTBS';

const int NID_setct_CertInqReqTBS = 566;

const int OBJ_setct_CertInqReqTBS = 2;

const String SN_setct_ErrorTBS = 'setct-ErrorTBS';

const int NID_setct_ErrorTBS = 567;

const int OBJ_setct_ErrorTBS = 2;

const String SN_setct_PIDualSignedTBE = 'setct-PIDualSignedTBE';

const int NID_setct_PIDualSignedTBE = 568;

const int OBJ_setct_PIDualSignedTBE = 2;

const String SN_setct_PIUnsignedTBE = 'setct-PIUnsignedTBE';

const int NID_setct_PIUnsignedTBE = 569;

const int OBJ_setct_PIUnsignedTBE = 2;

const String SN_setct_AuthReqTBE = 'setct-AuthReqTBE';

const int NID_setct_AuthReqTBE = 570;

const int OBJ_setct_AuthReqTBE = 2;

const String SN_setct_AuthResTBE = 'setct-AuthResTBE';

const int NID_setct_AuthResTBE = 571;

const int OBJ_setct_AuthResTBE = 2;

const String SN_setct_AuthResTBEX = 'setct-AuthResTBEX';

const int NID_setct_AuthResTBEX = 572;

const int OBJ_setct_AuthResTBEX = 2;

const String SN_setct_AuthTokenTBE = 'setct-AuthTokenTBE';

const int NID_setct_AuthTokenTBE = 573;

const int OBJ_setct_AuthTokenTBE = 2;

const String SN_setct_CapTokenTBE = 'setct-CapTokenTBE';

const int NID_setct_CapTokenTBE = 574;

const int OBJ_setct_CapTokenTBE = 2;

const String SN_setct_CapTokenTBEX = 'setct-CapTokenTBEX';

const int NID_setct_CapTokenTBEX = 575;

const int OBJ_setct_CapTokenTBEX = 2;

const String SN_setct_AcqCardCodeMsgTBE = 'setct-AcqCardCodeMsgTBE';

const int NID_setct_AcqCardCodeMsgTBE = 576;

const int OBJ_setct_AcqCardCodeMsgTBE = 2;

const String SN_setct_AuthRevReqTBE = 'setct-AuthRevReqTBE';

const int NID_setct_AuthRevReqTBE = 577;

const int OBJ_setct_AuthRevReqTBE = 2;

const String SN_setct_AuthRevResTBE = 'setct-AuthRevResTBE';

const int NID_setct_AuthRevResTBE = 578;

const int OBJ_setct_AuthRevResTBE = 2;

const String SN_setct_AuthRevResTBEB = 'setct-AuthRevResTBEB';

const int NID_setct_AuthRevResTBEB = 579;

const int OBJ_setct_AuthRevResTBEB = 2;

const String SN_setct_CapReqTBE = 'setct-CapReqTBE';

const int NID_setct_CapReqTBE = 580;

const int OBJ_setct_CapReqTBE = 2;

const String SN_setct_CapReqTBEX = 'setct-CapReqTBEX';

const int NID_setct_CapReqTBEX = 581;

const int OBJ_setct_CapReqTBEX = 2;

const String SN_setct_CapResTBE = 'setct-CapResTBE';

const int NID_setct_CapResTBE = 582;

const int OBJ_setct_CapResTBE = 2;

const String SN_setct_CapRevReqTBE = 'setct-CapRevReqTBE';

const int NID_setct_CapRevReqTBE = 583;

const int OBJ_setct_CapRevReqTBE = 2;

const String SN_setct_CapRevReqTBEX = 'setct-CapRevReqTBEX';

const int NID_setct_CapRevReqTBEX = 584;

const int OBJ_setct_CapRevReqTBEX = 2;

const String SN_setct_CapRevResTBE = 'setct-CapRevResTBE';

const int NID_setct_CapRevResTBE = 585;

const int OBJ_setct_CapRevResTBE = 2;

const String SN_setct_CredReqTBE = 'setct-CredReqTBE';

const int NID_setct_CredReqTBE = 586;

const int OBJ_setct_CredReqTBE = 2;

const String SN_setct_CredReqTBEX = 'setct-CredReqTBEX';

const int NID_setct_CredReqTBEX = 587;

const int OBJ_setct_CredReqTBEX = 2;

const String SN_setct_CredResTBE = 'setct-CredResTBE';

const int NID_setct_CredResTBE = 588;

const int OBJ_setct_CredResTBE = 2;

const String SN_setct_CredRevReqTBE = 'setct-CredRevReqTBE';

const int NID_setct_CredRevReqTBE = 589;

const int OBJ_setct_CredRevReqTBE = 2;

const String SN_setct_CredRevReqTBEX = 'setct-CredRevReqTBEX';

const int NID_setct_CredRevReqTBEX = 590;

const int OBJ_setct_CredRevReqTBEX = 2;

const String SN_setct_CredRevResTBE = 'setct-CredRevResTBE';

const int NID_setct_CredRevResTBE = 591;

const int OBJ_setct_CredRevResTBE = 2;

const String SN_setct_BatchAdminReqTBE = 'setct-BatchAdminReqTBE';

const int NID_setct_BatchAdminReqTBE = 592;

const int OBJ_setct_BatchAdminReqTBE = 2;

const String SN_setct_BatchAdminResTBE = 'setct-BatchAdminResTBE';

const int NID_setct_BatchAdminResTBE = 593;

const int OBJ_setct_BatchAdminResTBE = 2;

const String SN_setct_RegFormReqTBE = 'setct-RegFormReqTBE';

const int NID_setct_RegFormReqTBE = 594;

const int OBJ_setct_RegFormReqTBE = 2;

const String SN_setct_CertReqTBE = 'setct-CertReqTBE';

const int NID_setct_CertReqTBE = 595;

const int OBJ_setct_CertReqTBE = 2;

const String SN_setct_CertReqTBEX = 'setct-CertReqTBEX';

const int NID_setct_CertReqTBEX = 596;

const int OBJ_setct_CertReqTBEX = 2;

const String SN_setct_CertResTBE = 'setct-CertResTBE';

const int NID_setct_CertResTBE = 597;

const int OBJ_setct_CertResTBE = 2;

const String SN_setct_CRLNotificationTBS = 'setct-CRLNotificationTBS';

const int NID_setct_CRLNotificationTBS = 598;

const int OBJ_setct_CRLNotificationTBS = 2;

const String SN_setct_CRLNotificationResTBS = 'setct-CRLNotificationResTBS';

const int NID_setct_CRLNotificationResTBS = 599;

const int OBJ_setct_CRLNotificationResTBS = 2;

const String SN_setct_BCIDistributionTBS = 'setct-BCIDistributionTBS';

const int NID_setct_BCIDistributionTBS = 600;

const int OBJ_setct_BCIDistributionTBS = 2;

const String SN_setext_genCrypt = 'setext-genCrypt';

const String LN_setext_genCrypt = 'generic cryptogram';

const int NID_setext_genCrypt = 601;

const int OBJ_setext_genCrypt = 2;

const String SN_setext_miAuth = 'setext-miAuth';

const String LN_setext_miAuth = 'merchant initiated auth';

const int NID_setext_miAuth = 602;

const int OBJ_setext_miAuth = 2;

const String SN_setext_pinSecure = 'setext-pinSecure';

const int NID_setext_pinSecure = 603;

const int OBJ_setext_pinSecure = 2;

const String SN_setext_pinAny = 'setext-pinAny';

const int NID_setext_pinAny = 604;

const int OBJ_setext_pinAny = 2;

const String SN_setext_track2 = 'setext-track2';

const int NID_setext_track2 = 605;

const int OBJ_setext_track2 = 2;

const String SN_setext_cv = 'setext-cv';

const String LN_setext_cv = 'additional verification';

const int NID_setext_cv = 606;

const int OBJ_setext_cv = 2;

const String SN_set_policy_root = 'set-policy-root';

const int NID_set_policy_root = 607;

const int OBJ_set_policy_root = 2;

const String SN_setCext_hashedRoot = 'setCext-hashedRoot';

const int NID_setCext_hashedRoot = 608;

const int OBJ_setCext_hashedRoot = 2;

const String SN_setCext_certType = 'setCext-certType';

const int NID_setCext_certType = 609;

const int OBJ_setCext_certType = 2;

const String SN_setCext_merchData = 'setCext-merchData';

const int NID_setCext_merchData = 610;

const int OBJ_setCext_merchData = 2;

const String SN_setCext_cCertRequired = 'setCext-cCertRequired';

const int NID_setCext_cCertRequired = 611;

const int OBJ_setCext_cCertRequired = 2;

const String SN_setCext_tunneling = 'setCext-tunneling';

const int NID_setCext_tunneling = 612;

const int OBJ_setCext_tunneling = 2;

const String SN_setCext_setExt = 'setCext-setExt';

const int NID_setCext_setExt = 613;

const int OBJ_setCext_setExt = 2;

const String SN_setCext_setQualf = 'setCext-setQualf';

const int NID_setCext_setQualf = 614;

const int OBJ_setCext_setQualf = 2;

const String SN_setCext_PGWYcapabilities = 'setCext-PGWYcapabilities';

const int NID_setCext_PGWYcapabilities = 615;

const int OBJ_setCext_PGWYcapabilities = 2;

const String SN_setCext_TokenIdentifier = 'setCext-TokenIdentifier';

const int NID_setCext_TokenIdentifier = 616;

const int OBJ_setCext_TokenIdentifier = 2;

const String SN_setCext_Track2Data = 'setCext-Track2Data';

const int NID_setCext_Track2Data = 617;

const int OBJ_setCext_Track2Data = 2;

const String SN_setCext_TokenType = 'setCext-TokenType';

const int NID_setCext_TokenType = 618;

const int OBJ_setCext_TokenType = 2;

const String SN_setCext_IssuerCapabilities = 'setCext-IssuerCapabilities';

const int NID_setCext_IssuerCapabilities = 619;

const int OBJ_setCext_IssuerCapabilities = 2;

const String SN_setAttr_Cert = 'setAttr-Cert';

const int NID_setAttr_Cert = 620;

const int OBJ_setAttr_Cert = 2;

const String SN_setAttr_PGWYcap = 'setAttr-PGWYcap';

const String LN_setAttr_PGWYcap = 'payment gateway capabilities';

const int NID_setAttr_PGWYcap = 621;

const int OBJ_setAttr_PGWYcap = 2;

const String SN_setAttr_TokenType = 'setAttr-TokenType';

const int NID_setAttr_TokenType = 622;

const int OBJ_setAttr_TokenType = 2;

const String SN_setAttr_IssCap = 'setAttr-IssCap';

const String LN_setAttr_IssCap = 'issuer capabilities';

const int NID_setAttr_IssCap = 623;

const int OBJ_setAttr_IssCap = 2;

const String SN_set_rootKeyThumb = 'set-rootKeyThumb';

const int NID_set_rootKeyThumb = 624;

const int OBJ_set_rootKeyThumb = 2;

const String SN_set_addPolicy = 'set-addPolicy';

const int NID_set_addPolicy = 625;

const int OBJ_set_addPolicy = 2;

const String SN_setAttr_Token_EMV = 'setAttr-Token-EMV';

const int NID_setAttr_Token_EMV = 626;

const int OBJ_setAttr_Token_EMV = 2;

const String SN_setAttr_Token_B0Prime = 'setAttr-Token-B0Prime';

const int NID_setAttr_Token_B0Prime = 627;

const int OBJ_setAttr_Token_B0Prime = 2;

const String SN_setAttr_IssCap_CVM = 'setAttr-IssCap-CVM';

const int NID_setAttr_IssCap_CVM = 628;

const int OBJ_setAttr_IssCap_CVM = 2;

const String SN_setAttr_IssCap_T2 = 'setAttr-IssCap-T2';

const int NID_setAttr_IssCap_T2 = 629;

const int OBJ_setAttr_IssCap_T2 = 2;

const String SN_setAttr_IssCap_Sig = 'setAttr-IssCap-Sig';

const int NID_setAttr_IssCap_Sig = 630;

const int OBJ_setAttr_IssCap_Sig = 2;

const String SN_setAttr_GenCryptgrm = 'setAttr-GenCryptgrm';

const String LN_setAttr_GenCryptgrm = 'generate cryptogram';

const int NID_setAttr_GenCryptgrm = 631;

const int OBJ_setAttr_GenCryptgrm = 2;

const String SN_setAttr_T2Enc = 'setAttr-T2Enc';

const String LN_setAttr_T2Enc = 'encrypted track 2';

const int NID_setAttr_T2Enc = 632;

const int OBJ_setAttr_T2Enc = 2;

const String SN_setAttr_T2cleartxt = 'setAttr-T2cleartxt';

const String LN_setAttr_T2cleartxt = 'cleartext track 2';

const int NID_setAttr_T2cleartxt = 633;

const int OBJ_setAttr_T2cleartxt = 2;

const String SN_setAttr_TokICCsig = 'setAttr-TokICCsig';

const String LN_setAttr_TokICCsig = 'ICC or token signature';

const int NID_setAttr_TokICCsig = 634;

const int OBJ_setAttr_TokICCsig = 2;

const String SN_setAttr_SecDevSig = 'setAttr-SecDevSig';

const String LN_setAttr_SecDevSig = 'secure device signature';

const int NID_setAttr_SecDevSig = 635;

const int OBJ_setAttr_SecDevSig = 2;

const String SN_set_brand_IATA_ATA = 'set-brand-IATA-ATA';

const int NID_set_brand_IATA_ATA = 636;

const int OBJ_set_brand_IATA_ATA = 2;

const String SN_set_brand_Diners = 'set-brand-Diners';

const int NID_set_brand_Diners = 637;

const int OBJ_set_brand_Diners = 2;

const String SN_set_brand_AmericanExpress = 'set-brand-AmericanExpress';

const int NID_set_brand_AmericanExpress = 638;

const int OBJ_set_brand_AmericanExpress = 2;

const String SN_set_brand_JCB = 'set-brand-JCB';

const int NID_set_brand_JCB = 639;

const int OBJ_set_brand_JCB = 2;

const String SN_set_brand_Visa = 'set-brand-Visa';

const int NID_set_brand_Visa = 640;

const int OBJ_set_brand_Visa = 2;

const String SN_set_brand_MasterCard = 'set-brand-MasterCard';

const int NID_set_brand_MasterCard = 641;

const int OBJ_set_brand_MasterCard = 2;

const String SN_set_brand_Novus = 'set-brand-Novus';

const int NID_set_brand_Novus = 642;

const int OBJ_set_brand_Novus = 2;

const String SN_des_cdmf = 'DES-CDMF';

const String LN_des_cdmf = 'des-cdmf';

const int NID_des_cdmf = 643;

const int OBJ_des_cdmf = 1;

const String SN_rsaOAEPEncryptionSET = 'rsaOAEPEncryptionSET';

const int NID_rsaOAEPEncryptionSET = 644;

const int OBJ_rsaOAEPEncryptionSET = 1;

const String SN_ipsec3 = 'Oakley-EC2N-3';

const String LN_ipsec3 = 'ipsec3';

const int NID_ipsec3 = 749;

const String SN_ipsec4 = 'Oakley-EC2N-4';

const String LN_ipsec4 = 'ipsec4';

const int NID_ipsec4 = 750;

const String SN_whirlpool = 'whirlpool';

const int NID_whirlpool = 804;

const int OBJ_whirlpool = 1;

const String SN_cryptopro = 'cryptopro';

const int NID_cryptopro = 805;

const int OBJ_cryptopro = 1;

const String SN_cryptocom = 'cryptocom';

const int NID_cryptocom = 806;

const int OBJ_cryptocom = 1;

const String SN_id_tc26 = 'id-tc26';

const int NID_id_tc26 = 974;

const int OBJ_id_tc26 = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001 =
    'id-GostR3411-94-with-GostR3410-2001';

const String LN_id_GostR3411_94_with_GostR3410_2001 =
    'GOST R 34.11-94 with GOST R 34.10-2001';

const int NID_id_GostR3411_94_with_GostR3410_2001 = 807;

const int OBJ_id_GostR3411_94_with_GostR3410_2001 = 1;

const String SN_id_GostR3411_94_with_GostR3410_94 =
    'id-GostR3411-94-with-GostR3410-94';

const String LN_id_GostR3411_94_with_GostR3410_94 =
    'GOST R 34.11-94 with GOST R 34.10-94';

const int NID_id_GostR3411_94_with_GostR3410_94 = 808;

const int OBJ_id_GostR3411_94_with_GostR3410_94 = 1;

const String SN_id_GostR3411_94 = 'md_gost94';

const String LN_id_GostR3411_94 = 'GOST R 34.11-94';

const int NID_id_GostR3411_94 = 809;

const int OBJ_id_GostR3411_94 = 1;

const String SN_id_HMACGostR3411_94 = 'id-HMACGostR3411-94';

const String LN_id_HMACGostR3411_94 = 'HMAC GOST 34.11-94';

const int NID_id_HMACGostR3411_94 = 810;

const int OBJ_id_HMACGostR3411_94 = 1;

const String SN_id_GostR3410_2001 = 'gost2001';

const String LN_id_GostR3410_2001 = 'GOST R 34.10-2001';

const int NID_id_GostR3410_2001 = 811;

const int OBJ_id_GostR3410_2001 = 1;

const String SN_id_GostR3410_94 = 'gost94';

const String LN_id_GostR3410_94 = 'GOST R 34.10-94';

const int NID_id_GostR3410_94 = 812;

const int OBJ_id_GostR3410_94 = 1;

const String SN_id_Gost28147_89 = 'gost89';

const String LN_id_Gost28147_89 = 'GOST 28147-89';

const int NID_id_Gost28147_89 = 813;

const int OBJ_id_Gost28147_89 = 1;

const String SN_gost89_cnt = 'gost89-cnt';

const int NID_gost89_cnt = 814;

const String SN_gost89_cnt_12 = 'gost89-cnt-12';

const int NID_gost89_cnt_12 = 975;

const String SN_gost89_cbc = 'gost89-cbc';

const int NID_gost89_cbc = 1009;

const String SN_gost89_ecb = 'gost89-ecb';

const int NID_gost89_ecb = 1010;

const String SN_gost89_ctr = 'gost89-ctr';

const int NID_gost89_ctr = 1011;

const String SN_id_Gost28147_89_MAC = 'gost-mac';

const String LN_id_Gost28147_89_MAC = 'GOST 28147-89 MAC';

const int NID_id_Gost28147_89_MAC = 815;

const int OBJ_id_Gost28147_89_MAC = 1;

const String SN_gost_mac_12 = 'gost-mac-12';

const int NID_gost_mac_12 = 976;

const String SN_id_GostR3411_94_prf = 'prf-gostr3411-94';

const String LN_id_GostR3411_94_prf = 'GOST R 34.11-94 PRF';

const int NID_id_GostR3411_94_prf = 816;

const int OBJ_id_GostR3411_94_prf = 1;

const String SN_id_GostR3410_2001DH = 'id-GostR3410-2001DH';

const String LN_id_GostR3410_2001DH = 'GOST R 34.10-2001 DH';

const int NID_id_GostR3410_2001DH = 817;

const int OBJ_id_GostR3410_2001DH = 1;

const String SN_id_GostR3410_94DH = 'id-GostR3410-94DH';

const String LN_id_GostR3410_94DH = 'GOST R 34.10-94 DH';

const int NID_id_GostR3410_94DH = 818;

const int OBJ_id_GostR3410_94DH = 1;

const String SN_id_Gost28147_89_CryptoPro_KeyMeshing =
    'id-Gost28147-89-CryptoPro-KeyMeshing';

const int NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;

const int OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = 1;

const String SN_id_Gost28147_89_None_KeyMeshing =
    'id-Gost28147-89-None-KeyMeshing';

const int NID_id_Gost28147_89_None_KeyMeshing = 820;

const int OBJ_id_Gost28147_89_None_KeyMeshing = 1;

const String SN_id_GostR3411_94_TestParamSet = 'id-GostR3411-94-TestParamSet';

const int NID_id_GostR3411_94_TestParamSet = 821;

const int OBJ_id_GostR3411_94_TestParamSet = 1;

const String SN_id_GostR3411_94_CryptoProParamSet =
    'id-GostR3411-94-CryptoProParamSet';

const int NID_id_GostR3411_94_CryptoProParamSet = 822;

const int OBJ_id_GostR3411_94_CryptoProParamSet = 1;

const String SN_id_Gost28147_89_TestParamSet = 'id-Gost28147-89-TestParamSet';

const int NID_id_Gost28147_89_TestParamSet = 823;

const int OBJ_id_Gost28147_89_TestParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_A_ParamSet =
    'id-Gost28147-89-CryptoPro-A-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;

const int OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_B_ParamSet =
    'id-Gost28147-89-CryptoPro-B-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;

const int OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_C_ParamSet =
    'id-Gost28147-89-CryptoPro-C-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;

const int OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_D_ParamSet =
    'id-Gost28147-89-CryptoPro-D-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;

const int OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet =
    'id-Gost28147-89-CryptoPro-RIC-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;

const int OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 1;

const String SN_id_GostR3410_94_TestParamSet = 'id-GostR3410-94-TestParamSet';

const int NID_id_GostR3410_94_TestParamSet = 831;

const int OBJ_id_GostR3410_94_TestParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_A_ParamSet =
    'id-GostR3410-94-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;

const int OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_B_ParamSet =
    'id-GostR3410-94-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;

const int OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_C_ParamSet =
    'id-GostR3410-94-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;

const int OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_D_ParamSet =
    'id-GostR3410-94-CryptoPro-D-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;

const int OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchA_ParamSet =
    'id-GostR3410-94-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;

const int OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchB_ParamSet =
    'id-GostR3410-94-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;

const int OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchC_ParamSet =
    'id-GostR3410-94-CryptoPro-XchC-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;

const int OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = 1;

const String SN_id_GostR3410_2001_TestParamSet =
    'id-GostR3410-2001-TestParamSet';

const int NID_id_GostR3410_2001_TestParamSet = 839;

const int OBJ_id_GostR3410_2001_TestParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_A_ParamSet =
    'id-GostR3410-2001-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;

const int OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_B_ParamSet =
    'id-GostR3410-2001-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;

const int OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_C_ParamSet =
    'id-GostR3410-2001-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;

const int OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;

const int OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;

const int OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_a = 'id-GostR3410-94-a';

const int NID_id_GostR3410_94_a = 845;

const int OBJ_id_GostR3410_94_a = 1;

const String SN_id_GostR3410_94_aBis = 'id-GostR3410-94-aBis';

const int NID_id_GostR3410_94_aBis = 846;

const int OBJ_id_GostR3410_94_aBis = 1;

const String SN_id_GostR3410_94_b = 'id-GostR3410-94-b';

const int NID_id_GostR3410_94_b = 847;

const int OBJ_id_GostR3410_94_b = 1;

const String SN_id_GostR3410_94_bBis = 'id-GostR3410-94-bBis';

const int NID_id_GostR3410_94_bBis = 848;

const int OBJ_id_GostR3410_94_bBis = 1;

const String SN_id_Gost28147_89_cc = 'id-Gost28147-89-cc';

const String LN_id_Gost28147_89_cc = 'GOST 28147-89 Cryptocom ParamSet';

const int NID_id_Gost28147_89_cc = 849;

const int OBJ_id_Gost28147_89_cc = 1;

const String SN_id_GostR3410_94_cc = 'gost94cc';

const String LN_id_GostR3410_94_cc = 'GOST 34.10-94 Cryptocom';

const int NID_id_GostR3410_94_cc = 850;

const int OBJ_id_GostR3410_94_cc = 1;

const String SN_id_GostR3410_2001_cc = 'gost2001cc';

const String LN_id_GostR3410_2001_cc = 'GOST 34.10-2001 Cryptocom';

const int NID_id_GostR3410_2001_cc = 851;

const int OBJ_id_GostR3410_2001_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_94_cc =
    'id-GostR3411-94-with-GostR3410-94-cc';

const String LN_id_GostR3411_94_with_GostR3410_94_cc =
    'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_94_cc = 852;

const int OBJ_id_GostR3411_94_with_GostR3410_94_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001_cc =
    'id-GostR3411-94-with-GostR3410-2001-cc';

const String LN_id_GostR3411_94_with_GostR3410_2001_cc =
    'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;

const int OBJ_id_GostR3411_94_with_GostR3410_2001_cc = 1;

const String SN_id_GostR3410_2001_ParamSet_cc = 'id-GostR3410-2001-ParamSet-cc';

const String LN_id_GostR3410_2001_ParamSet_cc =
    'GOST R 3410-2001 Parameter Set Cryptocom';

const int NID_id_GostR3410_2001_ParamSet_cc = 854;

const int OBJ_id_GostR3410_2001_ParamSet_cc = 1;

const String SN_id_tc26_algorithms = 'id-tc26-algorithms';

const int NID_id_tc26_algorithms = 977;

const int OBJ_id_tc26_algorithms = 1;

const String SN_id_tc26_sign = 'id-tc26-sign';

const int NID_id_tc26_sign = 978;

const int OBJ_id_tc26_sign = 1;

const String SN_id_GostR3410_2012_256 = 'gost2012_256';

const String LN_id_GostR3410_2012_256 =
    'GOST R 34.10-2012 with 256 bit modulus';

const int NID_id_GostR3410_2012_256 = 979;

const int OBJ_id_GostR3410_2012_256 = 1;

const String SN_id_GostR3410_2012_512 = 'gost2012_512';

const String LN_id_GostR3410_2012_512 =
    'GOST R 34.10-2012 with 512 bit modulus';

const int NID_id_GostR3410_2012_512 = 980;

const int OBJ_id_GostR3410_2012_512 = 1;

const String SN_id_tc26_digest = 'id-tc26-digest';

const int NID_id_tc26_digest = 981;

const int OBJ_id_tc26_digest = 1;

const String SN_id_GostR3411_2012_256 = 'md_gost12_256';

const String LN_id_GostR3411_2012_256 = 'GOST R 34.11-2012 with 256 bit hash';

const int NID_id_GostR3411_2012_256 = 982;

const int OBJ_id_GostR3411_2012_256 = 1;

const String SN_id_GostR3411_2012_512 = 'md_gost12_512';

const String LN_id_GostR3411_2012_512 = 'GOST R 34.11-2012 with 512 bit hash';

const int NID_id_GostR3411_2012_512 = 983;

const int OBJ_id_GostR3411_2012_512 = 1;

const String SN_id_tc26_signwithdigest = 'id-tc26-signwithdigest';

const int NID_id_tc26_signwithdigest = 984;

const int OBJ_id_tc26_signwithdigest = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_256 =
    'id-tc26-signwithdigest-gost3410-2012-256';

const String LN_id_tc26_signwithdigest_gost3410_2012_256 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_256 = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_512 =
    'id-tc26-signwithdigest-gost3410-2012-512';

const String LN_id_tc26_signwithdigest_gost3410_2012_512 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_512 = 1;

const String SN_id_tc26_mac = 'id-tc26-mac';

const int NID_id_tc26_mac = 987;

const int OBJ_id_tc26_mac = 1;

const String SN_id_tc26_hmac_gost_3411_2012_256 =
    'id-tc26-hmac-gost-3411-2012-256';

const String LN_id_tc26_hmac_gost_3411_2012_256 =
    'HMAC GOST 34.11-2012 256 bit';

const int NID_id_tc26_hmac_gost_3411_2012_256 = 988;

const int OBJ_id_tc26_hmac_gost_3411_2012_256 = 1;

const String SN_id_tc26_hmac_gost_3411_2012_512 =
    'id-tc26-hmac-gost-3411-2012-512';

const String LN_id_tc26_hmac_gost_3411_2012_512 =
    'HMAC GOST 34.11-2012 512 bit';

const int NID_id_tc26_hmac_gost_3411_2012_512 = 989;

const int OBJ_id_tc26_hmac_gost_3411_2012_512 = 1;

const String SN_id_tc26_cipher = 'id-tc26-cipher';

const int NID_id_tc26_cipher = 990;

const int OBJ_id_tc26_cipher = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma =
    'id-tc26-cipher-gostr3412-2015-magma';

const int NID_id_tc26_cipher_gostr3412_2015_magma = 1173;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma = 1;

const String SN_magma_ctr_acpkm = 'magma-ctr-acpkm';

const int NID_magma_ctr_acpkm = 1174;

const int OBJ_magma_ctr_acpkm = 1;

const String SN_magma_ctr_acpkm_omac = 'magma-ctr-acpkm-omac';

const int NID_magma_ctr_acpkm_omac = 1175;

const int OBJ_magma_ctr_acpkm_omac = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik =
    'id-tc26-cipher-gostr3412-2015-kuznyechik';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = 1;

const String SN_kuznyechik_ctr_acpkm = 'kuznyechik-ctr-acpkm';

const int NID_kuznyechik_ctr_acpkm = 1177;

const int OBJ_kuznyechik_ctr_acpkm = 1;

const String SN_kuznyechik_ctr_acpkm_omac = 'kuznyechik-ctr-acpkm-omac';

const int NID_kuznyechik_ctr_acpkm_omac = 1178;

const int OBJ_kuznyechik_ctr_acpkm_omac = 1;

const String SN_id_tc26_agreement = 'id-tc26-agreement';

const int NID_id_tc26_agreement = 991;

const int OBJ_id_tc26_agreement = 1;

const String SN_id_tc26_agreement_gost_3410_2012_256 =
    'id-tc26-agreement-gost-3410-2012-256';

const int NID_id_tc26_agreement_gost_3410_2012_256 = 992;

const int OBJ_id_tc26_agreement_gost_3410_2012_256 = 1;

const String SN_id_tc26_agreement_gost_3410_2012_512 =
    'id-tc26-agreement-gost-3410-2012-512';

const int NID_id_tc26_agreement_gost_3410_2012_512 = 993;

const int OBJ_id_tc26_agreement_gost_3410_2012_512 = 1;

const String SN_id_tc26_wrap = 'id-tc26-wrap';

const int NID_id_tc26_wrap = 1179;

const int OBJ_id_tc26_wrap = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma =
    'id-tc26-wrap-gostr3412-2015-magma';

const int NID_id_tc26_wrap_gostr3412_2015_magma = 1180;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma = 1;

const String SN_magma_kexp15 = 'magma-kexp15';

const int NID_magma_kexp15 = 1181;

const int OBJ_magma_kexp15 = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik =
    'id-tc26-wrap-gostr3412-2015-kuznyechik';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = 1;

const String SN_kuznyechik_kexp15 = 'kuznyechik-kexp15';

const int NID_kuznyechik_kexp15 = 1183;

const int OBJ_kuznyechik_kexp15 = 1;

const String SN_id_tc26_constants = 'id-tc26-constants';

const int NID_id_tc26_constants = 994;

const int OBJ_id_tc26_constants = 1;

const String SN_id_tc26_sign_constants = 'id-tc26-sign-constants';

const int NID_id_tc26_sign_constants = 995;

const int OBJ_id_tc26_sign_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_constants =
    'id-tc26-gost-3410-2012-256-constants';

const int NID_id_tc26_gost_3410_2012_256_constants = 1147;

const int OBJ_id_tc26_gost_3410_2012_256_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetA =
    'id-tc26-gost-3410-2012-256-paramSetA';

const String LN_id_tc26_gost_3410_2012_256_paramSetA =
    'GOST R 34.10-2012 (256 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetB =
    'id-tc26-gost-3410-2012-256-paramSetB';

const String LN_id_tc26_gost_3410_2012_256_paramSetB =
    'GOST R 34.10-2012 (256 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetC =
    'id-tc26-gost-3410-2012-256-paramSetC';

const String LN_id_tc26_gost_3410_2012_256_paramSetC =
    'GOST R 34.10-2012 (256 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetC = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetD =
    'id-tc26-gost-3410-2012-256-paramSetD';

const String LN_id_tc26_gost_3410_2012_256_paramSetD =
    'GOST R 34.10-2012 (256 bit) ParamSet D';

const int NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetD = 1;

const String SN_id_tc26_gost_3410_2012_512_constants =
    'id-tc26-gost-3410-2012-512-constants';

const int NID_id_tc26_gost_3410_2012_512_constants = 996;

const int OBJ_id_tc26_gost_3410_2012_512_constants = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetTest =
    'id-tc26-gost-3410-2012-512-paramSetTest';

const String LN_id_tc26_gost_3410_2012_512_paramSetTest =
    'GOST R 34.10-2012 (512 bit) testing parameter set';

const int NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetTest = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetA =
    'id-tc26-gost-3410-2012-512-paramSetA';

const String LN_id_tc26_gost_3410_2012_512_paramSetA =
    'GOST R 34.10-2012 (512 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_512_paramSetA = 998;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetB =
    'id-tc26-gost-3410-2012-512-paramSetB';

const String LN_id_tc26_gost_3410_2012_512_paramSetB =
    'GOST R 34.10-2012 (512 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_512_paramSetB = 999;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetC =
    'id-tc26-gost-3410-2012-512-paramSetC';

const String LN_id_tc26_gost_3410_2012_512_paramSetC =
    'GOST R 34.10-2012 (512 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetC = 1;

const String SN_id_tc26_digest_constants = 'id-tc26-digest-constants';

const int NID_id_tc26_digest_constants = 1000;

const int OBJ_id_tc26_digest_constants = 1;

const String SN_id_tc26_cipher_constants = 'id-tc26-cipher-constants';

const int NID_id_tc26_cipher_constants = 1001;

const int OBJ_id_tc26_cipher_constants = 1;

const String SN_id_tc26_gost_28147_constants = 'id-tc26-gost-28147-constants';

const int NID_id_tc26_gost_28147_constants = 1002;

const int OBJ_id_tc26_gost_28147_constants = 1;

const String SN_id_tc26_gost_28147_param_Z = 'id-tc26-gost-28147-param-Z';

const String LN_id_tc26_gost_28147_param_Z = 'GOST 28147-89 TC26 parameter set';

const int NID_id_tc26_gost_28147_param_Z = 1003;

const int OBJ_id_tc26_gost_28147_param_Z = 1;

const String SN_INN = 'INN';

const String LN_INN = 'INN';

const int NID_INN = 1004;

const int OBJ_INN = 1;

const String SN_OGRN = 'OGRN';

const String LN_OGRN = 'OGRN';

const int NID_OGRN = 1005;

const int OBJ_OGRN = 1;

const String SN_SNILS = 'SNILS';

const String LN_SNILS = 'SNILS';

const int NID_SNILS = 1006;

const int OBJ_SNILS = 1;

const String SN_OGRNIP = 'OGRNIP';

const String LN_OGRNIP = 'OGRNIP';

const int NID_OGRNIP = 1226;

const int OBJ_OGRNIP = 1;

const String SN_subjectSignTool = 'subjectSignTool';

const String LN_subjectSignTool = 'Signing Tool of Subject';

const int NID_subjectSignTool = 1007;

const int OBJ_subjectSignTool = 1;

const String SN_issuerSignTool = 'issuerSignTool';

const String LN_issuerSignTool = 'Signing Tool of Issuer';

const int NID_issuerSignTool = 1008;

const int OBJ_issuerSignTool = 1;

const String SN_classSignTool = 'classSignTool';

const String LN_classSignTool = 'Class of Signing Tool';

const int NID_classSignTool = 1227;

const int OBJ_classSignTool = 1;

const String SN_classSignToolKC1 = 'classSignToolKC1';

const String LN_classSignToolKC1 = 'Class of Signing Tool KC1';

const int NID_classSignToolKC1 = 1228;

const int OBJ_classSignToolKC1 = 1;

const String SN_classSignToolKC2 = 'classSignToolKC2';

const String LN_classSignToolKC2 = 'Class of Signing Tool KC2';

const int NID_classSignToolKC2 = 1229;

const int OBJ_classSignToolKC2 = 1;

const String SN_classSignToolKC3 = 'classSignToolKC3';

const String LN_classSignToolKC3 = 'Class of Signing Tool KC3';

const int NID_classSignToolKC3 = 1230;

const int OBJ_classSignToolKC3 = 1;

const String SN_classSignToolKB1 = 'classSignToolKB1';

const String LN_classSignToolKB1 = 'Class of Signing Tool KB1';

const int NID_classSignToolKB1 = 1231;

const int OBJ_classSignToolKB1 = 1;

const String SN_classSignToolKB2 = 'classSignToolKB2';

const String LN_classSignToolKB2 = 'Class of Signing Tool KB2';

const int NID_classSignToolKB2 = 1232;

const int OBJ_classSignToolKB2 = 1;

const String SN_classSignToolKA1 = 'classSignToolKA1';

const String LN_classSignToolKA1 = 'Class of Signing Tool KA1';

const int NID_classSignToolKA1 = 1233;

const int OBJ_classSignToolKA1 = 1;

const String SN_kuznyechik_ecb = 'kuznyechik-ecb';

const int NID_kuznyechik_ecb = 1012;

const String SN_kuznyechik_ctr = 'kuznyechik-ctr';

const int NID_kuznyechik_ctr = 1013;

const String SN_kuznyechik_ofb = 'kuznyechik-ofb';

const int NID_kuznyechik_ofb = 1014;

const String SN_kuznyechik_cbc = 'kuznyechik-cbc';

const int NID_kuznyechik_cbc = 1015;

const String SN_kuznyechik_cfb = 'kuznyechik-cfb';

const int NID_kuznyechik_cfb = 1016;

const String SN_kuznyechik_mac = 'kuznyechik-mac';

const int NID_kuznyechik_mac = 1017;

const String SN_magma_ecb = 'magma-ecb';

const int NID_magma_ecb = 1187;

const String SN_magma_ctr = 'magma-ctr';

const int NID_magma_ctr = 1188;

const String SN_magma_ofb = 'magma-ofb';

const int NID_magma_ofb = 1189;

const String SN_magma_cbc = 'magma-cbc';

const int NID_magma_cbc = 1190;

const String SN_magma_cfb = 'magma-cfb';

const int NID_magma_cfb = 1191;

const String SN_magma_mac = 'magma-mac';

const int NID_magma_mac = 1192;

const String SN_camellia_128_cbc = 'CAMELLIA-128-CBC';

const String LN_camellia_128_cbc = 'camellia-128-cbc';

const int NID_camellia_128_cbc = 751;

const int OBJ_camellia_128_cbc = 1;

const String SN_camellia_192_cbc = 'CAMELLIA-192-CBC';

const String LN_camellia_192_cbc = 'camellia-192-cbc';

const int NID_camellia_192_cbc = 752;

const int OBJ_camellia_192_cbc = 1;

const String SN_camellia_256_cbc = 'CAMELLIA-256-CBC';

const String LN_camellia_256_cbc = 'camellia-256-cbc';

const int NID_camellia_256_cbc = 753;

const int OBJ_camellia_256_cbc = 1;

const String SN_id_camellia128_wrap = 'id-camellia128-wrap';

const int NID_id_camellia128_wrap = 907;

const int OBJ_id_camellia128_wrap = 1;

const String SN_id_camellia192_wrap = 'id-camellia192-wrap';

const int NID_id_camellia192_wrap = 908;

const int OBJ_id_camellia192_wrap = 1;

const String SN_id_camellia256_wrap = 'id-camellia256-wrap';

const int NID_id_camellia256_wrap = 909;

const int OBJ_id_camellia256_wrap = 1;

const int OBJ_ntt_ds = 0;

const int OBJ_camellia = 0;

const String SN_camellia_128_ecb = 'CAMELLIA-128-ECB';

const String LN_camellia_128_ecb = 'camellia-128-ecb';

const int NID_camellia_128_ecb = 754;

const int OBJ_camellia_128_ecb = 0;

const String SN_camellia_128_ofb128 = 'CAMELLIA-128-OFB';

const String LN_camellia_128_ofb128 = 'camellia-128-ofb';

const int NID_camellia_128_ofb128 = 766;

const int OBJ_camellia_128_ofb128 = 0;

const String SN_camellia_128_cfb128 = 'CAMELLIA-128-CFB';

const String LN_camellia_128_cfb128 = 'camellia-128-cfb';

const int NID_camellia_128_cfb128 = 757;

const int OBJ_camellia_128_cfb128 = 0;

const String SN_camellia_128_gcm = 'CAMELLIA-128-GCM';

const String LN_camellia_128_gcm = 'camellia-128-gcm';

const int NID_camellia_128_gcm = 961;

const int OBJ_camellia_128_gcm = 0;

const String SN_camellia_128_ccm = 'CAMELLIA-128-CCM';

const String LN_camellia_128_ccm = 'camellia-128-ccm';

const int NID_camellia_128_ccm = 962;

const int OBJ_camellia_128_ccm = 0;

const String SN_camellia_128_ctr = 'CAMELLIA-128-CTR';

const String LN_camellia_128_ctr = 'camellia-128-ctr';

const int NID_camellia_128_ctr = 963;

const int OBJ_camellia_128_ctr = 0;

const String SN_camellia_128_cmac = 'CAMELLIA-128-CMAC';

const String LN_camellia_128_cmac = 'camellia-128-cmac';

const int NID_camellia_128_cmac = 964;

const int OBJ_camellia_128_cmac = 0;

const String SN_camellia_192_ecb = 'CAMELLIA-192-ECB';

const String LN_camellia_192_ecb = 'camellia-192-ecb';

const int NID_camellia_192_ecb = 755;

const int OBJ_camellia_192_ecb = 0;

const String SN_camellia_192_ofb128 = 'CAMELLIA-192-OFB';

const String LN_camellia_192_ofb128 = 'camellia-192-ofb';

const int NID_camellia_192_ofb128 = 767;

const int OBJ_camellia_192_ofb128 = 0;

const String SN_camellia_192_cfb128 = 'CAMELLIA-192-CFB';

const String LN_camellia_192_cfb128 = 'camellia-192-cfb';

const int NID_camellia_192_cfb128 = 758;

const int OBJ_camellia_192_cfb128 = 0;

const String SN_camellia_192_gcm = 'CAMELLIA-192-GCM';

const String LN_camellia_192_gcm = 'camellia-192-gcm';

const int NID_camellia_192_gcm = 965;

const int OBJ_camellia_192_gcm = 0;

const String SN_camellia_192_ccm = 'CAMELLIA-192-CCM';

const String LN_camellia_192_ccm = 'camellia-192-ccm';

const int NID_camellia_192_ccm = 966;

const int OBJ_camellia_192_ccm = 0;

const String SN_camellia_192_ctr = 'CAMELLIA-192-CTR';

const String LN_camellia_192_ctr = 'camellia-192-ctr';

const int NID_camellia_192_ctr = 967;

const int OBJ_camellia_192_ctr = 0;

const String SN_camellia_192_cmac = 'CAMELLIA-192-CMAC';

const String LN_camellia_192_cmac = 'camellia-192-cmac';

const int NID_camellia_192_cmac = 968;

const int OBJ_camellia_192_cmac = 0;

const String SN_camellia_256_ecb = 'CAMELLIA-256-ECB';

const String LN_camellia_256_ecb = 'camellia-256-ecb';

const int NID_camellia_256_ecb = 756;

const int OBJ_camellia_256_ecb = 0;

const String SN_camellia_256_ofb128 = 'CAMELLIA-256-OFB';

const String LN_camellia_256_ofb128 = 'camellia-256-ofb';

const int NID_camellia_256_ofb128 = 768;

const int OBJ_camellia_256_ofb128 = 0;

const String SN_camellia_256_cfb128 = 'CAMELLIA-256-CFB';

const String LN_camellia_256_cfb128 = 'camellia-256-cfb';

const int NID_camellia_256_cfb128 = 759;

const int OBJ_camellia_256_cfb128 = 0;

const String SN_camellia_256_gcm = 'CAMELLIA-256-GCM';

const String LN_camellia_256_gcm = 'camellia-256-gcm';

const int NID_camellia_256_gcm = 969;

const int OBJ_camellia_256_gcm = 0;

const String SN_camellia_256_ccm = 'CAMELLIA-256-CCM';

const String LN_camellia_256_ccm = 'camellia-256-ccm';

const int NID_camellia_256_ccm = 970;

const int OBJ_camellia_256_ccm = 0;

const String SN_camellia_256_ctr = 'CAMELLIA-256-CTR';

const String LN_camellia_256_ctr = 'camellia-256-ctr';

const int NID_camellia_256_ctr = 971;

const int OBJ_camellia_256_ctr = 0;

const String SN_camellia_256_cmac = 'CAMELLIA-256-CMAC';

const String LN_camellia_256_cmac = 'camellia-256-cmac';

const int NID_camellia_256_cmac = 972;

const int OBJ_camellia_256_cmac = 0;

const String SN_camellia_128_cfb1 = 'CAMELLIA-128-CFB1';

const String LN_camellia_128_cfb1 = 'camellia-128-cfb1';

const int NID_camellia_128_cfb1 = 760;

const String SN_camellia_192_cfb1 = 'CAMELLIA-192-CFB1';

const String LN_camellia_192_cfb1 = 'camellia-192-cfb1';

const int NID_camellia_192_cfb1 = 761;

const String SN_camellia_256_cfb1 = 'CAMELLIA-256-CFB1';

const String LN_camellia_256_cfb1 = 'camellia-256-cfb1';

const int NID_camellia_256_cfb1 = 762;

const String SN_camellia_128_cfb8 = 'CAMELLIA-128-CFB8';

const String LN_camellia_128_cfb8 = 'camellia-128-cfb8';

const int NID_camellia_128_cfb8 = 763;

const String SN_camellia_192_cfb8 = 'CAMELLIA-192-CFB8';

const String LN_camellia_192_cfb8 = 'camellia-192-cfb8';

const int NID_camellia_192_cfb8 = 764;

const String SN_camellia_256_cfb8 = 'CAMELLIA-256-CFB8';

const String LN_camellia_256_cfb8 = 'camellia-256-cfb8';

const int NID_camellia_256_cfb8 = 765;

const int OBJ_aria = 1;

const String SN_aria_128_ecb = 'ARIA-128-ECB';

const String LN_aria_128_ecb = 'aria-128-ecb';

const int NID_aria_128_ecb = 1065;

const int OBJ_aria_128_ecb = 1;

const String SN_aria_128_cbc = 'ARIA-128-CBC';

const String LN_aria_128_cbc = 'aria-128-cbc';

const int NID_aria_128_cbc = 1066;

const int OBJ_aria_128_cbc = 1;

const String SN_aria_128_cfb128 = 'ARIA-128-CFB';

const String LN_aria_128_cfb128 = 'aria-128-cfb';

const int NID_aria_128_cfb128 = 1067;

const int OBJ_aria_128_cfb128 = 1;

const String SN_aria_128_ofb128 = 'ARIA-128-OFB';

const String LN_aria_128_ofb128 = 'aria-128-ofb';

const int NID_aria_128_ofb128 = 1068;

const int OBJ_aria_128_ofb128 = 1;

const String SN_aria_128_ctr = 'ARIA-128-CTR';

const String LN_aria_128_ctr = 'aria-128-ctr';

const int NID_aria_128_ctr = 1069;

const int OBJ_aria_128_ctr = 1;

const String SN_aria_192_ecb = 'ARIA-192-ECB';

const String LN_aria_192_ecb = 'aria-192-ecb';

const int NID_aria_192_ecb = 1070;

const int OBJ_aria_192_ecb = 1;

const String SN_aria_192_cbc = 'ARIA-192-CBC';

const String LN_aria_192_cbc = 'aria-192-cbc';

const int NID_aria_192_cbc = 1071;

const int OBJ_aria_192_cbc = 1;

const String SN_aria_192_cfb128 = 'ARIA-192-CFB';

const String LN_aria_192_cfb128 = 'aria-192-cfb';

const int NID_aria_192_cfb128 = 1072;

const int OBJ_aria_192_cfb128 = 1;

const String SN_aria_192_ofb128 = 'ARIA-192-OFB';

const String LN_aria_192_ofb128 = 'aria-192-ofb';

const int NID_aria_192_ofb128 = 1073;

const int OBJ_aria_192_ofb128 = 1;

const String SN_aria_192_ctr = 'ARIA-192-CTR';

const String LN_aria_192_ctr = 'aria-192-ctr';

const int NID_aria_192_ctr = 1074;

const int OBJ_aria_192_ctr = 1;

const String SN_aria_256_ecb = 'ARIA-256-ECB';

const String LN_aria_256_ecb = 'aria-256-ecb';

const int NID_aria_256_ecb = 1075;

const int OBJ_aria_256_ecb = 1;

const String SN_aria_256_cbc = 'ARIA-256-CBC';

const String LN_aria_256_cbc = 'aria-256-cbc';

const int NID_aria_256_cbc = 1076;

const int OBJ_aria_256_cbc = 1;

const String SN_aria_256_cfb128 = 'ARIA-256-CFB';

const String LN_aria_256_cfb128 = 'aria-256-cfb';

const int NID_aria_256_cfb128 = 1077;

const int OBJ_aria_256_cfb128 = 1;

const String SN_aria_256_ofb128 = 'ARIA-256-OFB';

const String LN_aria_256_ofb128 = 'aria-256-ofb';

const int NID_aria_256_ofb128 = 1078;

const int OBJ_aria_256_ofb128 = 1;

const String SN_aria_256_ctr = 'ARIA-256-CTR';

const String LN_aria_256_ctr = 'aria-256-ctr';

const int NID_aria_256_ctr = 1079;

const int OBJ_aria_256_ctr = 1;

const String SN_aria_128_cfb1 = 'ARIA-128-CFB1';

const String LN_aria_128_cfb1 = 'aria-128-cfb1';

const int NID_aria_128_cfb1 = 1080;

const String SN_aria_192_cfb1 = 'ARIA-192-CFB1';

const String LN_aria_192_cfb1 = 'aria-192-cfb1';

const int NID_aria_192_cfb1 = 1081;

const String SN_aria_256_cfb1 = 'ARIA-256-CFB1';

const String LN_aria_256_cfb1 = 'aria-256-cfb1';

const int NID_aria_256_cfb1 = 1082;

const String SN_aria_128_cfb8 = 'ARIA-128-CFB8';

const String LN_aria_128_cfb8 = 'aria-128-cfb8';

const int NID_aria_128_cfb8 = 1083;

const String SN_aria_192_cfb8 = 'ARIA-192-CFB8';

const String LN_aria_192_cfb8 = 'aria-192-cfb8';

const int NID_aria_192_cfb8 = 1084;

const String SN_aria_256_cfb8 = 'ARIA-256-CFB8';

const String LN_aria_256_cfb8 = 'aria-256-cfb8';

const int NID_aria_256_cfb8 = 1085;

const String SN_aria_128_ccm = 'ARIA-128-CCM';

const String LN_aria_128_ccm = 'aria-128-ccm';

const int NID_aria_128_ccm = 1120;

const int OBJ_aria_128_ccm = 1;

const String SN_aria_192_ccm = 'ARIA-192-CCM';

const String LN_aria_192_ccm = 'aria-192-ccm';

const int NID_aria_192_ccm = 1121;

const int OBJ_aria_192_ccm = 1;

const String SN_aria_256_ccm = 'ARIA-256-CCM';

const String LN_aria_256_ccm = 'aria-256-ccm';

const int NID_aria_256_ccm = 1122;

const int OBJ_aria_256_ccm = 1;

const String SN_aria_128_gcm = 'ARIA-128-GCM';

const String LN_aria_128_gcm = 'aria-128-gcm';

const int NID_aria_128_gcm = 1123;

const int OBJ_aria_128_gcm = 1;

const String SN_aria_192_gcm = 'ARIA-192-GCM';

const String LN_aria_192_gcm = 'aria-192-gcm';

const int NID_aria_192_gcm = 1124;

const int OBJ_aria_192_gcm = 1;

const String SN_aria_256_gcm = 'ARIA-256-GCM';

const String LN_aria_256_gcm = 'aria-256-gcm';

const int NID_aria_256_gcm = 1125;

const int OBJ_aria_256_gcm = 1;

const String SN_kisa = 'KISA';

const String LN_kisa = 'kisa';

const int NID_kisa = 773;

const int OBJ_kisa = 1;

const String SN_seed_ecb = 'SEED-ECB';

const String LN_seed_ecb = 'seed-ecb';

const int NID_seed_ecb = 776;

const int OBJ_seed_ecb = 1;

const String SN_seed_cbc = 'SEED-CBC';

const String LN_seed_cbc = 'seed-cbc';

const int NID_seed_cbc = 777;

const int OBJ_seed_cbc = 1;

const String SN_seed_cfb128 = 'SEED-CFB';

const String LN_seed_cfb128 = 'seed-cfb';

const int NID_seed_cfb128 = 779;

const int OBJ_seed_cfb128 = 1;

const String SN_seed_ofb128 = 'SEED-OFB';

const String LN_seed_ofb128 = 'seed-ofb';

const int NID_seed_ofb128 = 778;

const int OBJ_seed_ofb128 = 1;

const String SN_sm4_ecb = 'SM4-ECB';

const String LN_sm4_ecb = 'sm4-ecb';

const int NID_sm4_ecb = 1133;

const int OBJ_sm4_ecb = 1;

const String SN_sm4_cbc = 'SM4-CBC';

const String LN_sm4_cbc = 'sm4-cbc';

const int NID_sm4_cbc = 1134;

const int OBJ_sm4_cbc = 1;

const String SN_sm4_ofb128 = 'SM4-OFB';

const String LN_sm4_ofb128 = 'sm4-ofb';

const int NID_sm4_ofb128 = 1135;

const int OBJ_sm4_ofb128 = 1;

const String SN_sm4_cfb128 = 'SM4-CFB';

const String LN_sm4_cfb128 = 'sm4-cfb';

const int NID_sm4_cfb128 = 1137;

const int OBJ_sm4_cfb128 = 1;

const String SN_sm4_cfb1 = 'SM4-CFB1';

const String LN_sm4_cfb1 = 'sm4-cfb1';

const int NID_sm4_cfb1 = 1136;

const int OBJ_sm4_cfb1 = 1;

const String SN_sm4_cfb8 = 'SM4-CFB8';

const String LN_sm4_cfb8 = 'sm4-cfb8';

const int NID_sm4_cfb8 = 1138;

const int OBJ_sm4_cfb8 = 1;

const String SN_sm4_ctr = 'SM4-CTR';

const String LN_sm4_ctr = 'sm4-ctr';

const int NID_sm4_ctr = 1139;

const int OBJ_sm4_ctr = 1;

const String SN_sm4_gcm = 'SM4-GCM';

const String LN_sm4_gcm = 'sm4-gcm';

const int NID_sm4_gcm = 1248;

const int OBJ_sm4_gcm = 1;

const String SN_sm4_ccm = 'SM4-CCM';

const String LN_sm4_ccm = 'sm4-ccm';

const int NID_sm4_ccm = 1249;

const int OBJ_sm4_ccm = 1;

const String SN_sm4_xts = 'SM4-XTS';

const String LN_sm4_xts = 'sm4-xts';

const int NID_sm4_xts = 1290;

const int OBJ_sm4_xts = 1;

const String SN_hmac = 'HMAC';

const String LN_hmac = 'hmac';

const int NID_hmac = 855;

const String SN_cmac = 'CMAC';

const String LN_cmac = 'cmac';

const int NID_cmac = 894;

const String SN_rc4_hmac_md5 = 'RC4-HMAC-MD5';

const String LN_rc4_hmac_md5 = 'rc4-hmac-md5';

const int NID_rc4_hmac_md5 = 915;

const String SN_aes_128_cbc_hmac_sha1 = 'AES-128-CBC-HMAC-SHA1';

const String LN_aes_128_cbc_hmac_sha1 = 'aes-128-cbc-hmac-sha1';

const int NID_aes_128_cbc_hmac_sha1 = 916;

const String SN_aes_192_cbc_hmac_sha1 = 'AES-192-CBC-HMAC-SHA1';

const String LN_aes_192_cbc_hmac_sha1 = 'aes-192-cbc-hmac-sha1';

const int NID_aes_192_cbc_hmac_sha1 = 917;

const String SN_aes_256_cbc_hmac_sha1 = 'AES-256-CBC-HMAC-SHA1';

const String LN_aes_256_cbc_hmac_sha1 = 'aes-256-cbc-hmac-sha1';

const int NID_aes_256_cbc_hmac_sha1 = 918;

const String SN_aes_128_cbc_hmac_sha256 = 'AES-128-CBC-HMAC-SHA256';

const String LN_aes_128_cbc_hmac_sha256 = 'aes-128-cbc-hmac-sha256';

const int NID_aes_128_cbc_hmac_sha256 = 948;

const String SN_aes_192_cbc_hmac_sha256 = 'AES-192-CBC-HMAC-SHA256';

const String LN_aes_192_cbc_hmac_sha256 = 'aes-192-cbc-hmac-sha256';

const int NID_aes_192_cbc_hmac_sha256 = 949;

const String SN_aes_256_cbc_hmac_sha256 = 'AES-256-CBC-HMAC-SHA256';

const String LN_aes_256_cbc_hmac_sha256 = 'aes-256-cbc-hmac-sha256';

const int NID_aes_256_cbc_hmac_sha256 = 950;

const String SN_chacha20_poly1305 = 'ChaCha20-Poly1305';

const String LN_chacha20_poly1305 = 'chacha20-poly1305';

const int NID_chacha20_poly1305 = 1018;

const String SN_chacha20 = 'ChaCha20';

const String LN_chacha20 = 'chacha20';

const int NID_chacha20 = 1019;

const String SN_dhpublicnumber = 'dhpublicnumber';

const String LN_dhpublicnumber = 'X9.42 DH';

const int NID_dhpublicnumber = 920;

const int OBJ_dhpublicnumber = 1;

const String SN_brainpoolP160r1 = 'brainpoolP160r1';

const int NID_brainpoolP160r1 = 921;

const int OBJ_brainpoolP160r1 = 1;

const String SN_brainpoolP160t1 = 'brainpoolP160t1';

const int NID_brainpoolP160t1 = 922;

const int OBJ_brainpoolP160t1 = 1;

const String SN_brainpoolP192r1 = 'brainpoolP192r1';

const int NID_brainpoolP192r1 = 923;

const int OBJ_brainpoolP192r1 = 1;

const String SN_brainpoolP192t1 = 'brainpoolP192t1';

const int NID_brainpoolP192t1 = 924;

const int OBJ_brainpoolP192t1 = 1;

const String SN_brainpoolP224r1 = 'brainpoolP224r1';

const int NID_brainpoolP224r1 = 925;

const int OBJ_brainpoolP224r1 = 1;

const String SN_brainpoolP224t1 = 'brainpoolP224t1';

const int NID_brainpoolP224t1 = 926;

const int OBJ_brainpoolP224t1 = 1;

const String SN_brainpoolP256r1 = 'brainpoolP256r1';

const int NID_brainpoolP256r1 = 927;

const int OBJ_brainpoolP256r1 = 1;

const String SN_brainpoolP256r1tls13 = 'brainpoolP256r1tls13';

const int NID_brainpoolP256r1tls13 = 1285;

const String SN_brainpoolP256t1 = 'brainpoolP256t1';

const int NID_brainpoolP256t1 = 928;

const int OBJ_brainpoolP256t1 = 1;

const String SN_brainpoolP320r1 = 'brainpoolP320r1';

const int NID_brainpoolP320r1 = 929;

const int OBJ_brainpoolP320r1 = 1;

const String SN_brainpoolP320t1 = 'brainpoolP320t1';

const int NID_brainpoolP320t1 = 930;

const int OBJ_brainpoolP320t1 = 1;

const String SN_brainpoolP384r1 = 'brainpoolP384r1';

const int NID_brainpoolP384r1 = 931;

const int OBJ_brainpoolP384r1 = 1;

const String SN_brainpoolP384r1tls13 = 'brainpoolP384r1tls13';

const int NID_brainpoolP384r1tls13 = 1286;

const String SN_brainpoolP384t1 = 'brainpoolP384t1';

const int NID_brainpoolP384t1 = 932;

const int OBJ_brainpoolP384t1 = 1;

const String SN_brainpoolP512r1 = 'brainpoolP512r1';

const int NID_brainpoolP512r1 = 933;

const int OBJ_brainpoolP512r1 = 1;

const String SN_brainpoolP512r1tls13 = 'brainpoolP512r1tls13';

const int NID_brainpoolP512r1tls13 = 1287;

const String SN_brainpoolP512t1 = 'brainpoolP512t1';

const int NID_brainpoolP512t1 = 934;

const int OBJ_brainpoolP512t1 = 1;

const int OBJ_x9_63_scheme = 1;

const int OBJ_secg_scheme = 1;

const String SN_dhSinglePass_stdDH_sha1kdf_scheme =
    'dhSinglePass-stdDH-sha1kdf-scheme';

const int NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;

const int OBJ_dhSinglePass_stdDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha224kdf_scheme =
    'dhSinglePass-stdDH-sha224kdf-scheme';

const int NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;

const int OBJ_dhSinglePass_stdDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha256kdf_scheme =
    'dhSinglePass-stdDH-sha256kdf-scheme';

const int NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;

const int OBJ_dhSinglePass_stdDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha384kdf_scheme =
    'dhSinglePass-stdDH-sha384kdf-scheme';

const int NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;

const int OBJ_dhSinglePass_stdDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha512kdf_scheme =
    'dhSinglePass-stdDH-sha512kdf-scheme';

const int NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;

const int OBJ_dhSinglePass_stdDH_sha512kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha1kdf_scheme =
    'dhSinglePass-cofactorDH-sha1kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;

const int OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha224kdf_scheme =
    'dhSinglePass-cofactorDH-sha224kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;

const int OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha256kdf_scheme =
    'dhSinglePass-cofactorDH-sha256kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;

const int OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha384kdf_scheme =
    'dhSinglePass-cofactorDH-sha384kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;

const int OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha512kdf_scheme =
    'dhSinglePass-cofactorDH-sha512kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;

const int OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = 1;

const String SN_dh_std_kdf = 'dh-std-kdf';

const int NID_dh_std_kdf = 946;

const String SN_dh_cofactor_kdf = 'dh-cofactor-kdf';

const int NID_dh_cofactor_kdf = 947;

const String SN_ct_precert_scts = 'ct_precert_scts';

const String LN_ct_precert_scts = 'CT Precertificate SCTs';

const int NID_ct_precert_scts = 951;

const int OBJ_ct_precert_scts = 1;

const String SN_ct_precert_poison = 'ct_precert_poison';

const String LN_ct_precert_poison = 'CT Precertificate Poison';

const int NID_ct_precert_poison = 952;

const int OBJ_ct_precert_poison = 1;

const String SN_ct_precert_signer = 'ct_precert_signer';

const String LN_ct_precert_signer = 'CT Precertificate Signer';

const int NID_ct_precert_signer = 953;

const int OBJ_ct_precert_signer = 1;

const String SN_ct_cert_scts = 'ct_cert_scts';

const String LN_ct_cert_scts = 'CT Certificate SCTs';

const int NID_ct_cert_scts = 954;

const int OBJ_ct_cert_scts = 1;

const String SN_jurisdictionLocalityName = 'jurisdictionL';

const String LN_jurisdictionLocalityName = 'jurisdictionLocalityName';

const int NID_jurisdictionLocalityName = 955;

const int OBJ_jurisdictionLocalityName = 1;

const String SN_jurisdictionStateOrProvinceName = 'jurisdictionST';

const String LN_jurisdictionStateOrProvinceName =
    'jurisdictionStateOrProvinceName';

const int NID_jurisdictionStateOrProvinceName = 956;

const int OBJ_jurisdictionStateOrProvinceName = 1;

const String SN_jurisdictionCountryName = 'jurisdictionC';

const String LN_jurisdictionCountryName = 'jurisdictionCountryName';

const int NID_jurisdictionCountryName = 957;

const int OBJ_jurisdictionCountryName = 1;

const String SN_id_scrypt = 'id-scrypt';

const String LN_id_scrypt = 'scrypt';

const int NID_id_scrypt = 973;

const int OBJ_id_scrypt = 1;

const String SN_tls1_prf = 'TLS1-PRF';

const String LN_tls1_prf = 'tls1-prf';

const int NID_tls1_prf = 1021;

const String SN_hkdf = 'HKDF';

const String LN_hkdf = 'hkdf';

const int NID_hkdf = 1036;

const String SN_sshkdf = 'SSHKDF';

const String LN_sshkdf = 'sshkdf';

const int NID_sshkdf = 1203;

const String SN_sskdf = 'SSKDF';

const String LN_sskdf = 'sskdf';

const int NID_sskdf = 1205;

const String SN_x942kdf = 'X942KDF';

const String LN_x942kdf = 'x942kdf';

const int NID_x942kdf = 1207;

const String SN_x963kdf = 'X963KDF';

const String LN_x963kdf = 'x963kdf';

const int NID_x963kdf = 1206;

const String SN_id_pkinit = 'id-pkinit';

const int NID_id_pkinit = 1031;

const int OBJ_id_pkinit = 1;

const String SN_pkInitClientAuth = 'pkInitClientAuth';

const String LN_pkInitClientAuth = 'PKINIT Client Auth';

const int NID_pkInitClientAuth = 1032;

const int OBJ_pkInitClientAuth = 1;

const String SN_pkInitKDC = 'pkInitKDC';

const String LN_pkInitKDC = 'Signing KDC Response';

const int NID_pkInitKDC = 1033;

const int OBJ_pkInitKDC = 1;

const String SN_X25519 = 'X25519';

const int NID_X25519 = 1034;

const int OBJ_X25519 = 1;

const String SN_X448 = 'X448';

const int NID_X448 = 1035;

const int OBJ_X448 = 1;

const String SN_ED25519 = 'ED25519';

const int NID_ED25519 = 1087;

const int OBJ_ED25519 = 1;

const String SN_ED448 = 'ED448';

const int NID_ED448 = 1088;

const int OBJ_ED448 = 1;

const String SN_kx_rsa = 'KxRSA';

const String LN_kx_rsa = 'kx-rsa';

const int NID_kx_rsa = 1037;

const String SN_kx_ecdhe = 'KxECDHE';

const String LN_kx_ecdhe = 'kx-ecdhe';

const int NID_kx_ecdhe = 1038;

const String SN_kx_dhe = 'KxDHE';

const String LN_kx_dhe = 'kx-dhe';

const int NID_kx_dhe = 1039;

const String SN_kx_ecdhe_psk = 'KxECDHE-PSK';

const String LN_kx_ecdhe_psk = 'kx-ecdhe-psk';

const int NID_kx_ecdhe_psk = 1040;

const String SN_kx_dhe_psk = 'KxDHE-PSK';

const String LN_kx_dhe_psk = 'kx-dhe-psk';

const int NID_kx_dhe_psk = 1041;

const String SN_kx_rsa_psk = 'KxRSA_PSK';

const String LN_kx_rsa_psk = 'kx-rsa-psk';

const int NID_kx_rsa_psk = 1042;

const String SN_kx_psk = 'KxPSK';

const String LN_kx_psk = 'kx-psk';

const int NID_kx_psk = 1043;

const String SN_kx_srp = 'KxSRP';

const String LN_kx_srp = 'kx-srp';

const int NID_kx_srp = 1044;

const String SN_kx_gost = 'KxGOST';

const String LN_kx_gost = 'kx-gost';

const int NID_kx_gost = 1045;

const String SN_kx_gost18 = 'KxGOST18';

const String LN_kx_gost18 = 'kx-gost18';

const int NID_kx_gost18 = 1218;

const String SN_kx_any = 'KxANY';

const String LN_kx_any = 'kx-any';

const int NID_kx_any = 1063;

const String SN_auth_rsa = 'AuthRSA';

const String LN_auth_rsa = 'auth-rsa';

const int NID_auth_rsa = 1046;

const String SN_auth_ecdsa = 'AuthECDSA';

const String LN_auth_ecdsa = 'auth-ecdsa';

const int NID_auth_ecdsa = 1047;

const String SN_auth_psk = 'AuthPSK';

const String LN_auth_psk = 'auth-psk';

const int NID_auth_psk = 1048;

const String SN_auth_dss = 'AuthDSS';

const String LN_auth_dss = 'auth-dss';

const int NID_auth_dss = 1049;

const String SN_auth_gost01 = 'AuthGOST01';

const String LN_auth_gost01 = 'auth-gost01';

const int NID_auth_gost01 = 1050;

const String SN_auth_gost12 = 'AuthGOST12';

const String LN_auth_gost12 = 'auth-gost12';

const int NID_auth_gost12 = 1051;

const String SN_auth_srp = 'AuthSRP';

const String LN_auth_srp = 'auth-srp';

const int NID_auth_srp = 1052;

const String SN_auth_null = 'AuthNULL';

const String LN_auth_null = 'auth-null';

const int NID_auth_null = 1053;

const String SN_auth_any = 'AuthANY';

const String LN_auth_any = 'auth-any';

const int NID_auth_any = 1064;

const String SN_poly1305 = 'Poly1305';

const String LN_poly1305 = 'poly1305';

const int NID_poly1305 = 1061;

const String SN_siphash = 'SipHash';

const String LN_siphash = 'siphash';

const int NID_siphash = 1062;

const String SN_ffdhe2048 = 'ffdhe2048';

const int NID_ffdhe2048 = 1126;

const String SN_ffdhe3072 = 'ffdhe3072';

const int NID_ffdhe3072 = 1127;

const String SN_ffdhe4096 = 'ffdhe4096';

const int NID_ffdhe4096 = 1128;

const String SN_ffdhe6144 = 'ffdhe6144';

const int NID_ffdhe6144 = 1129;

const String SN_ffdhe8192 = 'ffdhe8192';

const int NID_ffdhe8192 = 1130;

const String SN_modp_1536 = 'modp_1536';

const int NID_modp_1536 = 1212;

const String SN_modp_2048 = 'modp_2048';

const int NID_modp_2048 = 1213;

const String SN_modp_3072 = 'modp_3072';

const int NID_modp_3072 = 1214;

const String SN_modp_4096 = 'modp_4096';

const int NID_modp_4096 = 1215;

const String SN_modp_6144 = 'modp_6144';

const int NID_modp_6144 = 1216;

const String SN_modp_8192 = 'modp_8192';

const int NID_modp_8192 = 1217;

const String SN_ISO_UA = 'ISO-UA';

const int NID_ISO_UA = 1150;

const int OBJ_ISO_UA = 1;

const String SN_ua_pki = 'ua-pki';

const int NID_ua_pki = 1151;

const int OBJ_ua_pki = 1;

const String SN_dstu28147 = 'dstu28147';

const String LN_dstu28147 = 'DSTU Gost 28147-2009';

const int NID_dstu28147 = 1152;

const int OBJ_dstu28147 = 1;

const String SN_dstu28147_ofb = 'dstu28147-ofb';

const String LN_dstu28147_ofb = 'DSTU Gost 28147-2009 OFB mode';

const int NID_dstu28147_ofb = 1153;

const int OBJ_dstu28147_ofb = 1;

const String SN_dstu28147_cfb = 'dstu28147-cfb';

const String LN_dstu28147_cfb = 'DSTU Gost 28147-2009 CFB mode';

const int NID_dstu28147_cfb = 1154;

const int OBJ_dstu28147_cfb = 1;

const String SN_dstu28147_wrap = 'dstu28147-wrap';

const String LN_dstu28147_wrap = 'DSTU Gost 28147-2009 key wrap';

const int NID_dstu28147_wrap = 1155;

const int OBJ_dstu28147_wrap = 1;

const String SN_hmacWithDstu34311 = 'hmacWithDstu34311';

const String LN_hmacWithDstu34311 = 'HMAC DSTU Gost 34311-95';

const int NID_hmacWithDstu34311 = 1156;

const int OBJ_hmacWithDstu34311 = 1;

const String SN_dstu34311 = 'dstu34311';

const String LN_dstu34311 = 'DSTU Gost 34311-95';

const int NID_dstu34311 = 1157;

const int OBJ_dstu34311 = 1;

const String SN_dstu4145le = 'dstu4145le';

const String LN_dstu4145le = 'DSTU 4145-2002 little endian';

const int NID_dstu4145le = 1158;

const int OBJ_dstu4145le = 1;

const String SN_dstu4145be = 'dstu4145be';

const String LN_dstu4145be = 'DSTU 4145-2002 big endian';

const int NID_dstu4145be = 1159;

const int OBJ_dstu4145be = 1;

const String SN_uacurve0 = 'uacurve0';

const String LN_uacurve0 = 'DSTU curve 0';

const int NID_uacurve0 = 1160;

const int OBJ_uacurve0 = 1;

const String SN_uacurve1 = 'uacurve1';

const String LN_uacurve1 = 'DSTU curve 1';

const int NID_uacurve1 = 1161;

const int OBJ_uacurve1 = 1;

const String SN_uacurve2 = 'uacurve2';

const String LN_uacurve2 = 'DSTU curve 2';

const int NID_uacurve2 = 1162;

const int OBJ_uacurve2 = 1;

const String SN_uacurve3 = 'uacurve3';

const String LN_uacurve3 = 'DSTU curve 3';

const int NID_uacurve3 = 1163;

const int OBJ_uacurve3 = 1;

const String SN_uacurve4 = 'uacurve4';

const String LN_uacurve4 = 'DSTU curve 4';

const int NID_uacurve4 = 1164;

const int OBJ_uacurve4 = 1;

const String SN_uacurve5 = 'uacurve5';

const String LN_uacurve5 = 'DSTU curve 5';

const int NID_uacurve5 = 1165;

const int OBJ_uacurve5 = 1;

const String SN_uacurve6 = 'uacurve6';

const String LN_uacurve6 = 'DSTU curve 6';

const int NID_uacurve6 = 1166;

const int OBJ_uacurve6 = 1;

const String SN_uacurve7 = 'uacurve7';

const String LN_uacurve7 = 'DSTU curve 7';

const int NID_uacurve7 = 1167;

const int OBJ_uacurve7 = 1;

const String SN_uacurve8 = 'uacurve8';

const String LN_uacurve8 = 'DSTU curve 8';

const int NID_uacurve8 = 1168;

const int OBJ_uacurve8 = 1;

const String SN_uacurve9 = 'uacurve9';

const String LN_uacurve9 = 'DSTU curve 9';

const int NID_uacurve9 = 1169;

const int OBJ_uacurve9 = 1;

const String SN_aes_128_siv = 'AES-128-SIV';

const String LN_aes_128_siv = 'aes-128-siv';

const int NID_aes_128_siv = 1198;

const String SN_aes_192_siv = 'AES-192-SIV';

const String LN_aes_192_siv = 'aes-192-siv';

const int NID_aes_192_siv = 1199;

const String SN_aes_256_siv = 'AES-256-SIV';

const String LN_aes_256_siv = 'aes-256-siv';

const int NID_aes_256_siv = 1200;

const String SN_oracle = 'oracle-organization';

const String LN_oracle = 'Oracle organization';

const int NID_oracle = 1282;

const int OBJ_oracle = 2;

const String SN_oracle_jdk_trustedkeyusage = 'oracle-jdk-trustedkeyusage';

const String LN_oracle_jdk_trustedkeyusage = 'Trusted key usage (Oracle)';

const int NID_oracle_jdk_trustedkeyusage = 1283;

const int OBJ_oracle_jdk_trustedkeyusage = 2;

const String SN_brotli = 'brotli';

const String LN_brotli = 'Brotli compression';

const int NID_brotli = 1288;

const String SN_zstd = 'zstd';

const String LN_zstd = 'Zstandard compression';

const int NID_zstd = 1289;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm =
    'magma-ctr-acpkm';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac =
    'magma-ctr-acpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm =
    'kuznyechik-ctr-acpkm';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac =
    'kuznyechik-ctr-acpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 'magma-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 =
    'kuznyechik-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1;

const String SN_grasshopper_ecb = 'kuznyechik-ecb';

const int NID_grasshopper_ecb = 1012;

const String SN_grasshopper_ctr = 'kuznyechik-ctr';

const int NID_grasshopper_ctr = 1013;

const String SN_grasshopper_ofb = 'kuznyechik-ofb';

const int NID_grasshopper_ofb = 1014;

const String SN_grasshopper_cbc = 'kuznyechik-cbc';

const int NID_grasshopper_cbc = 1015;

const String SN_grasshopper_cfb = 'kuznyechik-cfb';

const int NID_grasshopper_cfb = 1016;

const String SN_grasshopper_mac = 'kuznyechik-mac';

const int NID_grasshopper_mac = 1017;

const int ASN1_R_ADDING_OBJECT = 171;

const int ASN1_R_ASN1_PARSE_ERROR = 203;

const int ASN1_R_ASN1_SIG_PARSE_ERROR = 204;

const int ASN1_R_AUX_ERROR = 100;

const int ASN1_R_BAD_OBJECT_HEADER = 102;

const int ASN1_R_BAD_TEMPLATE = 230;

const int ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;

const int ASN1_R_BN_LIB = 105;

const int ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;

const int ASN1_R_BUFFER_TOO_SMALL = 107;

const int ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;

const int ASN1_R_CONTEXT_NOT_INITIALISED = 217;

const int ASN1_R_DATA_IS_WRONG = 109;

const int ASN1_R_DECODE_ERROR = 110;

const int ASN1_R_DEPTH_EXCEEDED = 174;

const int ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;

const int ASN1_R_ENCODE_ERROR = 112;

const int ASN1_R_ERROR_GETTING_TIME = 173;

const int ASN1_R_ERROR_LOADING_SECTION = 172;

const int ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;

const int ASN1_R_EXPECTING_AN_INTEGER = 115;

const int ASN1_R_EXPECTING_AN_OBJECT = 116;

const int ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;

const int ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;

const int ASN1_R_FIELD_MISSING = 121;

const int ASN1_R_FIRST_NUM_TOO_LARGE = 122;

const int ASN1_R_GENERALIZEDTIME_IS_TOO_SHORT = 232;

const int ASN1_R_HEADER_TOO_LONG = 123;

const int ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;

const int ASN1_R_ILLEGAL_BOOLEAN = 176;

const int ASN1_R_ILLEGAL_CHARACTERS = 124;

const int ASN1_R_ILLEGAL_FORMAT = 177;

const int ASN1_R_ILLEGAL_HEX = 178;

const int ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;

const int ASN1_R_ILLEGAL_INTEGER = 180;

const int ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;

const int ASN1_R_ILLEGAL_NESTED_TAGGING = 181;

const int ASN1_R_ILLEGAL_NULL = 125;

const int ASN1_R_ILLEGAL_NULL_VALUE = 182;

const int ASN1_R_ILLEGAL_OBJECT = 183;

const int ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;

const int ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;

const int ASN1_R_ILLEGAL_PADDING = 221;

const int ASN1_R_ILLEGAL_TAGGED_ANY = 127;

const int ASN1_R_ILLEGAL_TIME_VALUE = 184;

const int ASN1_R_ILLEGAL_ZERO_CONTENT = 222;

const int ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;

const int ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;

const int ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;

const int ASN1_R_INVALID_BMPSTRING_LENGTH = 129;

const int ASN1_R_INVALID_DIGIT = 130;

const int ASN1_R_INVALID_MIME_TYPE = 205;

const int ASN1_R_INVALID_MODIFIER = 186;

const int ASN1_R_INVALID_NUMBER = 187;

const int ASN1_R_INVALID_OBJECT_ENCODING = 216;

const int ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;

const int ASN1_R_INVALID_SEPARATOR = 131;

const int ASN1_R_INVALID_STRING_TABLE_VALUE = 218;

const int ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;

const int ASN1_R_INVALID_UTF8STRING = 134;

const int ASN1_R_INVALID_VALUE = 219;

const int ASN1_R_LENGTH_TOO_LONG = 231;

const int ASN1_R_LIST_ERROR = 188;

const int ASN1_R_MIME_NO_CONTENT_TYPE = 206;

const int ASN1_R_MIME_PARSE_ERROR = 207;

const int ASN1_R_MIME_SIG_PARSE_ERROR = 208;

const int ASN1_R_MISSING_EOC = 137;

const int ASN1_R_MISSING_SECOND_NUMBER = 138;

const int ASN1_R_MISSING_VALUE = 189;

const int ASN1_R_MSTRING_NOT_UNIVERSAL = 139;

const int ASN1_R_MSTRING_WRONG_TAG = 140;

const int ASN1_R_NESTED_ASN1_STRING = 197;

const int ASN1_R_NESTED_TOO_DEEP = 201;

const int ASN1_R_NON_HEX_CHARACTERS = 141;

const int ASN1_R_NOT_ASCII_FORMAT = 190;

const int ASN1_R_NOT_ENOUGH_DATA = 142;

const int ASN1_R_NO_CONTENT_TYPE = 209;

const int ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;

const int ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;

const int ASN1_R_NO_MULTIPART_BOUNDARY = 211;

const int ASN1_R_NO_SIG_CONTENT_TYPE = 212;

const int ASN1_R_NULL_IS_WRONG_LENGTH = 144;

const int ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;

const int ASN1_R_ODD_NUMBER_OF_CHARS = 145;

const int ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;

const int ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;

const int ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;

const int ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;

const int ASN1_R_SHORT_LINE = 150;

const int ASN1_R_SIG_INVALID_MIME_TYPE = 213;

const int ASN1_R_STREAMING_NOT_SUPPORTED = 202;

const int ASN1_R_STRING_TOO_LONG = 151;

const int ASN1_R_STRING_TOO_SHORT = 152;

const int ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;

const int ASN1_R_TIME_NOT_ASCII_FORMAT = 193;

const int ASN1_R_TOO_LARGE = 223;

const int ASN1_R_TOO_LONG = 155;

const int ASN1_R_TOO_SMALL = 224;

const int ASN1_R_TYPE_NOT_CONSTRUCTED = 156;

const int ASN1_R_TYPE_NOT_PRIMITIVE = 195;

const int ASN1_R_UNEXPECTED_EOC = 159;

const int ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;

const int ASN1_R_UNKNOWN_DIGEST = 229;

const int ASN1_R_UNKNOWN_FORMAT = 160;

const int ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;

const int ASN1_R_UNKNOWN_OBJECT_TYPE = 162;

const int ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;

const int ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;

const int ASN1_R_UNKNOWN_TAG = 194;

const int ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;

const int ASN1_R_UNSUPPORTED_CIPHER = 228;

const int ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;

const int ASN1_R_UNSUPPORTED_TYPE = 196;

const int ASN1_R_UTCTIME_IS_TOO_SHORT = 233;

const int ASN1_R_WRONG_INTEGER_TYPE = 225;

const int ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;

const int ASN1_R_WRONG_TAG = 168;

const int V_ASN1_UNIVERSAL = 0;

const int V_ASN1_APPLICATION = 64;

const int V_ASN1_CONTEXT_SPECIFIC = 128;

const int V_ASN1_PRIVATE = 192;

const int V_ASN1_CONSTRUCTED = 32;

const int V_ASN1_PRIMITIVE_TAG = 31;

const int V_ASN1_PRIMATIVE_TAG = 31;

const int V_ASN1_APP_CHOOSE = -2;

const int V_ASN1_OTHER = -3;

const int V_ASN1_ANY = -4;

const int V_ASN1_UNDEF = -1;

const int V_ASN1_EOC = 0;

const int V_ASN1_BOOLEAN = 1;

const int V_ASN1_INTEGER = 2;

const int V_ASN1_BIT_STRING = 3;

const int V_ASN1_OCTET_STRING = 4;

const int V_ASN1_NULL = 5;

const int V_ASN1_OBJECT = 6;

const int V_ASN1_OBJECT_DESCRIPTOR = 7;

const int V_ASN1_EXTERNAL = 8;

const int V_ASN1_REAL = 9;

const int V_ASN1_ENUMERATED = 10;

const int V_ASN1_UTF8STRING = 12;

const int V_ASN1_SEQUENCE = 16;

const int V_ASN1_SET = 17;

const int V_ASN1_NUMERICSTRING = 18;

const int V_ASN1_PRINTABLESTRING = 19;

const int V_ASN1_T61STRING = 20;

const int V_ASN1_TELETEXSTRING = 20;

const int V_ASN1_VIDEOTEXSTRING = 21;

const int V_ASN1_IA5STRING = 22;

const int V_ASN1_UTCTIME = 23;

const int V_ASN1_GENERALIZEDTIME = 24;

const int V_ASN1_GRAPHICSTRING = 25;

const int V_ASN1_ISO64STRING = 26;

const int V_ASN1_VISIBLESTRING = 26;

const int V_ASN1_GENERALSTRING = 27;

const int V_ASN1_UNIVERSALSTRING = 28;

const int V_ASN1_BMPSTRING = 30;

const int V_ASN1_NEG = 256;

const int V_ASN1_NEG_INTEGER = 258;

const int V_ASN1_NEG_ENUMERATED = 266;

const int B_ASN1_NUMERICSTRING = 1;

const int B_ASN1_PRINTABLESTRING = 2;

const int B_ASN1_T61STRING = 4;

const int B_ASN1_TELETEXSTRING = 4;

const int B_ASN1_VIDEOTEXSTRING = 8;

const int B_ASN1_IA5STRING = 16;

const int B_ASN1_GRAPHICSTRING = 32;

const int B_ASN1_ISO64STRING = 64;

const int B_ASN1_VISIBLESTRING = 64;

const int B_ASN1_GENERALSTRING = 128;

const int B_ASN1_UNIVERSALSTRING = 256;

const int B_ASN1_OCTET_STRING = 512;

const int B_ASN1_BIT_STRING = 1024;

const int B_ASN1_BMPSTRING = 2048;

const int B_ASN1_UNKNOWN = 4096;

const int B_ASN1_UTF8STRING = 8192;

const int B_ASN1_UTCTIME = 16384;

const int B_ASN1_GENERALIZEDTIME = 32768;

const int B_ASN1_SEQUENCE = 65536;

const int MBSTRING_FLAG = 4096;

const int MBSTRING_UTF8 = 4096;

const int MBSTRING_ASC = 4097;

const int MBSTRING_BMP = 4098;

const int MBSTRING_UNIV = 4100;

const int SMIME_OLDMIME = 1024;

const int SMIME_CRLFEOL = 2048;

const int SMIME_STREAM = 4096;

const int ASN1_STRING_FLAG_BITS_LEFT = 8;

const int ASN1_STRING_FLAG_NDEF = 16;

const int ASN1_STRING_FLAG_CONT = 32;

const int ASN1_STRING_FLAG_MSTRING = 64;

const int ASN1_STRING_FLAG_EMBED = 128;

const int ASN1_STRING_FLAG_X509_TIME = 256;

const int ASN1_LONG_UNDEF = 2147483647;

const int STABLE_FLAGS_MALLOC = 1;

const int STABLE_FLAGS_CLEAR = 1;

const int STABLE_NO_MASK = 2;

const int DIRSTRING_TYPE = 10246;

const int PKCS9STRING_TYPE = 10262;

const int ub_name = 32768;

const int ub_common_name = 64;

const int ub_locality_name = 128;

const int ub_state_name = 128;

const int ub_organization_name = 64;

const int ub_organization_unit_name = 64;

const int ub_title = 64;

const int ub_email_address = 128;

const int ASN1_STRFLGS_ESC_2253 = 1;

const int ASN1_STRFLGS_ESC_CTRL = 2;

const int ASN1_STRFLGS_ESC_MSB = 4;

const int ASN1_DTFLGS_TYPE_MASK = 15;

const int ASN1_DTFLGS_RFC822 = 0;

const int ASN1_DTFLGS_ISO8601 = 1;

const int ASN1_STRFLGS_ESC_QUOTE = 8;

const int CHARTYPE_PRINTABLESTRING = 16;

const int CHARTYPE_FIRST_ESC_2253 = 32;

const int CHARTYPE_LAST_ESC_2253 = 64;

const int ASN1_STRFLGS_UTF8_CONVERT = 16;

const int ASN1_STRFLGS_IGNORE_TYPE = 32;

const int ASN1_STRFLGS_SHOW_TYPE = 64;

const int ASN1_STRFLGS_DUMP_ALL = 128;

const int ASN1_STRFLGS_DUMP_UNKNOWN = 256;

const int ASN1_STRFLGS_DUMP_DER = 512;

const int ASN1_STRFLGS_ESC_2254 = 1024;

const int ASN1_STRFLGS_RFC2253 = 791;

const int B_ASN1_TIME = 49152;

const int B_ASN1_PRINTABLE = 81175;

const int B_ASN1_DIRECTORYSTRING = 10502;

const int B_ASN1_DISPLAYTEXT = 10320;

const int ASN1_PCTX_FLAGS_SHOW_ABSENT = 1;

const int ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 2;

const int ASN1_PCTX_FLAGS_SHOW_SSOF = 4;

const int ASN1_PCTX_FLAGS_SHOW_TYPE = 8;

const int ASN1_PCTX_FLAGS_NO_ANY_TYPE = 16;

const int ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 32;

const int ASN1_PCTX_FLAGS_NO_FIELD_NAME = 64;

const int ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 128;

const int ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 256;

const int OBJ_R_OID_EXISTS = 102;

const int OBJ_R_UNKNOWN_NID = 101;

const int OBJ_R_UNKNOWN_OBJECT_NAME = 103;

const int OBJ_NAME_TYPE_UNDEF = 0;

const int OBJ_NAME_TYPE_MD_METH = 1;

const int OBJ_NAME_TYPE_CIPHER_METH = 2;

const int OBJ_NAME_TYPE_PKEY_METH = 3;

const int OBJ_NAME_TYPE_COMP_METH = 4;

const int OBJ_NAME_TYPE_MAC_METH = 5;

const int OBJ_NAME_TYPE_KDF_METH = 6;

const int OBJ_NAME_TYPE_NUM = 7;

const int OBJ_NAME_ALIAS = 32768;

const int OBJ_BSEARCH_VALUE_ON_NOMATCH = 1;

const int OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 2;

const String SN_ac_auditEntity = 'ac-auditIdentity';

const int EVP_PK_RSA = 1;

const int EVP_PK_DSA = 2;

const int EVP_PK_DH = 4;

const int EVP_PK_EC = 8;

const int EVP_PKT_SIGN = 16;

const int EVP_PKT_ENC = 32;

const int EVP_PKT_EXCH = 64;

const int EVP_PKS_RSA = 256;

const int EVP_PKS_DSA = 512;

const int EVP_PKS_EC = 1024;

const int EVP_PKEY_NONE = 0;

const int EVP_PKEY_RSA = 6;

const int EVP_PKEY_RSA2 = 19;

const int EVP_PKEY_RSA_PSS = 912;

const int EVP_PKEY_DSA = 116;

const int EVP_PKEY_DSA1 = 67;

const int EVP_PKEY_DSA2 = 66;

const int EVP_PKEY_DSA3 = 113;

const int EVP_PKEY_DSA4 = 70;

const int EVP_PKEY_DH = 28;

const int EVP_PKEY_DHX = 920;

const int EVP_PKEY_EC = 408;

const int EVP_PKEY_SM2 = 1172;

const int EVP_PKEY_HMAC = 855;

const int EVP_PKEY_CMAC = 894;

const int EVP_PKEY_SCRYPT = 973;

const int EVP_PKEY_TLS1_PRF = 1021;

const int EVP_PKEY_HKDF = 1036;

const int EVP_PKEY_POLY1305 = 1061;

const int EVP_PKEY_SIPHASH = 1062;

const int EVP_PKEY_X25519 = 1034;

const int EVP_PKEY_ED25519 = 1087;

const int EVP_PKEY_X448 = 1035;

const int EVP_PKEY_ED448 = 1088;

const int EVP_PKEY_KEYMGMT = -1;

const int EVP_PKEY_KEY_PARAMETERS = 132;

const int EVP_PKEY_PRIVATE_KEY = 133;

const int EVP_PKEY_PUBLIC_KEY = 134;

const int EVP_PKEY_KEYPAIR = 135;

const int EVP_PKEY_MO_SIGN = 1;

const int EVP_PKEY_MO_VERIFY = 2;

const int EVP_PKEY_MO_ENCRYPT = 4;

const int EVP_PKEY_MO_DECRYPT = 8;

const int EVP_MD_FLAG_ONESHOT = 1;

const int EVP_MD_FLAG_XOF = 2;

const int EVP_MD_FLAG_DIGALGID_MASK = 24;

const int EVP_MD_FLAG_DIGALGID_NULL = 0;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 8;

const int EVP_MD_FLAG_DIGALGID_CUSTOM = 24;

const int EVP_MD_FLAG_FIPS = 1024;

const int EVP_MD_CTRL_DIGALGID = 1;

const int EVP_MD_CTRL_MICALG = 2;

const int EVP_MD_CTRL_XOF_LEN = 3;

const int EVP_MD_CTRL_TLSTREE = 4;

const int EVP_MD_CTRL_ALG_CTRL = 4096;

const int EVP_MD_CTX_FLAG_ONESHOT = 1;

const int EVP_MD_CTX_FLAG_CLEANED = 2;

const int EVP_MD_CTX_FLAG_REUSE = 4;

const int EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 8;

const int EVP_MD_CTX_FLAG_PAD_MASK = 240;

const int EVP_MD_CTX_FLAG_PAD_PKCS1 = 0;

const int EVP_MD_CTX_FLAG_PAD_X931 = 16;

const int EVP_MD_CTX_FLAG_PAD_PSS = 32;

const int EVP_MD_CTX_FLAG_NO_INIT = 256;

const int EVP_MD_CTX_FLAG_FINALISE = 512;

const int EVP_CIPH_STREAM_CIPHER = 0;

const int EVP_CIPH_ECB_MODE = 1;

const int EVP_CIPH_CBC_MODE = 2;

const int EVP_CIPH_CFB_MODE = 3;

const int EVP_CIPH_OFB_MODE = 4;

const int EVP_CIPH_CTR_MODE = 5;

const int EVP_CIPH_GCM_MODE = 6;

const int EVP_CIPH_CCM_MODE = 7;

const int EVP_CIPH_XTS_MODE = 65537;

const int EVP_CIPH_WRAP_MODE = 65538;

const int EVP_CIPH_OCB_MODE = 65539;

const int EVP_CIPH_SIV_MODE = 65540;

const int EVP_CIPH_GCM_SIV_MODE = 65541;

const int EVP_CIPH_MODE = 983047;

const int EVP_CIPH_VARIABLE_LENGTH = 8;

const int EVP_CIPH_CUSTOM_IV = 16;

const int EVP_CIPH_ALWAYS_CALL_INIT = 32;

const int EVP_CIPH_CTRL_INIT = 64;

const int EVP_CIPH_CUSTOM_KEY_LENGTH = 128;

const int EVP_CIPH_NO_PADDING = 256;

const int EVP_CIPH_RAND_KEY = 512;

const int EVP_CIPH_CUSTOM_COPY = 1024;

const int EVP_CIPH_CUSTOM_IV_LENGTH = 2048;

const int EVP_CIPH_FLAG_DEFAULT_ASN1 = 0;

const int EVP_CIPH_FLAG_LENGTH_BITS = 8192;

const int EVP_CIPH_FLAG_FIPS = 0;

const int EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0;

const int EVP_CIPH_FLAG_CTS = 16384;

const int EVP_CIPH_FLAG_CUSTOM_CIPHER = 1048576;

const int EVP_CIPH_FLAG_AEAD_CIPHER = 2097152;

const int EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 4194304;

const int EVP_CIPH_FLAG_PIPELINE = 8388608;

const int EVP_CIPH_FLAG_CUSTOM_ASN1 = 16777216;

const int EVP_CIPH_FLAG_CIPHER_WITH_MAC = 33554432;

const int EVP_CIPH_FLAG_GET_WRAP_CIPHER = 67108864;

const int EVP_CIPH_FLAG_INVERSE_CIPHER = 134217728;

const int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 1;

const int EVP_CTRL_INIT = 0;

const int EVP_CTRL_SET_KEY_LENGTH = 1;

const int EVP_CTRL_GET_RC2_KEY_BITS = 2;

const int EVP_CTRL_SET_RC2_KEY_BITS = 3;

const int EVP_CTRL_GET_RC5_ROUNDS = 4;

const int EVP_CTRL_SET_RC5_ROUNDS = 5;

const int EVP_CTRL_RAND_KEY = 6;

const int EVP_CTRL_PBE_PRF_NID = 7;

const int EVP_CTRL_COPY = 8;

const int EVP_CTRL_AEAD_SET_IVLEN = 9;

const int EVP_CTRL_AEAD_GET_TAG = 16;

const int EVP_CTRL_AEAD_SET_TAG = 17;

const int EVP_CTRL_AEAD_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_SET_IVLEN = 9;

const int EVP_CTRL_GCM_GET_TAG = 16;

const int EVP_CTRL_GCM_SET_TAG = 17;

const int EVP_CTRL_GCM_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_IV_GEN = 19;

const int EVP_CTRL_CCM_SET_IVLEN = 9;

const int EVP_CTRL_CCM_GET_TAG = 16;

const int EVP_CTRL_CCM_SET_TAG = 17;

const int EVP_CTRL_CCM_SET_IV_FIXED = 18;

const int EVP_CTRL_CCM_SET_L = 20;

const int EVP_CTRL_CCM_SET_MSGLEN = 21;

const int EVP_CTRL_AEAD_TLS1_AAD = 22;

const int EVP_CTRL_AEAD_SET_MAC_KEY = 23;

const int EVP_CTRL_GCM_SET_IV_INV = 24;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 25;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 26;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 27;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 28;

const int EVP_CTRL_SSL3_MASTER_SECRET = 29;

const int EVP_CTRL_SET_SBOX = 30;

const int EVP_CTRL_SBOX_USED = 31;

const int EVP_CTRL_KEY_MESH = 32;

const int EVP_CTRL_BLOCK_PADDING_MODE = 33;

const int EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 34;

const int EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 35;

const int EVP_CTRL_SET_PIPELINE_INPUT_LENS = 36;

const int EVP_CTRL_GET_IVLEN = 37;

const int EVP_CTRL_SET_SPEED = 39;

const int EVP_CTRL_PROCESS_UNPROTECTED = 40;

const int EVP_CTRL_GET_WRAP_CIPHER = 41;

const int EVP_CTRL_TLSTREE = 42;

const int EVP_PADDING_PKCS7 = 1;

const int EVP_PADDING_ISO7816_4 = 2;

const int EVP_PADDING_ANSI923 = 3;

const int EVP_PADDING_ISO10126 = 4;

const int EVP_PADDING_ZERO = 5;

const int EVP_AEAD_TLS1_AAD_LEN = 13;

const int EVP_GCM_TLS_FIXED_IV_LEN = 4;

const int EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_GCM_TLS_TAG_LEN = 16;

const int EVP_CCM_TLS_FIXED_IV_LEN = 4;

const int EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_CCM_TLS_IV_LEN = 12;

const int EVP_CCM_TLS_TAG_LEN = 16;

const int EVP_CCM8_TLS_TAG_LEN = 8;

const int EVP_CHACHAPOLY_TLS_TAG_LEN = 16;

const int EVP_RAND_STATE_UNINITIALISED = 0;

const int EVP_RAND_STATE_READY = 1;

const int EVP_RAND_STATE_ERROR = 2;

const int EVP_PBE_TYPE_OUTER = 0;

const int EVP_PBE_TYPE_PRF = 1;

const int EVP_PBE_TYPE_KDF = 2;

const int ASN1_PKEY_ALIAS = 1;

const int ASN1_PKEY_DYNAMIC = 2;

const int ASN1_PKEY_SIGPARAM_NULL = 4;

const int ASN1_PKEY_CTRL_PKCS7_SIGN = 1;

const int ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 2;

const int ASN1_PKEY_CTRL_DEFAULT_MD_NID = 3;

const int ASN1_PKEY_CTRL_CMS_SIGN = 5;

const int ASN1_PKEY_CTRL_CMS_ENVELOPE = 7;

const int ASN1_PKEY_CTRL_CMS_RI_TYPE = 8;

const int ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 9;

const int ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 10;

const int ASN1_PKEY_CTRL_CMS_IS_RI_TYPE_SUPPORTED = 11;

const int EVP_PKEY_OP_UNDEFINED = 0;

const int EVP_PKEY_OP_PARAMGEN = 2;

const int EVP_PKEY_OP_KEYGEN = 4;

const int EVP_PKEY_OP_FROMDATA = 8;

const int EVP_PKEY_OP_SIGN = 16;

const int EVP_PKEY_OP_VERIFY = 32;

const int EVP_PKEY_OP_VERIFYRECOVER = 64;

const int EVP_PKEY_OP_SIGNCTX = 128;

const int EVP_PKEY_OP_VERIFYCTX = 256;

const int EVP_PKEY_OP_ENCRYPT = 512;

const int EVP_PKEY_OP_DECRYPT = 1024;

const int EVP_PKEY_OP_DERIVE = 2048;

const int EVP_PKEY_OP_ENCAPSULATE = 4096;

const int EVP_PKEY_OP_DECAPSULATE = 8192;

const int EVP_PKEY_OP_SIGNMSG = 16384;

const int EVP_PKEY_OP_VERIFYMSG = 32768;

const int EVP_PKEY_OP_ALL = 65535;

const int EVP_PKEY_OP_TYPE_SIG = 49648;

const int EVP_PKEY_OP_TYPE_CRYPT = 1536;

const int EVP_PKEY_OP_TYPE_DERIVE = 2048;

const int EVP_PKEY_OP_TYPE_DATA = 8;

const int EVP_PKEY_OP_TYPE_KEM = 12288;

const int EVP_PKEY_OP_TYPE_GEN = 6;

const int EVP_PKEY_OP_TYPE_NOGEN = 65529;

const int EVP_PKEY_CTRL_MD = 1;

const int EVP_PKEY_CTRL_PEER_KEY = 2;

const int EVP_PKEY_CTRL_SET_MAC_KEY = 6;

const int EVP_PKEY_CTRL_DIGESTINIT = 7;

const int EVP_PKEY_CTRL_SET_IV = 8;

const int EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;

const int EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;

const int EVP_PKEY_CTRL_PKCS7_SIGN = 5;

const int EVP_PKEY_CTRL_CMS_ENCRYPT = 9;

const int EVP_PKEY_CTRL_CMS_DECRYPT = 10;

const int EVP_PKEY_CTRL_CMS_SIGN = 11;

const int EVP_PKEY_CTRL_CIPHER = 12;

const int EVP_PKEY_CTRL_GET_MD = 13;

const int EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;

const int EVP_PKEY_CTRL_SET1_ID = 15;

const int EVP_PKEY_CTRL_GET1_ID = 16;

const int EVP_PKEY_CTRL_GET1_ID_LEN = 17;

const int EVP_PKEY_ALG_CTRL = 4096;

const int EVP_PKEY_FLAG_AUTOARGLEN = 2;

const int EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;

const int OPENSSL_EC_EXPLICIT_CURVE = 0;

const int OPENSSL_EC_NAMED_CURVE = 1;

const int EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = 4097;

const int EVP_PKEY_CTRL_EC_PARAM_ENC = 4098;

const int EVP_PKEY_CTRL_EC_ECDH_COFACTOR = 4099;

const int EVP_PKEY_CTRL_EC_KDF_TYPE = 4100;

const int EVP_PKEY_CTRL_EC_KDF_MD = 4101;

const int EVP_PKEY_CTRL_GET_EC_KDF_MD = 4102;

const int EVP_PKEY_CTRL_EC_KDF_OUTLEN = 4103;

const int EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = 4104;

const int EVP_PKEY_CTRL_EC_KDF_UKM = 4105;

const int EVP_PKEY_CTRL_GET_EC_KDF_UKM = 4106;

const int EVP_PKEY_ECDH_KDF_NONE = 1;

const int EVP_PKEY_ECDH_KDF_X9_63 = 2;

const int EVP_PKEY_ECDH_KDF_X9_62 = 2;

const int EC_R_ASN1_ERROR = 115;

const int EC_R_BAD_SIGNATURE = 156;

const int EC_R_BIGNUM_OUT_OF_RANGE = 144;

const int EC_R_BUFFER_TOO_SMALL = 100;

const int EC_R_CANNOT_INVERT = 165;

const int EC_R_COORDINATES_OUT_OF_RANGE = 146;

const int EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160;

const int EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA = 170;

const int EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159;

const int EC_R_DECODE_ERROR = 142;

const int EC_R_DISCRIMINANT_IS_ZERO = 118;

const int EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119;

const int EC_R_EXPLICIT_PARAMS_NOT_SUPPORTED = 127;

const int EC_R_FAILED_MAKING_PUBLIC_KEY = 166;

const int EC_R_FIELD_TOO_LARGE = 143;

const int EC_R_GF2M_NOT_SUPPORTED = 147;

const int EC_R_GROUP2PKPARAMETERS_FAILURE = 120;

const int EC_R_I2D_ECPKPARAMETERS_FAILURE = 121;

const int EC_R_INCOMPATIBLE_OBJECTS = 101;

const int EC_R_INVALID_A = 168;

const int EC_R_INVALID_ARGUMENT = 112;

const int EC_R_INVALID_B = 169;

const int EC_R_INVALID_COFACTOR = 171;

const int EC_R_INVALID_COMPRESSED_POINT = 110;

const int EC_R_INVALID_COMPRESSION_BIT = 109;

const int EC_R_INVALID_CURVE = 141;

const int EC_R_INVALID_DIGEST = 151;

const int EC_R_INVALID_DIGEST_TYPE = 138;

const int EC_R_INVALID_ENCODING = 102;

const int EC_R_INVALID_FIELD = 103;

const int EC_R_INVALID_FORM = 104;

const int EC_R_INVALID_GENERATOR = 173;

const int EC_R_INVALID_GROUP_ORDER = 122;

const int EC_R_INVALID_KEY = 116;

const int EC_R_INVALID_LENGTH = 117;

const int EC_R_INVALID_NAMED_GROUP_CONVERSION = 174;

const int EC_R_INVALID_OUTPUT_LENGTH = 161;

const int EC_R_INVALID_P = 172;

const int EC_R_INVALID_PEER_KEY = 133;

const int EC_R_INVALID_PENTANOMIAL_BASIS = 132;

const int EC_R_INVALID_PRIVATE_KEY = 123;

const int EC_R_INVALID_SEED = 175;

const int EC_R_INVALID_TRINOMIAL_BASIS = 137;

const int EC_R_KDF_PARAMETER_ERROR = 148;

const int EC_R_KEYS_NOT_SET = 140;

const int EC_R_LADDER_POST_FAILURE = 136;

const int EC_R_LADDER_PRE_FAILURE = 153;

const int EC_R_LADDER_STEP_FAILURE = 162;

const int EC_R_MISSING_OID = 167;

const int EC_R_MISSING_PARAMETERS = 124;

const int EC_R_MISSING_PRIVATE_KEY = 125;

const int EC_R_NEED_NEW_SETUP_VALUES = 157;

const int EC_R_NOT_A_NIST_PRIME = 135;

const int EC_R_NOT_IMPLEMENTED = 126;

const int EC_R_NOT_INITIALIZED = 111;

const int EC_R_NO_PARAMETERS_SET = 139;

const int EC_R_NO_PRIVATE_VALUE = 154;

const int EC_R_OPERATION_NOT_SUPPORTED = 152;

const int EC_R_PASSED_NULL_PARAMETER = 134;

const int EC_R_PEER_KEY_ERROR = 149;

const int EC_R_POINT_ARITHMETIC_FAILURE = 155;

const int EC_R_POINT_AT_INFINITY = 106;

const int EC_R_POINT_COORDINATES_BLIND_FAILURE = 163;

const int EC_R_POINT_IS_NOT_ON_CURVE = 107;

const int EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158;

const int EC_R_SHARED_INFO_ERROR = 150;

const int EC_R_SLOT_FULL = 108;

const int EC_R_TOO_MANY_RETRIES = 176;

const int EC_R_UNDEFINED_GENERATOR = 113;

const int EC_R_UNDEFINED_ORDER = 128;

const int EC_R_UNKNOWN_COFACTOR = 164;

const int EC_R_UNKNOWN_GROUP = 129;

const int EC_R_UNKNOWN_ORDER = 114;

const int EC_R_UNSUPPORTED_FIELD = 131;

const int EC_R_WRONG_CURVE_PARAMETERS = 145;

const int EC_R_WRONG_ORDER = 130;

const int OPENSSL_ECC_MAX_FIELD_BITS = 661;

const int EC_PKEY_NO_PARAMETERS = 1;

const int EC_PKEY_NO_PUBKEY = 2;

const int EC_FLAG_SM2_RANGE = 4;

const int EC_FLAG_COFACTOR_ECDH = 4096;

const int EC_FLAG_CHECK_NAMED_GROUP = 8192;

const int EC_FLAG_CHECK_NAMED_GROUP_NIST = 16384;

const int EC_FLAG_CHECK_NAMED_GROUP_MASK = 24576;

const int EC_FLAG_NON_FIPS_ALLOW = 0;

const int EC_FLAG_FIPS_CHECKED = 0;

const int EVP_KDF_HKDF_MODE_EXTRACT_AND_EXPAND = 0;

const int EVP_KDF_HKDF_MODE_EXTRACT_ONLY = 1;

const int EVP_KDF_HKDF_MODE_EXPAND_ONLY = 2;

const int EVP_KDF_SSHKDF_TYPE_INITIAL_IV_CLI_TO_SRV = 65;

const int EVP_KDF_SSHKDF_TYPE_INITIAL_IV_SRV_TO_CLI = 66;

const int EVP_KDF_SSHKDF_TYPE_ENCRYPTION_KEY_CLI_TO_SRV = 67;

const int EVP_KDF_SSHKDF_TYPE_ENCRYPTION_KEY_SRV_TO_CLI = 68;

const int EVP_KDF_SSHKDF_TYPE_INTEGRITY_KEY_CLI_TO_SRV = 69;

const int EVP_KDF_SSHKDF_TYPE_INTEGRITY_KEY_SRV_TO_CLI = 70;

const int EVP_PKEY_CTRL_TLS_MD = 4096;

const int EVP_PKEY_CTRL_TLS_SECRET = 4097;

const int EVP_PKEY_CTRL_TLS_SEED = 4098;

const int EVP_PKEY_CTRL_HKDF_MD = 4099;

const int EVP_PKEY_CTRL_HKDF_SALT = 4100;

const int EVP_PKEY_CTRL_HKDF_KEY = 4101;

const int EVP_PKEY_CTRL_HKDF_INFO = 4102;

const int EVP_PKEY_CTRL_HKDF_MODE = 4103;

const int EVP_PKEY_CTRL_PASS = 4104;

const int EVP_PKEY_CTRL_SCRYPT_SALT = 4105;

const int EVP_PKEY_CTRL_SCRYPT_N = 4106;

const int EVP_PKEY_CTRL_SCRYPT_R = 4107;

const int EVP_PKEY_CTRL_SCRYPT_P = 4108;

const int EVP_PKEY_CTRL_SCRYPT_MAXMEM_BYTES = 4109;

const int EVP_PKEY_HKDEF_MODE_EXTRACT_AND_EXPAND = 0;

const int EVP_PKEY_HKDEF_MODE_EXTRACT_ONLY = 1;

const int EVP_PKEY_HKDEF_MODE_EXPAND_ONLY = 2;
